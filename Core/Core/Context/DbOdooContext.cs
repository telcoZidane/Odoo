using System;
using System.Collections.Generic;
using Core.Core.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Core.Core.Context;

public partial class DbOdooContext : DbContext
{
    private readonly IConfiguration configuration;
    public DbOdooContext(IConfiguration configuration)
    {
        this.configuration = configuration;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(configuration.GetConnectionString("LeociaConnection"));
    }

    public virtual DbSet<AccountAccount> AccountAccounts { get; set; }

    public virtual DbSet<AccountAccountTag> AccountAccountTags { get; set; }

    public virtual DbSet<AccountAccountTemplate> AccountAccountTemplates { get; set; }

    public virtual DbSet<AccountAccruedOrdersWizard> AccountAccruedOrdersWizards { get; set; }

    public virtual DbSet<AccountAnalyticAccount> AccountAnalyticAccounts { get; set; }

    public virtual DbSet<AccountAnalyticApplicability> AccountAnalyticApplicabilities { get; set; }

    public virtual DbSet<AccountAnalyticDistributionModel> AccountAnalyticDistributionModels { get; set; }

    public virtual DbSet<AccountAnalyticLine> AccountAnalyticLines { get; set; }

    public virtual DbSet<AccountAnalyticPlan> AccountAnalyticPlans { get; set; }

    public virtual DbSet<AccountAutomaticEntryWizard> AccountAutomaticEntryWizards { get; set; }

    public virtual DbSet<AccountBankStatement> AccountBankStatements { get; set; }

    public virtual DbSet<AccountBankStatementLine> AccountBankStatementLines { get; set; }

    public virtual DbSet<AccountCashRounding> AccountCashRoundings { get; set; }

    public virtual DbSet<AccountChartTemplate> AccountChartTemplates { get; set; }

    public virtual DbSet<AccountEdiDocument> AccountEdiDocuments { get; set; }

    public virtual DbSet<AccountEdiFormat> AccountEdiFormats { get; set; }

    public virtual DbSet<AccountFinancialYearOp> AccountFinancialYearOps { get; set; }

    public virtual DbSet<AccountFiscalPosition> AccountFiscalPositions { get; set; }

    public virtual DbSet<AccountFiscalPositionAccount> AccountFiscalPositionAccounts { get; set; }

    public virtual DbSet<AccountFiscalPositionAccountTemplate> AccountFiscalPositionAccountTemplates { get; set; }

    public virtual DbSet<AccountFiscalPositionTax> AccountFiscalPositionTaxes { get; set; }

    public virtual DbSet<AccountFiscalPositionTaxTemplate> AccountFiscalPositionTaxTemplates { get; set; }

    public virtual DbSet<AccountFiscalPositionTemplate> AccountFiscalPositionTemplates { get; set; }

    public virtual DbSet<AccountFullReconcile> AccountFullReconciles { get; set; }

    public virtual DbSet<AccountGroup> AccountGroups { get; set; }

    public virtual DbSet<AccountGroupTemplate> AccountGroupTemplates { get; set; }

    public virtual DbSet<AccountIncoterm> AccountIncoterms { get; set; }

    public virtual DbSet<AccountInvoiceSend> AccountInvoiceSends { get; set; }

    public virtual DbSet<AccountJournal> AccountJournals { get; set; }

    public virtual DbSet<AccountJournalGroup> AccountJournalGroups { get; set; }

    public virtual DbSet<AccountMove> AccountMoves { get; set; }

    public virtual DbSet<AccountMoveLine> AccountMoveLines { get; set; }

    public virtual DbSet<AccountMoveReversal> AccountMoveReversals { get; set; }

    public virtual DbSet<AccountPartialReconcile> AccountPartialReconciles { get; set; }

    public virtual DbSet<AccountPayment> AccountPayments { get; set; }

    public virtual DbSet<AccountPaymentMethod> AccountPaymentMethods { get; set; }

    public virtual DbSet<AccountPaymentMethodLine> AccountPaymentMethodLines { get; set; }

    public virtual DbSet<AccountPaymentRegister> AccountPaymentRegisters { get; set; }

    public virtual DbSet<AccountPaymentTerm> AccountPaymentTerms { get; set; }

    public virtual DbSet<AccountPaymentTermLine> AccountPaymentTermLines { get; set; }

    public virtual DbSet<AccountReconcileModel> AccountReconcileModels { get; set; }

    public virtual DbSet<AccountReconcileModelLine> AccountReconcileModelLines { get; set; }

    public virtual DbSet<AccountReconcileModelLineTemplate> AccountReconcileModelLineTemplates { get; set; }

    public virtual DbSet<AccountReconcileModelPartnerMapping> AccountReconcileModelPartnerMappings { get; set; }

    public virtual DbSet<AccountReconcileModelTemplate> AccountReconcileModelTemplates { get; set; }

    public virtual DbSet<AccountReport> AccountReports { get; set; }

    public virtual DbSet<AccountReportColumn> AccountReportColumns { get; set; }

    public virtual DbSet<AccountReportExpression> AccountReportExpressions { get; set; }

    public virtual DbSet<AccountReportExternalValue> AccountReportExternalValues { get; set; }

    public virtual DbSet<AccountReportLine> AccountReportLines { get; set; }

    public virtual DbSet<AccountResequenceWizard> AccountResequenceWizards { get; set; }

    public virtual DbSet<AccountRoot> AccountRoots { get; set; }

    public virtual DbSet<AccountSetupBankManualConfig> AccountSetupBankManualConfigs { get; set; }

    public virtual DbSet<AccountTax> AccountTaxes { get; set; }

    public virtual DbSet<AccountTaxGroup> AccountTaxGroups { get; set; }

    public virtual DbSet<AccountTaxRepartitionLine> AccountTaxRepartitionLines { get; set; }

    public virtual DbSet<AccountTaxRepartitionLineTemplate> AccountTaxRepartitionLineTemplates { get; set; }

    public virtual DbSet<AccountTaxTemplate> AccountTaxTemplates { get; set; }

    public virtual DbSet<AccountTourUploadBill> AccountTourUploadBills { get; set; }

    public virtual DbSet<AccountTourUploadBillEmailConfirm> AccountTourUploadBillEmailConfirms { get; set; }

    public virtual DbSet<AccountUnreconcile> AccountUnreconciles { get; set; }

    public virtual DbSet<ApplicantGetRefuseReason> ApplicantGetRefuseReasons { get; set; }

    public virtual DbSet<ApplicantSendMail> ApplicantSendMails { get; set; }

    public virtual DbSet<AuthTotpDevice> AuthTotpDevices { get; set; }

    public virtual DbSet<AuthTotpWizard> AuthTotpWizards { get; set; }

    public virtual DbSet<BarcodeNomenclature> BarcodeNomenclatures { get; set; }

    public virtual DbSet<BarcodeRule> BarcodeRules { get; set; }

    public virtual DbSet<BaseDocumentLayout> BaseDocumentLayouts { get; set; }

    public virtual DbSet<BaseEnableProfilingWizard> BaseEnableProfilingWizards { get; set; }

    public virtual DbSet<BaseImportImport> BaseImportImports { get; set; }

    public virtual DbSet<BaseImportMapping> BaseImportMappings { get; set; }

    public virtual DbSet<BaseImportTestsModelsChar> BaseImportTestsModelsChars { get; set; }

    public virtual DbSet<BaseImportTestsModelsCharNoreadonly> BaseImportTestsModelsCharNoreadonlies { get; set; }

    public virtual DbSet<BaseImportTestsModelsCharReadonly> BaseImportTestsModelsCharReadonlies { get; set; }

    public virtual DbSet<BaseImportTestsModelsCharRequired> BaseImportTestsModelsCharRequireds { get; set; }

    public virtual DbSet<BaseImportTestsModelsCharState> BaseImportTestsModelsCharStates { get; set; }

    public virtual DbSet<BaseImportTestsModelsCharStillreadonly> BaseImportTestsModelsCharStillreadonlies { get; set; }

    public virtual DbSet<BaseImportTestsModelsComplex> BaseImportTestsModelsComplexes { get; set; }

    public virtual DbSet<BaseImportTestsModelsFloat> BaseImportTestsModelsFloats { get; set; }

    public virtual DbSet<BaseImportTestsModelsM2o> BaseImportTestsModelsM2os { get; set; }

    public virtual DbSet<BaseImportTestsModelsM2oRelated> BaseImportTestsModelsM2oRelateds { get; set; }

    public virtual DbSet<BaseImportTestsModelsM2oRequired> BaseImportTestsModelsM2oRequireds { get; set; }

    public virtual DbSet<BaseImportTestsModelsM2oRequiredRelated> BaseImportTestsModelsM2oRequiredRelateds { get; set; }

    public virtual DbSet<BaseImportTestsModelsO2m> BaseImportTestsModelsO2ms { get; set; }

    public virtual DbSet<BaseImportTestsModelsO2mChild> BaseImportTestsModelsO2mChildren { get; set; }

    public virtual DbSet<BaseImportTestsModelsPreview> BaseImportTestsModelsPreviews { get; set; }

    public virtual DbSet<BaseLanguageExport> BaseLanguageExports { get; set; }

    public virtual DbSet<BaseLanguageImport> BaseLanguageImports { get; set; }

    public virtual DbSet<BaseLanguageInstall> BaseLanguageInstalls { get; set; }

    public virtual DbSet<BaseModuleInstallRequest> BaseModuleInstallRequests { get; set; }

    public virtual DbSet<BaseModuleInstallReview> BaseModuleInstallReviews { get; set; }

    public virtual DbSet<BaseModuleUninstall> BaseModuleUninstalls { get; set; }

    public virtual DbSet<BaseModuleUpdate> BaseModuleUpdates { get; set; }

    public virtual DbSet<BaseModuleUpgrade> BaseModuleUpgrades { get; set; }

    public virtual DbSet<BasePartnerMergeAutomaticWizard> BasePartnerMergeAutomaticWizards { get; set; }

    public virtual DbSet<BasePartnerMergeLine> BasePartnerMergeLines { get; set; }

    public virtual DbSet<BusBu> BusBus { get; set; }

    public virtual DbSet<BusPresence> BusPresences { get; set; }

    public virtual DbSet<CalendarAlarm> CalendarAlarms { get; set; }

    public virtual DbSet<CalendarAttendee> CalendarAttendees { get; set; }

    public virtual DbSet<CalendarEvent> CalendarEvents { get; set; }

    public virtual DbSet<CalendarEventType> CalendarEventTypes { get; set; }

    public virtual DbSet<CalendarFilter> CalendarFilters { get; set; }

    public virtual DbSet<CalendarProviderConfig> CalendarProviderConfigs { get; set; }

    public virtual DbSet<CalendarRecurrence> CalendarRecurrences { get; set; }

    public virtual DbSet<ChangePasswordOwn> ChangePasswordOwns { get; set; }

    public virtual DbSet<ChangePasswordUser> ChangePasswordUsers { get; set; }

    public virtual DbSet<ChangePasswordWizard> ChangePasswordWizards { get; set; }

    public virtual DbSet<ChangeProductionQty> ChangeProductionQties { get; set; }

    public virtual DbSet<ChatbotMessage> ChatbotMessages { get; set; }

    public virtual DbSet<ChatbotScript> ChatbotScripts { get; set; }

    public virtual DbSet<ChatbotScriptAnswer> ChatbotScriptAnswers { get; set; }

    public virtual DbSet<ChatbotScriptStep> ChatbotScriptSteps { get; set; }

    public virtual DbSet<ConfirmStockSm> ConfirmStockSms { get; set; }

    public virtual DbSet<CrmActivityReport> CrmActivityReports { get; set; }

    public virtual DbSet<CrmIapLeadHelper> CrmIapLeadHelpers { get; set; }

    public virtual DbSet<CrmIapLeadIndustry> CrmIapLeadIndustries { get; set; }

    public virtual DbSet<CrmIapLeadMiningRequest> CrmIapLeadMiningRequests { get; set; }

    public virtual DbSet<CrmIapLeadRole> CrmIapLeadRoles { get; set; }

    public virtual DbSet<CrmIapLeadSeniority> CrmIapLeadSeniorities { get; set; }

    public virtual DbSet<CrmLead> CrmLeads { get; set; }

    public virtual DbSet<CrmLead2opportunityPartner> CrmLead2opportunityPartners { get; set; }

    public virtual DbSet<CrmLead2opportunityPartnerMass> CrmLead2opportunityPartnerMasses { get; set; }

    public virtual DbSet<CrmLeadLost> CrmLeadLosts { get; set; }

    public virtual DbSet<CrmLeadPlsUpdate> CrmLeadPlsUpdates { get; set; }

    public virtual DbSet<CrmLeadScoringFrequency> CrmLeadScoringFrequencies { get; set; }

    public virtual DbSet<CrmLeadScoringFrequencyField> CrmLeadScoringFrequencyFields { get; set; }

    public virtual DbSet<CrmLostReason> CrmLostReasons { get; set; }

    public virtual DbSet<CrmMergeOpportunity> CrmMergeOpportunities { get; set; }

    public virtual DbSet<CrmQuotationPartner> CrmQuotationPartners { get; set; }

    public virtual DbSet<CrmRecurringPlan> CrmRecurringPlans { get; set; }

    public virtual DbSet<CrmStage> CrmStages { get; set; }

    public virtual DbSet<CrmTag> CrmTags { get; set; }

    public virtual DbSet<CrmTeam> CrmTeams { get; set; }

    public virtual DbSet<CrmTeamMember> CrmTeamMembers { get; set; }

    public virtual DbSet<DataRecycleModel> DataRecycleModels { get; set; }

    public virtual DbSet<DataRecycleRecord> DataRecycleRecords { get; set; }

    public virtual DbSet<DecimalPrecision> DecimalPrecisions { get; set; }

    public virtual DbSet<DigestDigest> DigestDigests { get; set; }

    public virtual DbSet<DigestTip> DigestTips { get; set; }

    public virtual DbSet<EventEvent> EventEvents { get; set; }

    public virtual DbSet<EventEventConfigurator> EventEventConfigurators { get; set; }

    public virtual DbSet<EventEventTicket> EventEventTickets { get; set; }

    public virtual DbSet<EventLeadRule> EventLeadRules { get; set; }

    public virtual DbSet<EventMail> EventMails { get; set; }

    public virtual DbSet<EventMailRegistration> EventMailRegistrations { get; set; }

    public virtual DbSet<EventRegistration> EventRegistrations { get; set; }

    public virtual DbSet<EventSaleReport> EventSaleReports { get; set; }

    public virtual DbSet<EventStage> EventStages { get; set; }

    public virtual DbSet<EventTag> EventTags { get; set; }

    public virtual DbSet<EventTagCategory> EventTagCategories { get; set; }

    public virtual DbSet<EventType> EventTypes { get; set; }

    public virtual DbSet<EventTypeMail> EventTypeMails { get; set; }

    public virtual DbSet<EventTypeTicket> EventTypeTickets { get; set; }

    public virtual DbSet<FetchmailServer> FetchmailServers { get; set; }

    public virtual DbSet<FleetServiceType> FleetServiceTypes { get; set; }

    public virtual DbSet<FleetVehicle> FleetVehicles { get; set; }

    public virtual DbSet<FleetVehicleAssignationLog> FleetVehicleAssignationLogs { get; set; }

    public virtual DbSet<FleetVehicleCostReport> FleetVehicleCostReports { get; set; }

    public virtual DbSet<FleetVehicleLogContract> FleetVehicleLogContracts { get; set; }

    public virtual DbSet<FleetVehicleLogService> FleetVehicleLogServices { get; set; }

    public virtual DbSet<FleetVehicleModel> FleetVehicleModels { get; set; }

    public virtual DbSet<FleetVehicleModelBrand> FleetVehicleModelBrands { get; set; }

    public virtual DbSet<FleetVehicleModelCategory> FleetVehicleModelCategories { get; set; }

    public virtual DbSet<FleetVehicleOdometer> FleetVehicleOdometers { get; set; }

    public virtual DbSet<FleetVehicleState> FleetVehicleStates { get; set; }

    public virtual DbSet<FleetVehicleTag> FleetVehicleTags { get; set; }

    public virtual DbSet<GamificationBadge> GamificationBadges { get; set; }

    public virtual DbSet<GamificationBadgeUser> GamificationBadgeUsers { get; set; }

    public virtual DbSet<GamificationBadgeUserWizard> GamificationBadgeUserWizards { get; set; }

    public virtual DbSet<GamificationChallenge> GamificationChallenges { get; set; }

    public virtual DbSet<GamificationChallengeLine> GamificationChallengeLines { get; set; }

    public virtual DbSet<GamificationGoal> GamificationGoals { get; set; }

    public virtual DbSet<GamificationGoalDefinition> GamificationGoalDefinitions { get; set; }

    public virtual DbSet<GamificationGoalWizard> GamificationGoalWizards { get; set; }

    public virtual DbSet<GamificationKarmaRank> GamificationKarmaRanks { get; set; }

    public virtual DbSet<GamificationKarmaTracking> GamificationKarmaTrackings { get; set; }

    public virtual DbSet<HrApplicant> HrApplicants { get; set; }

    public virtual DbSet<HrApplicantCategory> HrApplicantCategories { get; set; }

    public virtual DbSet<HrApplicantRefuseReason> HrApplicantRefuseReasons { get; set; }

    public virtual DbSet<HrApplicantSkill> HrApplicantSkills { get; set; }

    public virtual DbSet<HrAttendance> HrAttendances { get; set; }

    public virtual DbSet<HrAttendanceOvertime> HrAttendanceOvertimes { get; set; }

    public virtual DbSet<HrAttendanceReport> HrAttendanceReports { get; set; }

    public virtual DbSet<HrContract> HrContracts { get; set; }

    public virtual DbSet<HrContractHistory> HrContractHistories { get; set; }

    public virtual DbSet<HrContractType> HrContractTypes { get; set; }

    public virtual DbSet<HrDepartment> HrDepartments { get; set; }

    public virtual DbSet<HrDepartureReason> HrDepartureReasons { get; set; }

    public virtual DbSet<HrDepartureWizard> HrDepartureWizards { get; set; }

    public virtual DbSet<HrEmployee> HrEmployees { get; set; }

    public virtual DbSet<HrEmployeeCategory> HrEmployeeCategories { get; set; }

    public virtual DbSet<HrEmployeePublic> HrEmployeePublics { get; set; }

    public virtual DbSet<HrEmployeeSkill> HrEmployeeSkills { get; set; }

    public virtual DbSet<HrEmployeeSkillLog> HrEmployeeSkillLogs { get; set; }

    public virtual DbSet<HrEmployeeSkillReport> HrEmployeeSkillReports { get; set; }

    public virtual DbSet<HrExpense> HrExpenses { get; set; }

    public virtual DbSet<HrExpenseApproveDuplicate> HrExpenseApproveDuplicates { get; set; }

    public virtual DbSet<HrExpenseRefuseWizard> HrExpenseRefuseWizards { get; set; }

    public virtual DbSet<HrExpenseSheet> HrExpenseSheets { get; set; }

    public virtual DbSet<HrExpenseSplit> HrExpenseSplits { get; set; }

    public virtual DbSet<HrExpenseSplitWizard> HrExpenseSplitWizards { get; set; }

    public virtual DbSet<HrHolidaysCancelLeave> HrHolidaysCancelLeaves { get; set; }

    public virtual DbSet<HrHolidaysSummaryEmployee> HrHolidaysSummaryEmployees { get; set; }

    public virtual DbSet<HrJob> HrJobs { get; set; }

    public virtual DbSet<HrLeave> HrLeaves { get; set; }

    public virtual DbSet<HrLeaveAccrualLevel> HrLeaveAccrualLevels { get; set; }

    public virtual DbSet<HrLeaveAccrualPlan> HrLeaveAccrualPlans { get; set; }

    public virtual DbSet<HrLeaveAllocation> HrLeaveAllocations { get; set; }

    public virtual DbSet<HrLeaveEmployeeTypeReport> HrLeaveEmployeeTypeReports { get; set; }

    public virtual DbSet<HrLeaveReport> HrLeaveReports { get; set; }

    public virtual DbSet<HrLeaveReportCalendar> HrLeaveReportCalendars { get; set; }

    public virtual DbSet<HrLeaveStressDay> HrLeaveStressDays { get; set; }

    public virtual DbSet<HrLeaveType> HrLeaveTypes { get; set; }

    public virtual DbSet<HrPayrollStructureType> HrPayrollStructureTypes { get; set; }

    public virtual DbSet<HrPlan> HrPlans { get; set; }

    public virtual DbSet<HrPlanActivityType> HrPlanActivityTypes { get; set; }

    public virtual DbSet<HrPlanWizard> HrPlanWizards { get; set; }

    public virtual DbSet<HrRecruitmentDegree> HrRecruitmentDegrees { get; set; }

    public virtual DbSet<HrRecruitmentSource> HrRecruitmentSources { get; set; }

    public virtual DbSet<HrRecruitmentStage> HrRecruitmentStages { get; set; }

    public virtual DbSet<HrResumeLine> HrResumeLines { get; set; }

    public virtual DbSet<HrResumeLineType> HrResumeLineTypes { get; set; }

    public virtual DbSet<HrSkill> HrSkills { get; set; }

    public virtual DbSet<HrSkillLevel> HrSkillLevels { get; set; }

    public virtual DbSet<HrSkillType> HrSkillTypes { get; set; }

    public virtual DbSet<HrWorkLocation> HrWorkLocations { get; set; }

    public virtual DbSet<IapAccount> IapAccounts { get; set; }

    public virtual DbSet<ImLivechatChannel> ImLivechatChannels { get; set; }

    public virtual DbSet<ImLivechatChannelRule> ImLivechatChannelRules { get; set; }

    public virtual DbSet<ImLivechatReportChannel> ImLivechatReportChannels { get; set; }

    public virtual DbSet<ImLivechatReportOperator> ImLivechatReportOperators { get; set; }

    public virtual DbSet<IrActClient> IrActClients { get; set; }

    public virtual DbSet<IrActReportXml> IrActReportXmls { get; set; }

    public virtual DbSet<IrActServer> IrActServers { get; set; }

    public virtual DbSet<IrActUrl> IrActUrls { get; set; }

    public virtual DbSet<IrActWindow> IrActWindows { get; set; }

    public virtual DbSet<IrActWindowView> IrActWindowViews { get; set; }

    public virtual DbSet<IrAction> IrActions { get; set; }

    public virtual DbSet<IrActionsTodo> IrActionsTodos { get; set; }

    public virtual DbSet<IrAsset> IrAssets { get; set; }

    public virtual DbSet<IrAttachment> IrAttachments { get; set; }

    public virtual DbSet<IrConfigParameter> IrConfigParameters { get; set; }

    public virtual DbSet<IrCron> IrCrons { get; set; }

    public virtual DbSet<IrCronTrigger> IrCronTriggers { get; set; }

    public virtual DbSet<IrDefault> IrDefaults { get; set; }

    public virtual DbSet<IrDemo> IrDemos { get; set; }

    public virtual DbSet<IrDemoFailure> IrDemoFailures { get; set; }

    public virtual DbSet<IrDemoFailureWizard> IrDemoFailureWizards { get; set; }

    public virtual DbSet<IrExport> IrExports { get; set; }

    public virtual DbSet<IrExportsLine> IrExportsLines { get; set; }

    public virtual DbSet<IrFilter> IrFilters { get; set; }

    public virtual DbSet<IrLogging> IrLoggings { get; set; }

    public virtual DbSet<IrMailServer> IrMailServers { get; set; }

    public virtual DbSet<IrModel> IrModels { get; set; }

    public virtual DbSet<IrModelAccess> IrModelAccesses { get; set; }

    public virtual DbSet<IrModelConstraint> IrModelConstraints { get; set; }

    public virtual DbSet<IrModelDatum> IrModelData { get; set; }

    public virtual DbSet<IrModelField> IrModelFields { get; set; }

    public virtual DbSet<IrModelFieldsSelection> IrModelFieldsSelections { get; set; }

    public virtual DbSet<IrModelRelation> IrModelRelations { get; set; }

    public virtual DbSet<IrModuleCategory> IrModuleCategories { get; set; }

    public virtual DbSet<IrModuleModule> IrModuleModules { get; set; }

    public virtual DbSet<IrModuleModuleDependency> IrModuleModuleDependencies { get; set; }

    public virtual DbSet<IrModuleModuleExclusion> IrModuleModuleExclusions { get; set; }

    public virtual DbSet<IrProfile> IrProfiles { get; set; }

    public virtual DbSet<IrProperty> IrProperties { get; set; }

    public virtual DbSet<IrRule> IrRules { get; set; }

    public virtual DbSet<IrSequence> IrSequences { get; set; }

    public virtual DbSet<IrSequenceDateRange> IrSequenceDateRanges { get; set; }

    public virtual DbSet<IrServerObjectLine> IrServerObjectLines { get; set; }

    public virtual DbSet<IrUiMenu> IrUiMenus { get; set; }

    public virtual DbSet<IrUiView> IrUiViews { get; set; }

    public virtual DbSet<IrUiViewCustom> IrUiViewCustoms { get; set; }

    public virtual DbSet<LinkTracker> LinkTrackers { get; set; }

    public virtual DbSet<LinkTrackerClick> LinkTrackerClicks { get; set; }

    public virtual DbSet<LinkTrackerCode> LinkTrackerCodes { get; set; }

    public virtual DbSet<LotLabelLayout> LotLabelLayouts { get; set; }

    public virtual DbSet<LunchAlert> LunchAlerts { get; set; }

    public virtual DbSet<LunchCashmove> LunchCashmoves { get; set; }

    public virtual DbSet<LunchCashmoveReport> LunchCashmoveReports { get; set; }

    public virtual DbSet<LunchLocation> LunchLocations { get; set; }

    public virtual DbSet<LunchOrder> LunchOrders { get; set; }

    public virtual DbSet<LunchProduct> LunchProducts { get; set; }

    public virtual DbSet<LunchProductCategory> LunchProductCategories { get; set; }

    public virtual DbSet<LunchSupplier> LunchSuppliers { get; set; }

    public virtual DbSet<LunchTopping> LunchToppings { get; set; }

    public virtual DbSet<MailActivity> MailActivities { get; set; }

    public virtual DbSet<MailActivityType> MailActivityTypes { get; set; }

    public virtual DbSet<MailAlias> MailAliases { get; set; }

    public virtual DbSet<MailBlacklist> MailBlacklists { get; set; }

    public virtual DbSet<MailBlacklistRemove> MailBlacklistRemoves { get; set; }

    public virtual DbSet<MailChannel> MailChannels { get; set; }

    public virtual DbSet<MailChannelMember> MailChannelMembers { get; set; }

    public virtual DbSet<MailChannelRtcSession> MailChannelRtcSessions { get; set; }

    public virtual DbSet<MailComposeMessage> MailComposeMessages { get; set; }

    public virtual DbSet<MailFollower> MailFollowers { get; set; }

    public virtual DbSet<MailGatewayAllowed> MailGatewayAlloweds { get; set; }

    public virtual DbSet<MailGuest> MailGuests { get; set; }

    public virtual DbSet<MailIceServer> MailIceServers { get; set; }

    public virtual DbSet<MailLinkPreview> MailLinkPreviews { get; set; }

    public virtual DbSet<MailMail> MailMails { get; set; }

    public virtual DbSet<MailMessage> MailMessages { get; set; }

    public virtual DbSet<MailMessageReaction> MailMessageReactions { get; set; }

    public virtual DbSet<MailMessageSchedule> MailMessageSchedules { get; set; }

    public virtual DbSet<MailMessageSubtype> MailMessageSubtypes { get; set; }

    public virtual DbSet<MailNotification> MailNotifications { get; set; }

    public virtual DbSet<MailResendMessage> MailResendMessages { get; set; }

    public virtual DbSet<MailResendPartner> MailResendPartners { get; set; }

    public virtual DbSet<MailShortcode> MailShortcodes { get; set; }

    public virtual DbSet<MailTemplate> MailTemplates { get; set; }

    public virtual DbSet<MailTemplatePreview> MailTemplatePreviews { get; set; }

    public virtual DbSet<MailTemplateReset> MailTemplateResets { get; set; }

    public virtual DbSet<MailTrackingValue> MailTrackingValues { get; set; }

    public virtual DbSet<MailWizardInvite> MailWizardInvites { get; set; }

    public virtual DbSet<MailingContact> MailingContacts { get; set; }

    public virtual DbSet<MailingContactImport> MailingContactImports { get; set; }

    public virtual DbSet<MailingContactListRel> MailingContactListRels { get; set; }

    public virtual DbSet<MailingContactToList> MailingContactToLists { get; set; }

    public virtual DbSet<MailingFilter> MailingFilters { get; set; }

    public virtual DbSet<MailingList> MailingLists { get; set; }

    public virtual DbSet<MailingListMerge> MailingListMerges { get; set; }

    public virtual DbSet<MailingMailing> MailingMailings { get; set; }

    public virtual DbSet<MailingMailingScheduleDate> MailingMailingScheduleDates { get; set; }

    public virtual DbSet<MailingMailingTest> MailingMailingTests { get; set; }

    public virtual DbSet<MailingSmsTest> MailingSmsTests { get; set; }

    public virtual DbSet<MailingTrace> MailingTraces { get; set; }

    public virtual DbSet<MailingTraceReport> MailingTraceReports { get; set; }

    public virtual DbSet<MaintenanceEquipment> MaintenanceEquipments { get; set; }

    public virtual DbSet<MaintenanceEquipmentCategory> MaintenanceEquipmentCategories { get; set; }

    public virtual DbSet<MaintenanceRequest> MaintenanceRequests { get; set; }

    public virtual DbSet<MaintenanceStage> MaintenanceStages { get; set; }

    public virtual DbSet<MaintenanceTeam> MaintenanceTeams { get; set; }

    public virtual DbSet<MrpBom> MrpBoms { get; set; }

    public virtual DbSet<MrpBomByproduct> MrpBomByproducts { get; set; }

    public virtual DbSet<MrpBomLine> MrpBomLines { get; set; }

    public virtual DbSet<MrpConsumptionWarning> MrpConsumptionWarnings { get; set; }

    public virtual DbSet<MrpConsumptionWarningLine> MrpConsumptionWarningLines { get; set; }

    public virtual DbSet<MrpDocument> MrpDocuments { get; set; }

    public virtual DbSet<MrpImmediateProduction> MrpImmediateProductions { get; set; }

    public virtual DbSet<MrpImmediateProductionLine> MrpImmediateProductionLines { get; set; }

    public virtual DbSet<MrpProduction> MrpProductions { get; set; }

    public virtual DbSet<MrpProductionBackorder> MrpProductionBackorders { get; set; }

    public virtual DbSet<MrpProductionBackorderLine> MrpProductionBackorderLines { get; set; }

    public virtual DbSet<MrpProductionSplit> MrpProductionSplits { get; set; }

    public virtual DbSet<MrpProductionSplitLine> MrpProductionSplitLines { get; set; }

    public virtual DbSet<MrpProductionSplitMulti> MrpProductionSplitMultis { get; set; }

    public virtual DbSet<MrpRoutingWorkcenter> MrpRoutingWorkcenters { get; set; }

    public virtual DbSet<MrpUnbuild> MrpUnbuilds { get; set; }

    public virtual DbSet<MrpWorkcenter> MrpWorkcenters { get; set; }

    public virtual DbSet<MrpWorkcenterCapacity> MrpWorkcenterCapacities { get; set; }

    public virtual DbSet<MrpWorkcenterProductivity> MrpWorkcenterProductivities { get; set; }

    public virtual DbSet<MrpWorkcenterProductivityLoss> MrpWorkcenterProductivityLosses { get; set; }

    public virtual DbSet<MrpWorkcenterProductivityLossType> MrpWorkcenterProductivityLossTypes { get; set; }

    public virtual DbSet<MrpWorkcenterTag> MrpWorkcenterTags { get; set; }

    public virtual DbSet<MrpWorkorder> MrpWorkorders { get; set; }

    public virtual DbSet<NoteNote> NoteNotes { get; set; }

    public virtual DbSet<NoteStage> NoteStages { get; set; }

    public virtual DbSet<NoteTag> NoteTags { get; set; }

    public virtual DbSet<PaymentIcon> PaymentIcons { get; set; }

    public virtual DbSet<PaymentLinkWizard> PaymentLinkWizards { get; set; }

    public virtual DbSet<PaymentProvider> PaymentProviders { get; set; }

    public virtual DbSet<PaymentProviderOnboardingWizard> PaymentProviderOnboardingWizards { get; set; }

    public virtual DbSet<PaymentRefundWizard> PaymentRefundWizards { get; set; }

    public virtual DbSet<PaymentToken> PaymentTokens { get; set; }

    public virtual DbSet<PaymentTransaction> PaymentTransactions { get; set; }

    public virtual DbSet<PhoneBlacklist> PhoneBlacklists { get; set; }

    public virtual DbSet<PhoneBlacklistRemove> PhoneBlacklistRemoves { get; set; }

    public virtual DbSet<PickingLabelType> PickingLabelTypes { get; set; }

    public virtual DbSet<PortalShare> PortalShares { get; set; }

    public virtual DbSet<PortalWizard> PortalWizards { get; set; }

    public virtual DbSet<PortalWizardUser> PortalWizardUsers { get; set; }

    public virtual DbSet<PosBill> PosBills { get; set; }

    public virtual DbSet<PosCategory> PosCategories { get; set; }

    public virtual DbSet<PosCloseSessionWizard> PosCloseSessionWizards { get; set; }

    public virtual DbSet<PosConfig> PosConfigs { get; set; }

    public virtual DbSet<PosDetailsWizard> PosDetailsWizards { get; set; }

    public virtual DbSet<PosMakePayment> PosMakePayments { get; set; }

    public virtual DbSet<PosOrder> PosOrders { get; set; }

    public virtual DbSet<PosOrderLine> PosOrderLines { get; set; }

    public virtual DbSet<PosPackOperationLot> PosPackOperationLots { get; set; }

    public virtual DbSet<PosPayment> PosPayments { get; set; }

    public virtual DbSet<PosPaymentMethod> PosPaymentMethods { get; set; }

    public virtual DbSet<PosSession> PosSessions { get; set; }

    public virtual DbSet<PosSessionCheckProductWizard> PosSessionCheckProductWizards { get; set; }

    public virtual DbSet<PrivacyLog> PrivacyLogs { get; set; }

    public virtual DbSet<PrivacyLookupWizard> PrivacyLookupWizards { get; set; }

    public virtual DbSet<PrivacyLookupWizardLine> PrivacyLookupWizardLines { get; set; }

    public virtual DbSet<ProcurementGroup> ProcurementGroups { get; set; }

    public virtual DbSet<ProductAttribute> ProductAttributes { get; set; }

    public virtual DbSet<ProductAttributeCustomValue> ProductAttributeCustomValues { get; set; }

    public virtual DbSet<ProductAttributeValue> ProductAttributeValues { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<ProductLabelLayout> ProductLabelLayouts { get; set; }

    public virtual DbSet<ProductPackaging> ProductPackagings { get; set; }

    public virtual DbSet<ProductPricelist> ProductPricelists { get; set; }

    public virtual DbSet<ProductPricelistItem> ProductPricelistItems { get; set; }

    public virtual DbSet<ProductProduct> ProductProducts { get; set; }

    public virtual DbSet<ProductPublicCategory> ProductPublicCategories { get; set; }

    public virtual DbSet<ProductRemoval> ProductRemovals { get; set; }

    public virtual DbSet<ProductReplenish> ProductReplenishes { get; set; }

    public virtual DbSet<ProductRibbon> ProductRibbons { get; set; }

    public virtual DbSet<ProductSupplierinfo> ProductSupplierinfos { get; set; }

    public virtual DbSet<ProductTag> ProductTags { get; set; }

    public virtual DbSet<ProductTemplate> ProductTemplates { get; set; }

    public virtual DbSet<ProductTemplateAttributeExclusion> ProductTemplateAttributeExclusions { get; set; }

    public virtual DbSet<ProductTemplateAttributeLine> ProductTemplateAttributeLines { get; set; }

    public virtual DbSet<ProductTemplateAttributeValue> ProductTemplateAttributeValues { get; set; }

    public virtual DbSet<ProjectCollaborator> ProjectCollaborators { get; set; }

    public virtual DbSet<ProjectMilestone> ProjectMilestones { get; set; }

    public virtual DbSet<ProjectProject> ProjectProjects { get; set; }

    public virtual DbSet<ProjectProjectStage> ProjectProjectStages { get; set; }

    public virtual DbSet<ProjectShareWizard> ProjectShareWizards { get; set; }

    public virtual DbSet<ProjectTag> ProjectTags { get; set; }

    public virtual DbSet<ProjectTask> ProjectTasks { get; set; }

    public virtual DbSet<ProjectTaskRecurrence> ProjectTaskRecurrences { get; set; }

    public virtual DbSet<ProjectTaskType> ProjectTaskTypes { get; set; }

    public virtual DbSet<ProjectTaskTypeDeleteWizard> ProjectTaskTypeDeleteWizards { get; set; }

    public virtual DbSet<ProjectTaskUserRel> ProjectTaskUserRels { get; set; }

    public virtual DbSet<ProjectUpdate> ProjectUpdates { get; set; }

    public virtual DbSet<PurchaseBillUnion> PurchaseBillUnions { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderLine> PurchaseOrderLines { get; set; }

    public virtual DbSet<RatingRating> RatingRatings { get; set; }

    public virtual DbSet<RegistrationEditor> RegistrationEditors { get; set; }

    public virtual DbSet<RegistrationEditorLine> RegistrationEditorLines { get; set; }

    public virtual DbSet<RepairFee> RepairFees { get; set; }

    public virtual DbSet<RepairLine> RepairLines { get; set; }

    public virtual DbSet<RepairOrder> RepairOrders { get; set; }

    public virtual DbSet<RepairOrderMakeInvoice> RepairOrderMakeInvoices { get; set; }

    public virtual DbSet<RepairTag> RepairTags { get; set; }

    public virtual DbSet<ReportLayout> ReportLayouts { get; set; }

    public virtual DbSet<ReportPaperformat> ReportPaperformats { get; set; }

    public virtual DbSet<ReportPosOrder> ReportPosOrders { get; set; }

    public virtual DbSet<ReportProjectTaskUser> ReportProjectTaskUsers { get; set; }

    public virtual DbSet<ReportStockQuantity> ReportStockQuantities { get; set; }

    public virtual DbSet<ResBank> ResBanks { get; set; }

    public virtual DbSet<ResCompany> ResCompanies { get; set; }

    public virtual DbSet<ResConfig> ResConfigs { get; set; }

    public virtual DbSet<ResConfigInstaller> ResConfigInstallers { get; set; }

    public virtual DbSet<ResConfigSetting> ResConfigSettings { get; set; }

    public virtual DbSet<ResCountry> ResCountries { get; set; }

    public virtual DbSet<ResCountryGroup> ResCountryGroups { get; set; }

    public virtual DbSet<ResCountryState> ResCountryStates { get; set; }

    public virtual DbSet<ResCurrency> ResCurrencies { get; set; }

    public virtual DbSet<ResCurrencyRate> ResCurrencyRates { get; set; }

    public virtual DbSet<ResGroup> ResGroups { get; set; }

    public virtual DbSet<ResLang> ResLangs { get; set; }

    public virtual DbSet<ResPartner> ResPartners { get; set; }

    public virtual DbSet<ResPartnerAutocompleteSync> ResPartnerAutocompleteSyncs { get; set; }

    public virtual DbSet<ResPartnerBank> ResPartnerBanks { get; set; }

    public virtual DbSet<ResPartnerCategory> ResPartnerCategories { get; set; }

    public virtual DbSet<ResPartnerIndustry> ResPartnerIndustries { get; set; }

    public virtual DbSet<ResPartnerTitle> ResPartnerTitles { get; set; }

    public virtual DbSet<ResUser> ResUsers { get; set; }

    public virtual DbSet<ResUsersApikey> ResUsersApikeys { get; set; }

    public virtual DbSet<ResUsersApikeysDescription> ResUsersApikeysDescriptions { get; set; }

    public virtual DbSet<ResUsersDeletion> ResUsersDeletions { get; set; }

    public virtual DbSet<ResUsersIdentitycheck> ResUsersIdentitychecks { get; set; }

    public virtual DbSet<ResUsersLog> ResUsersLogs { get; set; }

    public virtual DbSet<ResUsersSetting> ResUsersSettings { get; set; }

    public virtual DbSet<ResUsersSettingsVolume> ResUsersSettingsVolumes { get; set; }

    public virtual DbSet<ResetViewArchWizard> ResetViewArchWizards { get; set; }

    public virtual DbSet<ResourceCalendar> ResourceCalendars { get; set; }

    public virtual DbSet<ResourceCalendarAttendance> ResourceCalendarAttendances { get; set; }

    public virtual DbSet<ResourceCalendarLeaf> ResourceCalendarLeaves { get; set; }

    public virtual DbSet<ResourceResource> ResourceResources { get; set; }

    public virtual DbSet<SaleAdvancePaymentInv> SaleAdvancePaymentInvs { get; set; }

    public virtual DbSet<SaleOrder> SaleOrders { get; set; }

    public virtual DbSet<SaleOrderCancel> SaleOrderCancels { get; set; }

    public virtual DbSet<SaleOrderLine> SaleOrderLines { get; set; }

    public virtual DbSet<SaleOrderOption> SaleOrderOptions { get; set; }

    public virtual DbSet<SaleOrderTemplate> SaleOrderTemplates { get; set; }

    public virtual DbSet<SaleOrderTemplateLine> SaleOrderTemplateLines { get; set; }

    public virtual DbSet<SaleOrderTemplateOption> SaleOrderTemplateOptions { get; set; }

    public virtual DbSet<SalePaymentProviderOnboardingWizard> SalePaymentProviderOnboardingWizards { get; set; }

    public virtual DbSet<SlideAnswer> SlideAnswers { get; set; }

    public virtual DbSet<SlideChannel> SlideChannels { get; set; }

    public virtual DbSet<SlideChannelInvite> SlideChannelInvites { get; set; }

    public virtual DbSet<SlideChannelPartner> SlideChannelPartners { get; set; }

    public virtual DbSet<SlideChannelTag> SlideChannelTags { get; set; }

    public virtual DbSet<SlideChannelTagGroup> SlideChannelTagGroups { get; set; }

    public virtual DbSet<SlideEmbed> SlideEmbeds { get; set; }

    public virtual DbSet<SlideQuestion> SlideQuestions { get; set; }

    public virtual DbSet<SlideSlide> SlideSlides { get; set; }

    public virtual DbSet<SlideSlidePartner> SlideSlidePartners { get; set; }

    public virtual DbSet<SlideSlideResource> SlideSlideResources { get; set; }

    public virtual DbSet<SlideTag> SlideTags { get; set; }

    public virtual DbSet<SmsComposer> SmsComposers { get; set; }

    public virtual DbSet<SmsResend> SmsResends { get; set; }

    public virtual DbSet<SmsResendRecipient> SmsResendRecipients { get; set; }

    public virtual DbSet<SmsSm> SmsSms { get; set; }

    public virtual DbSet<SmsTemplate> SmsTemplates { get; set; }

    public virtual DbSet<SmsTemplatePreview> SmsTemplatePreviews { get; set; }

    public virtual DbSet<SmsTemplateReset> SmsTemplateResets { get; set; }

    public virtual DbSet<SnailmailConfirmInvoice> SnailmailConfirmInvoices { get; set; }

    public virtual DbSet<SnailmailLetter> SnailmailLetters { get; set; }

    public virtual DbSet<SnailmailLetterFormatError> SnailmailLetterFormatErrors { get; set; }

    public virtual DbSet<SnailmailLetterMissingRequiredField> SnailmailLetterMissingRequiredFields { get; set; }

    public virtual DbSet<SpreadsheetDashboard> SpreadsheetDashboards { get; set; }

    public virtual DbSet<SpreadsheetDashboardGroup> SpreadsheetDashboardGroups { get; set; }

    public virtual DbSet<StockAssignSerial> StockAssignSerials { get; set; }

    public virtual DbSet<StockBackorderConfirmation> StockBackorderConfirmations { get; set; }

    public virtual DbSet<StockBackorderConfirmationLine> StockBackorderConfirmationLines { get; set; }

    public virtual DbSet<StockChangeProductQty> StockChangeProductQties { get; set; }

    public virtual DbSet<StockImmediateTransfer> StockImmediateTransfers { get; set; }

    public virtual DbSet<StockImmediateTransferLine> StockImmediateTransferLines { get; set; }

    public virtual DbSet<StockInventoryAdjustmentName> StockInventoryAdjustmentNames { get; set; }

    public virtual DbSet<StockInventoryConflict> StockInventoryConflicts { get; set; }

    public virtual DbSet<StockInventoryWarning> StockInventoryWarnings { get; set; }

    public virtual DbSet<StockLocation> StockLocations { get; set; }

    public virtual DbSet<StockLot> StockLots { get; set; }

    public virtual DbSet<StockMove> StockMoves { get; set; }

    public virtual DbSet<StockMoveLine> StockMoveLines { get; set; }

    public virtual DbSet<StockOrderpointSnooze> StockOrderpointSnoozes { get; set; }

    public virtual DbSet<StockPackageDestination> StockPackageDestinations { get; set; }

    public virtual DbSet<StockPackageLevel> StockPackageLevels { get; set; }

    public virtual DbSet<StockPackageType> StockPackageTypes { get; set; }

    public virtual DbSet<StockPicking> StockPickings { get; set; }

    public virtual DbSet<StockPickingType> StockPickingTypes { get; set; }

    public virtual DbSet<StockPutawayRule> StockPutawayRules { get; set; }

    public virtual DbSet<StockQuant> StockQuants { get; set; }

    public virtual DbSet<StockQuantPackage> StockQuantPackages { get; set; }

    public virtual DbSet<StockQuantityHistory> StockQuantityHistories { get; set; }

    public virtual DbSet<StockReplenishmentInfo> StockReplenishmentInfos { get; set; }

    public virtual DbSet<StockReplenishmentOption> StockReplenishmentOptions { get; set; }

    public virtual DbSet<StockRequestCount> StockRequestCounts { get; set; }

    public virtual DbSet<StockReturnPicking> StockReturnPickings { get; set; }

    public virtual DbSet<StockReturnPickingLine> StockReturnPickingLines { get; set; }

    public virtual DbSet<StockRoute> StockRoutes { get; set; }

    public virtual DbSet<StockRule> StockRules { get; set; }

    public virtual DbSet<StockRulesReport> StockRulesReports { get; set; }

    public virtual DbSet<StockSchedulerCompute> StockSchedulerComputes { get; set; }

    public virtual DbSet<StockScrap> StockScraps { get; set; }

    public virtual DbSet<StockStorageCategory> StockStorageCategories { get; set; }

    public virtual DbSet<StockStorageCategoryCapacity> StockStorageCategoryCapacities { get; set; }

    public virtual DbSet<StockTraceabilityReport> StockTraceabilityReports { get; set; }

    public virtual DbSet<StockTrackConfirmation> StockTrackConfirmations { get; set; }

    public virtual DbSet<StockTrackLine> StockTrackLines { get; set; }

    public virtual DbSet<StockValuationLayer> StockValuationLayers { get; set; }

    public virtual DbSet<StockValuationLayerRevaluation> StockValuationLayerRevaluations { get; set; }

    public virtual DbSet<StockWarehouse> StockWarehouses { get; set; }

    public virtual DbSet<StockWarehouseOrderpoint> StockWarehouseOrderpoints { get; set; }

    public virtual DbSet<StockWarnInsufficientQtyRepair> StockWarnInsufficientQtyRepairs { get; set; }

    public virtual DbSet<StockWarnInsufficientQtyScrap> StockWarnInsufficientQtyScraps { get; set; }

    public virtual DbSet<StockWarnInsufficientQtyUnbuild> StockWarnInsufficientQtyUnbuilds { get; set; }

    public virtual DbSet<SurveyInvite> SurveyInvites { get; set; }

    public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }

    public virtual DbSet<SurveyQuestionAnswer> SurveyQuestionAnswers { get; set; }

    public virtual DbSet<SurveySurvey> SurveySurveys { get; set; }

    public virtual DbSet<SurveyUserInput> SurveyUserInputs { get; set; }

    public virtual DbSet<SurveyUserInputLine> SurveyUserInputLines { get; set; }

    public virtual DbSet<ThemeIrAsset> ThemeIrAssets { get; set; }

    public virtual DbSet<ThemeIrAttachment> ThemeIrAttachments { get; set; }

    public virtual DbSet<ThemeIrUiView> ThemeIrUiViews { get; set; }

    public virtual DbSet<ThemeWebsiteMenu> ThemeWebsiteMenus { get; set; }

    public virtual DbSet<ThemeWebsitePage> ThemeWebsitePages { get; set; }

    public virtual DbSet<UomCategory> UomCategories { get; set; }

    public virtual DbSet<UomUom> UomUoms { get; set; }

    public virtual DbSet<UtmCampaign> UtmCampaigns { get; set; }

    public virtual DbSet<UtmMedium> UtmMedia { get; set; }

    public virtual DbSet<UtmSource> UtmSources { get; set; }

    public virtual DbSet<UtmStage> UtmStages { get; set; }

    public virtual DbSet<UtmTag> UtmTags { get; set; }

    public virtual DbSet<ValidateAccountMove> ValidateAccountMoves { get; set; }

    public virtual DbSet<VendorDelayReport> VendorDelayReports { get; set; }

    public virtual DbSet<WebEditorConverterTest> WebEditorConverterTests { get; set; }

    public virtual DbSet<WebEditorConverterTestSub> WebEditorConverterTestSubs { get; set; }

    public virtual DbSet<WebTourTour> WebTourTours { get; set; }

    public virtual DbSet<Website> Websites { get; set; }

    public virtual DbSet<WebsiteBaseUnit> WebsiteBaseUnits { get; set; }

    public virtual DbSet<WebsiteConfiguratorFeature> WebsiteConfiguratorFeatures { get; set; }

    public virtual DbSet<WebsiteEventMenu> WebsiteEventMenus { get; set; }

    public virtual DbSet<WebsiteMenu> WebsiteMenus { get; set; }

    public virtual DbSet<WebsitePage> WebsitePages { get; set; }

    public virtual DbSet<WebsiteRewrite> WebsiteRewrites { get; set; }

    public virtual DbSet<WebsiteRobot> WebsiteRobots { get; set; }

    public virtual DbSet<WebsiteRoute> WebsiteRoutes { get; set; }

    public virtual DbSet<WebsiteSaleExtraField> WebsiteSaleExtraFields { get; set; }

    public virtual DbSet<WebsiteSnippetFilter> WebsiteSnippetFilters { get; set; }

    public virtual DbSet<WebsiteTrack> WebsiteTracks { get; set; }

    public virtual DbSet<WebsiteVisitor> WebsiteVisitors { get; set; }

    public virtual DbSet<WizardIrModelMenuCreate> WizardIrModelMenuCreates { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("C")
            .HasPostgresExtension("pg_trgm");

        modelBuilder.Entity<AccountAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_account_pkey");

            entity.ToTable("account_account", tb => tb.HasComment("Account"));

            entity.HasIndex(e => new { e.Code, e.CompanyId }, "account_account_code_company_uniq").IsUnique();

            entity.HasIndex(e => e.Name, "account_account_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("account_type");
            entity.Property(e => e.Code)
                .HasMaxLength(64)
                .HasComment("Code")
                .HasColumnName("code");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Account Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Deprecated)
                .HasComment("Deprecated")
                .HasColumnName("deprecated");
            entity.Property(e => e.GroupId)
                .HasComment("Group")
                .HasColumnName("group_id");
            entity.Property(e => e.IncludeInitialBalance)
                .HasComment("Bring Accounts Balance Forward")
                .HasColumnName("include_initial_balance");
            entity.Property(e => e.InternalGroup)
                .HasComment("Internal Group")
                .HasColumnType("character varying")
                .HasColumnName("internal_group");
            entity.Property(e => e.IsOffBalance)
                .HasComment("Is Off Balance")
                .HasColumnName("is_off_balance");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Account Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NonTrade)
                .HasComment("Non Trade")
                .HasColumnName("non_trade");
            entity.Property(e => e.Note)
                .HasComment("Internal Notes")
                .HasColumnName("note");
            entity.Property(e => e.Reconcile)
                .HasComment("Allow Reconciliation")
                .HasColumnName("reconcile");
            entity.Property(e => e.RootId)
                .HasComment("Root")
                .HasColumnName("root_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountAccounts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_account_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAccountCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountAccounts)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_currency_id_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.AccountAccounts)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_group_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAccounts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_message_main_attachment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAccountWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_write_uid_fkey");

            entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountAccounts)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountAccountTag",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_account_account_tag_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountAccountId")
                        .HasConstraintName("account_account_account_tag_account_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAccountId", "AccountAccountTagId").HasName("account_account_account_tag_pkey");
                        j.ToTable("account_account_account_tag", tb => tb.HasComment("RELATION BETWEEN account_account AND account_account_tag"));
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountAccountId" }, "account_account_account_tag_account_account_tag_id_account__idx");
                        j.IndexerProperty<int>("AccountAccountId").HasColumnName("account_account_id");
                        j.IndexerProperty<int>("AccountAccountTagId").HasColumnName("account_account_tag_id");
                    });

            entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountAccounts)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_account_account_journal_rel_account_journal_id_fkey"),
                    l => l.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountAccountId")
                        .HasConstraintName("account_account_account_journal_rel_account_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAccountId", "AccountJournalId").HasName("account_account_account_journal_rel_pkey");
                        j.ToTable("account_account_account_journal_rel", tb => tb.HasComment("RELATION BETWEEN account_account AND account_journal"));
                        j.HasIndex(new[] { "AccountJournalId", "AccountAccountId" }, "account_account_account_journ_account_journal_id_account_ac_idx");
                        j.IndexerProperty<int>("AccountAccountId").HasColumnName("account_account_id");
                        j.IndexerProperty<int>("AccountJournalId").HasColumnName("account_journal_id");
                    });

            entity.HasMany(d => d.Taxes).WithMany(p => p.Accounts)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTaxDefaultRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("account_account_tax_default_rel_tax_id_fkey"),
                    l => l.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_tax_default_rel_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountId", "TaxId").HasName("account_account_tax_default_rel_pkey");
                        j.ToTable("account_account_tax_default_rel", tb => tb.HasComment("RELATION BETWEEN account_account AND account_tax"));
                        j.HasIndex(new[] { "TaxId", "AccountId" }, "account_account_tax_default_rel_tax_id_account_id_idx");
                        j.IndexerProperty<int>("AccountId").HasColumnName("account_id");
                        j.IndexerProperty<int>("TaxId").HasColumnName("tax_id");
                    });
        });

        modelBuilder.Entity<AccountAccountTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_account_tag_pkey");

            entity.ToTable("account_account_tag", tb => tb.HasComment("Account Tag"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Applicability)
                .HasComment("Applicability")
                .HasColumnType("character varying")
                .HasColumnName("applicability");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TaxNegate)
                .HasComment("Negate Tax Balance")
                .HasColumnName("tax_negate");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Country).WithMany(p => p.AccountAccountTags)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_tag_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAccountTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAccountTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_tag_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAccountTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_account_template_pkey");

            entity.ToTable("account_account_template", tb => tb.HasComment("Templates for Accounts"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("account_type");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Chart Template")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.Code)
                .HasMaxLength(64)
                .HasComment("Code")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Account Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Nocreate)
                .HasComment("Optional Create")
                .HasColumnName("nocreate");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.Reconcile)
                .HasComment("Allow Invoices & payments Matching")
                .HasColumnName("reconcile");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountAccountTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_chart_template_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAccountTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountAccountTemplates)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_currency_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAccountTemplates)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_message_main_attachment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAccountTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_write_uid_fkey");

            entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountAccountTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTemplateAccountTag",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_account_template_account_ta_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountAccountTemplate>().WithMany()
                        .HasForeignKey("AccountAccountTemplateId")
                        .HasConstraintName("account_account_template_accou_account_account_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAccountTemplateId", "AccountAccountTagId").HasName("account_account_template_account_tag_pkey");
                        j.ToTable("account_account_template_account_tag", tb => tb.HasComment("RELATION BETWEEN account_account_template AND account_account_tag"));
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountAccountTemplateId" }, "account_account_template_acco_account_account_tag_id_accoun_idx");
                        j.IndexerProperty<int>("AccountAccountTemplateId").HasColumnName("account_account_template_id");
                        j.IndexerProperty<int>("AccountAccountTagId").HasColumnName("account_account_tag_id");
                    });

            entity.HasMany(d => d.Taxes).WithMany(p => p.Accounts)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTemplateTaxRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("account_account_template_tax_rel_tax_id_fkey"),
                    l => l.HasOne<AccountAccountTemplate>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_template_tax_rel_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountId", "TaxId").HasName("account_account_template_tax_rel_pkey");
                        j.ToTable("account_account_template_tax_rel", tb => tb.HasComment("RELATION BETWEEN account_account_template AND account_tax_template"));
                        j.HasIndex(new[] { "TaxId", "AccountId" }, "account_account_template_tax_rel_tax_id_account_id_idx");
                        j.IndexerProperty<int>("AccountId").HasColumnName("account_id");
                        j.IndexerProperty<int>("TaxId").HasColumnName("tax_id");
                    });
        });

        modelBuilder.Entity<AccountAccruedOrdersWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_accrued_orders_wizard_pkey");

            entity.ToTable("account_accrued_orders_wizard", tb => tb.HasComment("Accrued Orders Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Accrual Account")
                .HasColumnName("account_id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Company Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.ReversalDate)
                .HasComment("Reversal Date")
                .HasColumnName("reversal_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountAccruedOrdersWizards)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("account_accrued_orders_wizard_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountAccruedOrdersWizards)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAccruedOrdersWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountAccruedOrdersWizards)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_currency_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAccruedOrdersWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_account_pkey");

            entity.ToTable("account_analytic_account", tb => tb.HasComment("Analytic Account"));

            entity.HasIndex(e => e.Code, "account_analytic_account_code_index");

            entity.HasIndex(e => e.Name, "account_analytic_account_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Code)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Analytic Account")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PlanId)
                .HasComment("Plan")
                .HasColumnName("plan_id");
            entity.Property(e => e.RootPlanId)
                .HasComment("Root Plan")
                .HasColumnName("root_plan_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountAnalyticAccounts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAnalyticAccountCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAnalyticAccounts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountAnalyticAccounts)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_partner_id_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.AccountAnalyticAccountPlans)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_account_plan_id_fkey");

            entity.HasOne(d => d.RootPlan).WithMany(p => p.AccountAnalyticAccountRootPlans)
                .HasForeignKey(d => d.RootPlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_root_plan_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAnalyticAccountWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticApplicability>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_applicability_pkey");

            entity.ToTable("account_analytic_applicability", tb => tb.HasComment("Analytic Plan's Applicabilities"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountPrefix)
                .HasComment("Financial Accounts Prefix")
                .HasColumnType("character varying")
                .HasColumnName("account_prefix");
            entity.Property(e => e.AnalyticPlanId)
                .HasComment("Analytic Plan")
                .HasColumnName("analytic_plan_id");
            entity.Property(e => e.Applicability)
                .HasComment("Applicability")
                .HasColumnType("character varying")
                .HasColumnName("applicability");
            entity.Property(e => e.BusinessDomain)
                .HasComment("Domain")
                .HasColumnType("character varying")
                .HasColumnName("business_domain");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductCategId)
                .HasComment("Product Category")
                .HasColumnName("product_categ_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticPlan).WithMany(p => p.AccountAnalyticApplicabilities)
                .HasForeignKey(d => d.AnalyticPlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_analytic_plan_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAnalyticApplicabilityCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_create_uid_fkey");

            entity.HasOne(d => d.ProductCateg).WithMany(p => p.AccountAnalyticApplicabilities)
                .HasForeignKey(d => d.ProductCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_product_categ_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAnalyticApplicabilityWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticDistributionModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_distribution_model_pkey");

            entity.ToTable("account_analytic_distribution_model", tb => tb.HasComment("Analytic Distribution Model"));

            entity.HasIndex(e => e.AnalyticDistribution, "account_analytic_distribution_model_analytic_distribution_gin_i").HasMethod("gin");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountPrefix)
                .HasComment("Accounts Prefix")
                .HasColumnType("character varying")
                .HasColumnName("account_prefix");
            entity.Property(e => e.AnalyticDistribution)
                .HasComment("Analytic")
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PartnerCategoryId)
                .HasComment("Partner Category")
                .HasColumnName("partner_category_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.ProductCategId)
                .HasComment("Product Category")
                .HasColumnName("product_categ_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAnalyticDistributionModelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_distribution_model_create_uid_fkey");

            entity.HasOne(d => d.PartnerCategory).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.PartnerCategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_partner_category_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_partner_id_fkey");

            entity.HasOne(d => d.ProductCateg).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.ProductCategId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_product_categ_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAnalyticDistributionModelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_distribution_model_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_line_pkey");

            entity.ToTable("account_analytic_line", tb => tb.HasComment("Analytic Line"));

            entity.HasIndex(e => e.AccountId, "account_analytic_line_account_id_index");

            entity.HasIndex(e => e.Date, "account_analytic_line_date_index");

            entity.HasIndex(e => e.MoveLineId, "account_analytic_line_move_line_id_index");

            entity.HasIndex(e => e.UserId, "account_analytic_line_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Analytic Account")
                .HasColumnName("account_id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.Category)
                .HasComment("Category")
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Code)
                .HasMaxLength(8)
                .HasComment("Code")
                .HasColumnName("code");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.GeneralAccountId)
                .HasComment("Financial Account")
                .HasColumnName("general_account_id");
            entity.Property(e => e.JournalId)
                .HasComment("Financial Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.MoveLineId)
                .HasComment("Journal Item")
                .HasColumnName("move_line_id");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PlanId)
                .HasComment("Plan")
                .HasColumnName("plan_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.Ref)
                .HasComment("Ref.")
                .HasColumnType("character varying")
                .HasColumnName("ref");
            entity.Property(e => e.SoLine)
                .HasComment("Sales Order Item")
                .HasColumnName("so_line");
            entity.Property(e => e.UnitAmount)
                .HasComment("Quantity")
                .HasColumnName("unit_amount");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_line_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAnalyticLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_currency_id_fkey");

            entity.HasOne(d => d.GeneralAccount).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.GeneralAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_line_general_account_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_journal_id_fkey");

            entity.HasOne(d => d.MoveLine).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.MoveLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_line_move_line_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_partner_id_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_plan_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_product_uom_id_fkey");

            entity.HasOne(d => d.SoLineNavigation).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.SoLine)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_so_line_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.AccountAnalyticLineUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAnalyticLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_plan_pkey");

            entity.ToTable("account_analytic_plan", tb => tb.HasComment("Analytic Plans"));

            entity.HasIndex(e => e.ParentPath, "account_analytic_plan_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CompleteName)
                .HasComment("Complete Name")
                .HasColumnType("character varying")
                .HasColumnName("complete_name");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultApplicability)
                .HasComment("Default Applicability")
                .HasColumnType("character varying")
                .HasColumnName("default_applicability");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountAnalyticPlans)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_plan_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAnalyticPlanCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_plan_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_plan_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAnalyticPlanWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_plan_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAutomaticEntryWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_automatic_entry_wizard_pkey");

            entity.ToTable("account_automatic_entry_wizard", tb => tb.HasComment("Create Automatic Entries"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountType)
                .HasComment("Account Type")
                .HasColumnType("character varying")
                .HasColumnName("account_type");
            entity.Property(e => e.Action)
                .HasComment("Action")
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.DestinationAccountId)
                .HasComment("To")
                .HasColumnName("destination_account_id");
            entity.Property(e => e.Percentage)
                .HasComment("Percentage")
                .HasColumnName("percentage");
            entity.Property(e => e.TotalAmount)
                .HasComment("Total Amount")
                .HasColumnName("total_amount");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountAutomaticEntryWizards)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("account_automatic_entry_wizard_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountAutomaticEntryWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_automatic_entry_wizard_create_uid_fkey");

            entity.HasOne(d => d.DestinationAccount).WithMany(p => p.AccountAutomaticEntryWizards)
                .HasForeignKey(d => d.DestinationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_automatic_entry_wizard_destination_account_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountAutomaticEntryWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_automatic_entry_wizard_write_uid_fkey");

            entity.HasMany(d => d.AccountMoveLines).WithMany(p => p.AccountAutomaticEntryWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAutomaticEntryWizardAccountMoveLineRel",
                    r => r.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .HasConstraintName("account_automatic_entry_wizard_accoun_account_move_line_id_fkey"),
                    l => l.HasOne<AccountAutomaticEntryWizard>().WithMany()
                        .HasForeignKey("AccountAutomaticEntryWizardId")
                        .HasConstraintName("account_automatic_entry_wizar_account_automatic_entry_wiza_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAutomaticEntryWizardId", "AccountMoveLineId").HasName("account_automatic_entry_wizard_account_move_line_rel_pkey");
                        j.ToTable("account_automatic_entry_wizard_account_move_line_rel", tb => tb.HasComment("RELATION BETWEEN account_automatic_entry_wizard AND account_move_line"));
                        j.HasIndex(new[] { "AccountMoveLineId", "AccountAutomaticEntryWizardId" }, "account_automatic_entry_wizar_account_move_line_id_account__idx");
                        j.IndexerProperty<int>("AccountAutomaticEntryWizardId").HasColumnName("account_automatic_entry_wizard_id");
                        j.IndexerProperty<int>("AccountMoveLineId").HasColumnName("account_move_line_id");
                    });
        });

        modelBuilder.Entity<AccountBankStatement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_bank_statement_pkey");

            entity.ToTable("account_bank_statement", tb => tb.HasComment("Bank Statement"));

            entity.HasIndex(e => e.Date, "account_bank_statement_date_index");

            entity.HasIndex(e => e.FirstLineIndex, "account_bank_statement_first_line_index_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BalanceEnd)
                .HasComment("Computed Balance")
                .HasColumnName("balance_end");
            entity.Property(e => e.BalanceEndReal)
                .HasComment("Ending Balance")
                .HasColumnName("balance_end_real");
            entity.Property(e => e.BalanceStart)
                .HasComment("Starting Balance")
                .HasColumnName("balance_start");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.FirstLineIndex)
                .HasComment("First Line Index")
                .HasColumnType("character varying")
                .HasColumnName("first_line_index");
            entity.Property(e => e.IsComplete)
                .HasComment("Is Complete")
                .HasColumnName("is_complete");
            entity.Property(e => e.JournalId)
                .HasComment("Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.Name)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Reference)
                .HasComment("External Reference")
                .HasColumnType("character varying")
                .HasColumnName("reference");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountBankStatements)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountBankStatementCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountBankStatements)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_journal_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountBankStatementWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_write_uid_fkey");

            entity.HasMany(d => d.IrAttachments).WithMany(p => p.AccountBankStatements)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountBankStatementIrAttachmentRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .HasConstraintName("account_bank_statement_ir_attachment_rel_ir_attachment_id_fkey"),
                    l => l.HasOne<AccountBankStatement>().WithMany()
                        .HasForeignKey("AccountBankStatementId")
                        .HasConstraintName("account_bank_statement_ir_attach_account_bank_statement_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountBankStatementId", "IrAttachmentId").HasName("account_bank_statement_ir_attachment_rel_pkey");
                        j.ToTable("account_bank_statement_ir_attachment_rel", tb => tb.HasComment("RELATION BETWEEN account_bank_statement AND ir_attachment"));
                        j.HasIndex(new[] { "IrAttachmentId", "AccountBankStatementId" }, "account_bank_statement_ir_att_ir_attachment_id_account_bank_idx");
                        j.IndexerProperty<int>("AccountBankStatementId").HasColumnName("account_bank_statement_id");
                        j.IndexerProperty<int>("IrAttachmentId").HasColumnName("ir_attachment_id");
                    });
        });

        modelBuilder.Entity<AccountBankStatementLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_bank_statement_line_pkey");

            entity.ToTable("account_bank_statement_line", tb => tb.HasComment("Bank Statement Line"));

            entity.HasIndex(e => e.InternalIndex, "account_bank_statement_line_internal_index_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountNumber)
                .HasComment("Bank Account Number")
                .HasColumnType("character varying")
                .HasColumnName("account_number");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.AmountCurrency)
                .HasComment("Amount in Currency")
                .HasColumnName("amount_currency");
            entity.Property(e => e.AmountResidual)
                .HasComment("Residual Amount")
                .HasColumnName("amount_residual");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Journal Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.ForeignCurrencyId)
                .HasComment("Foreign Currency")
                .HasColumnName("foreign_currency_id");
            entity.Property(e => e.InternalIndex)
                .HasComment("Internal Reference")
                .HasColumnType("character varying")
                .HasColumnName("internal_index");
            entity.Property(e => e.IsReconciled)
                .HasComment("Is Reconciled")
                .HasColumnName("is_reconciled");
            entity.Property(e => e.MoveId)
                .HasComment("Journal Entry")
                .HasColumnName("move_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerName)
                .HasComment("Partner Name")
                .HasColumnType("character varying")
                .HasColumnName("partner_name");
            entity.Property(e => e.PaymentRef)
                .HasComment("Label")
                .HasColumnType("character varying")
                .HasColumnName("payment_ref");
            entity.Property(e => e.PosSessionId)
                .HasComment("Session")
                .HasColumnName("pos_session_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.StatementId)
                .HasComment("Statement")
                .HasColumnName("statement_id");
            entity.Property(e => e.TransactionType)
                .HasComment("Transaction Type")
                .HasColumnType("character varying")
                .HasColumnName("transaction_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountBankStatementLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountBankStatementLineCurrencies)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_currency_id_fkey");

            entity.HasOne(d => d.ForeignCurrency).WithMany(p => p.AccountBankStatementLineForeignCurrencies)
                .HasForeignKey(d => d.ForeignCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_foreign_currency_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountBankStatementLines)
                .HasForeignKey(d => d.MoveId)
                .HasConstraintName("account_bank_statement_line_move_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountBankStatementLines)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_bank_statement_line_partner_id_fkey");

            entity.HasOne(d => d.PosSession).WithMany(p => p.AccountBankStatementLines)
                .HasForeignKey(d => d.PosSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_pos_session_id_fkey");

            entity.HasOne(d => d.Statement).WithMany(p => p.AccountBankStatementLines)
                .HasForeignKey(d => d.StatementId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_statement_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountBankStatementLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_write_uid_fkey");

            entity.HasMany(d => d.AccountPayments).WithMany(p => p.AccountBankStatementLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountPaymentAccountBankStatementLineRel",
                    r => r.HasOne<AccountPayment>().WithMany()
                        .HasForeignKey("AccountPaymentId")
                        .HasConstraintName("account_payment_account_bank_statement__account_payment_id_fkey"),
                    l => l.HasOne<AccountBankStatementLine>().WithMany()
                        .HasForeignKey("AccountBankStatementLineId")
                        .HasConstraintName("account_payment_account_bank__account_bank_statement_line__fkey"),
                    j =>
                    {
                        j.HasKey("AccountBankStatementLineId", "AccountPaymentId").HasName("account_payment_account_bank_statement_line_rel_pkey");
                        j.ToTable("account_payment_account_bank_statement_line_rel", tb => tb.HasComment("RELATION BETWEEN account_bank_statement_line AND account_payment"));
                        j.HasIndex(new[] { "AccountPaymentId", "AccountBankStatementLineId" }, "account_payment_account_bank__account_payment_id_account_ba_idx");
                        j.IndexerProperty<int>("AccountBankStatementLineId").HasColumnName("account_bank_statement_line_id");
                        j.IndexerProperty<int>("AccountPaymentId").HasColumnName("account_payment_id");
                    });
        });

        modelBuilder.Entity<AccountCashRounding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_cash_rounding_pkey");

            entity.ToTable("account_cash_rounding", tb => tb.HasComment("Account Cash Rounding"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Rounding)
                .HasComment("Rounding Precision")
                .HasColumnName("rounding");
            entity.Property(e => e.RoundingMethod)
                .HasComment("Rounding Method")
                .HasColumnType("character varying")
                .HasColumnName("rounding_method");
            entity.Property(e => e.Strategy)
                .HasComment("Rounding Strategy")
                .HasColumnType("character varying")
                .HasColumnName("strategy");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountCashRoundingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_cash_rounding_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountCashRoundingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_cash_rounding_write_uid_fkey");
        });

        modelBuilder.Entity<AccountChartTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_chart_template_pkey");

            entity.ToTable("account_chart_template", tb => tb.HasComment("Account Chart Template"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountJournalEarlyPayDiscountGainAccountId)
                .HasComment("Cash Discount Write-Off Gain Account")
                .HasColumnName("account_journal_early_pay_discount_gain_account_id");
            entity.Property(e => e.AccountJournalEarlyPayDiscountLossAccountId)
                .HasComment("Cash Discount Write-Off Loss Account")
                .HasColumnName("account_journal_early_pay_discount_loss_account_id");
            entity.Property(e => e.AccountJournalPaymentCreditAccountId)
                .HasComment("Journal Outstanding Payments Account")
                .HasColumnName("account_journal_payment_credit_account_id");
            entity.Property(e => e.AccountJournalPaymentDebitAccountId)
                .HasComment("Journal Outstanding Receipts Account")
                .HasColumnName("account_journal_payment_debit_account_id");
            entity.Property(e => e.AccountJournalSuspenseAccountId)
                .HasComment("Journal Suspense Account")
                .HasColumnName("account_journal_suspense_account_id");
            entity.Property(e => e.BankAccountCodePrefix)
                .HasComment("Prefix of the bank accounts")
                .HasColumnType("character varying")
                .HasColumnName("bank_account_code_prefix");
            entity.Property(e => e.CashAccountCodePrefix)
                .HasComment("Prefix of the main cash accounts")
                .HasColumnType("character varying")
                .HasColumnName("cash_account_code_prefix");
            entity.Property(e => e.CodeDigits)
                .HasComment("# of Digits")
                .HasColumnName("code_digits");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DefaultCashDifferenceExpenseAccountId)
                .HasComment("Cash Difference Expense Account")
                .HasColumnName("default_cash_difference_expense_account_id");
            entity.Property(e => e.DefaultCashDifferenceIncomeAccountId)
                .HasComment("Cash Difference Income Account")
                .HasColumnName("default_cash_difference_income_account_id");
            entity.Property(e => e.DefaultPosReceivableAccountId)
                .HasComment("PoS receivable account")
                .HasColumnName("default_pos_receivable_account_id");
            entity.Property(e => e.ExpenseCurrencyExchangeAccountId)
                .HasComment("Loss Exchange Rate Account")
                .HasColumnName("expense_currency_exchange_account_id");
            entity.Property(e => e.IncomeCurrencyExchangeAccountId)
                .HasComment("Gain Exchange Rate Account")
                .HasColumnName("income_currency_exchange_account_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Chart Template")
                .HasColumnName("parent_id");
            entity.Property(e => e.PropertyAccountExpenseCategId)
                .HasComment("Category of Expense Account")
                .HasColumnName("property_account_expense_categ_id");
            entity.Property(e => e.PropertyAccountExpenseId)
                .HasComment("Expense Account on Product Template")
                .HasColumnName("property_account_expense_id");
            entity.Property(e => e.PropertyAccountIncomeCategId)
                .HasComment("Category of Income Account")
                .HasColumnName("property_account_income_categ_id");
            entity.Property(e => e.PropertyAccountIncomeId)
                .HasComment("Income Account on Product Template")
                .HasColumnName("property_account_income_id");
            entity.Property(e => e.PropertyAccountPayableId)
                .HasComment("Payable Account")
                .HasColumnName("property_account_payable_id");
            entity.Property(e => e.PropertyAccountReceivableId)
                .HasComment("Receivable Account")
                .HasColumnName("property_account_receivable_id");
            entity.Property(e => e.PropertyAdvanceTaxPaymentAccountId)
                .HasComment("Advance tax payment account")
                .HasColumnName("property_advance_tax_payment_account_id");
            entity.Property(e => e.PropertyCashBasisBaseAccountId)
                .HasComment("Base Tax Received Account")
                .HasColumnName("property_cash_basis_base_account_id");
            entity.Property(e => e.PropertyStockAccountInputCategId)
                .HasComment("Input Account for Stock Valuation")
                .HasColumnName("property_stock_account_input_categ_id");
            entity.Property(e => e.PropertyStockAccountOutputCategId)
                .HasComment("Output Account for Stock Valuation")
                .HasColumnName("property_stock_account_output_categ_id");
            entity.Property(e => e.PropertyStockValuationAccountId)
                .HasComment("Account Template for Stock Valuation")
                .HasColumnName("property_stock_valuation_account_id");
            entity.Property(e => e.PropertyTaxPayableAccountId)
                .HasComment("Tax current account (payable)")
                .HasColumnName("property_tax_payable_account_id");
            entity.Property(e => e.PropertyTaxReceivableAccountId)
                .HasComment("Tax current account (receivable)")
                .HasColumnName("property_tax_receivable_account_id");
            entity.Property(e => e.TransferAccountCodePrefix)
                .HasComment("Prefix of the main transfer accounts")
                .HasColumnType("character varying")
                .HasColumnName("transfer_account_code_prefix");
            entity.Property(e => e.UseAngloSaxon)
                .HasComment("Use Anglo-Saxon accounting")
                .HasColumnName("use_anglo_saxon");
            entity.Property(e => e.UseStornoAccounting)
                .HasComment("Use Storno accounting")
                .HasColumnName("use_storno_accounting");
            entity.Property(e => e.Visible)
                .HasComment("Can be Visible?")
                .HasColumnName("visible");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountGainAccount).WithMany(p => p.AccountChartTemplateAccountJournalEarlyPayDiscountGainAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountGainAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_early_pay_discount_fkey1");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountLossAccount).WithMany(p => p.AccountChartTemplateAccountJournalEarlyPayDiscountLossAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountLossAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_early_pay_discount__fkey");

            entity.HasOne(d => d.AccountJournalPaymentCreditAccount).WithMany(p => p.AccountChartTemplateAccountJournalPaymentCreditAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentCreditAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_payment_credit_acco_fkey");

            entity.HasOne(d => d.AccountJournalPaymentDebitAccount).WithMany(p => p.AccountChartTemplateAccountJournalPaymentDebitAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentDebitAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_payment_debit_accou_fkey");

            entity.HasOne(d => d.AccountJournalSuspenseAccount).WithMany(p => p.AccountChartTemplateAccountJournalSuspenseAccounts)
                .HasForeignKey(d => d.AccountJournalSuspenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_suspense_account_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.AccountChartTemplates)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountChartTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountChartTemplates)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_chart_template_currency_id_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceExpenseAccount).WithMany(p => p.AccountChartTemplateDefaultCashDifferenceExpenseAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceExpenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_default_cash_difference_expense_acc_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceIncomeAccount).WithMany(p => p.AccountChartTemplateDefaultCashDifferenceIncomeAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceIncomeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_default_cash_difference_income_acco_fkey");

            entity.HasOne(d => d.DefaultPosReceivableAccount).WithMany(p => p.AccountChartTemplateDefaultPosReceivableAccounts)
                .HasForeignKey(d => d.DefaultPosReceivableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_default_pos_receivable_account_id_fkey");

            entity.HasOne(d => d.ExpenseCurrencyExchangeAccount).WithMany(p => p.AccountChartTemplateExpenseCurrencyExchangeAccounts)
                .HasForeignKey(d => d.ExpenseCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_expense_currency_exchange_account_i_fkey");

            entity.HasOne(d => d.IncomeCurrencyExchangeAccount).WithMany(p => p.AccountChartTemplateIncomeCurrencyExchangeAccounts)
                .HasForeignKey(d => d.IncomeCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_income_currency_exchange_account_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_parent_id_fkey");

            entity.HasOne(d => d.PropertyAccountExpenseCateg).WithMany(p => p.AccountChartTemplatePropertyAccountExpenseCategs)
                .HasForeignKey(d => d.PropertyAccountExpenseCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_expense_categ_id_fkey");

            entity.HasOne(d => d.PropertyAccountExpense).WithMany(p => p.AccountChartTemplatePropertyAccountExpenses)
                .HasForeignKey(d => d.PropertyAccountExpenseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_expense_id_fkey");

            entity.HasOne(d => d.PropertyAccountIncomeCateg).WithMany(p => p.AccountChartTemplatePropertyAccountIncomeCategs)
                .HasForeignKey(d => d.PropertyAccountIncomeCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_income_categ_id_fkey");

            entity.HasOne(d => d.PropertyAccountIncome).WithMany(p => p.AccountChartTemplatePropertyAccountIncomes)
                .HasForeignKey(d => d.PropertyAccountIncomeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_income_id_fkey");

            entity.HasOne(d => d.PropertyAccountPayable).WithMany(p => p.AccountChartTemplatePropertyAccountPayables)
                .HasForeignKey(d => d.PropertyAccountPayableId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_payable_id_fkey");

            entity.HasOne(d => d.PropertyAccountReceivable).WithMany(p => p.AccountChartTemplatePropertyAccountReceivables)
                .HasForeignKey(d => d.PropertyAccountReceivableId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_receivable_id_fkey");

            entity.HasOne(d => d.PropertyAdvanceTaxPaymentAccount).WithMany(p => p.AccountChartTemplatePropertyAdvanceTaxPaymentAccounts)
                .HasForeignKey(d => d.PropertyAdvanceTaxPaymentAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_advance_tax_payment_accoun_fkey");

            entity.HasOne(d => d.PropertyCashBasisBaseAccount).WithMany(p => p.AccountChartTemplatePropertyCashBasisBaseAccounts)
                .HasForeignKey(d => d.PropertyCashBasisBaseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_cash_basis_base_account_id_fkey");

            entity.HasOne(d => d.PropertyStockAccountInputCateg).WithMany(p => p.AccountChartTemplatePropertyStockAccountInputCategs)
                .HasForeignKey(d => d.PropertyStockAccountInputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_stock_account_input_categ__fkey");

            entity.HasOne(d => d.PropertyStockAccountOutputCateg).WithMany(p => p.AccountChartTemplatePropertyStockAccountOutputCategs)
                .HasForeignKey(d => d.PropertyStockAccountOutputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_stock_account_output_categ_fkey");

            entity.HasOne(d => d.PropertyStockValuationAccount).WithMany(p => p.AccountChartTemplatePropertyStockValuationAccounts)
                .HasForeignKey(d => d.PropertyStockValuationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_stock_valuation_account_id_fkey");

            entity.HasOne(d => d.PropertyTaxPayableAccount).WithMany(p => p.AccountChartTemplatePropertyTaxPayableAccounts)
                .HasForeignKey(d => d.PropertyTaxPayableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_tax_payable_account_id_fkey");

            entity.HasOne(d => d.PropertyTaxReceivableAccount).WithMany(p => p.AccountChartTemplatePropertyTaxReceivableAccounts)
                .HasForeignKey(d => d.PropertyTaxReceivableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_tax_receivable_account_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountChartTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountEdiDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_edi_document_pkey");

            entity.ToTable("account_edi_document", tb => tb.HasComment("Electronic Document for an account.move"));

            entity.HasIndex(e => new { e.EdiFormatId, e.MoveId }, "account_edi_document_unique_edi_document_by_move_by_format").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AttachmentId)
                .HasComment("Attachment")
                .HasColumnName("attachment_id");
            entity.Property(e => e.BlockingLevel)
                .HasComment("Blocking Level")
                .HasColumnType("character varying")
                .HasColumnName("blocking_level");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EdiFormatId)
                .HasComment("Edi Format")
                .HasColumnName("edi_format_id");
            entity.Property(e => e.Error)
                .HasComment("Error")
                .HasColumnName("error");
            entity.Property(e => e.MoveId)
                .HasComment("Move")
                .HasColumnName("move_id");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Attachment).WithMany(p => p.AccountEdiDocuments)
                .HasForeignKey(d => d.AttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_document_attachment_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountEdiDocumentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_document_create_uid_fkey");

            entity.HasOne(d => d.EdiFormat).WithMany(p => p.AccountEdiDocuments)
                .HasForeignKey(d => d.EdiFormatId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_edi_document_edi_format_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountEdiDocuments)
                .HasForeignKey(d => d.MoveId)
                .HasConstraintName("account_edi_document_move_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountEdiDocumentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_document_write_uid_fkey");
        });

        modelBuilder.Entity<AccountEdiFormat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_edi_format_pkey");

            entity.ToTable("account_edi_format", tb => tb.HasComment("EDI format"));

            entity.HasIndex(e => e.Code, "account_edi_format_unique_code").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasComment("Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountEdiFormatCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_format_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountEdiFormatWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_format_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFinancialYearOp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_financial_year_op_pkey");

            entity.ToTable("account_financial_year_op", tb => tb.HasComment("Opening Balance of Financial Year"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountFinancialYearOps)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("account_financial_year_op_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFinancialYearOpCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_year_op_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFinancialYearOpWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_year_op_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_pkey");

            entity.ToTable("account_fiscal_position", tb => tb.HasComment("Fiscal Position"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AutoApply)
                .HasComment("Detect Automatically")
                .HasColumnName("auto_apply");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CountryGroupId)
                .HasComment("Country Group")
                .HasColumnName("country_group_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ForeignVat)
                .HasComment("Foreign Tax ID")
                .HasColumnType("character varying")
                .HasColumnName("foreign_vat");
            entity.Property(e => e.Name)
                .HasComment("Fiscal Position")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Notes")
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.VatRequired)
                .HasComment("VAT required")
                .HasColumnName("vat_required");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.ZipFrom)
                .HasComment("Zip Range From")
                .HasColumnType("character varying")
                .HasColumnName("zip_from");
            entity.Property(e => e.ZipTo)
                .HasComment("Zip Range To")
                .HasColumnType("character varying")
                .HasColumnName("zip_to");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountFiscalPositions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_company_id_fkey");

            entity.HasOne(d => d.CountryGroup).WithMany(p => p.AccountFiscalPositions)
                .HasForeignKey(d => d.CountryGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_country_group_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.AccountFiscalPositions)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFiscalPositionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFiscalPositionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_write_uid_fkey");

            entity.HasMany(d => d.ResCountryStates).WithMany(p => p.AccountFiscalPositions)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionResCountryStateRel",
                    r => r.HasOne<ResCountryState>().WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .HasConstraintName("account_fiscal_position_res_country_s_res_country_state_id_fkey"),
                    l => l.HasOne<AccountFiscalPosition>().WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .HasConstraintName("account_fiscal_position_res_cou_account_fiscal_position_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountFiscalPositionId", "ResCountryStateId").HasName("account_fiscal_position_res_country_state_rel_pkey");
                        j.ToTable("account_fiscal_position_res_country_state_rel", tb => tb.HasComment("RELATION BETWEEN account_fiscal_position AND res_country_state"));
                        j.HasIndex(new[] { "ResCountryStateId", "AccountFiscalPositionId" }, "account_fiscal_position_res_c_res_country_state_id_account__idx");
                        j.IndexerProperty<int>("AccountFiscalPositionId").HasColumnName("account_fiscal_position_id");
                        j.IndexerProperty<int>("ResCountryStateId").HasColumnName("res_country_state_id");
                    });
        });

        modelBuilder.Entity<AccountFiscalPositionAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_account_pkey");

            entity.ToTable("account_fiscal_position_account", tb => tb.HasComment("Accounts Mapping of Fiscal Position"));

            entity.HasIndex(e => new { e.PositionId, e.AccountSrcId, e.AccountDestId }, "account_fiscal_position_account_account_src_dest_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountDestId)
                .HasComment("Account to Use Instead")
                .HasColumnName("account_dest_id");
            entity.Property(e => e.AccountSrcId)
                .HasComment("Account on Product")
                .HasColumnName("account_src_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PositionId)
                .HasComment("Fiscal Position")
                .HasColumnName("position_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountDest).WithMany(p => p.AccountFiscalPositionAccountAccountDests)
                .HasForeignKey(d => d.AccountDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_account_dest_id_fkey");

            entity.HasOne(d => d.AccountSrc).WithMany(p => p.AccountFiscalPositionAccountAccountSrcs)
                .HasForeignKey(d => d.AccountSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_account_src_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountFiscalPositionAccounts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFiscalPositionAccountCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionAccounts)
                .HasForeignKey(d => d.PositionId)
                .HasConstraintName("account_fiscal_position_account_position_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFiscalPositionAccountWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionAccountTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_account_template_pkey");

            entity.ToTable("account_fiscal_position_account_template", tb => tb.HasComment("Accounts Mapping Template of Fiscal Position"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountDestId)
                .HasComment("Account Destination")
                .HasColumnName("account_dest_id");
            entity.Property(e => e.AccountSrcId)
                .HasComment("Account Source")
                .HasColumnName("account_src_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PositionId)
                .HasComment("Fiscal Mapping")
                .HasColumnName("position_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountDest).WithMany(p => p.AccountFiscalPositionAccountTemplateAccountDests)
                .HasForeignKey(d => d.AccountDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_template_account_dest_id_fkey");

            entity.HasOne(d => d.AccountSrc).WithMany(p => p.AccountFiscalPositionAccountTemplateAccountSrcs)
                .HasForeignKey(d => d.AccountSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_template_account_src_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFiscalPositionAccountTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_template_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionAccountTemplates)
                .HasForeignKey(d => d.PositionId)
                .HasConstraintName("account_fiscal_position_account_template_position_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFiscalPositionAccountTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionTax>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_tax_pkey");

            entity.ToTable("account_fiscal_position_tax", tb => tb.HasComment("Tax Mapping of Fiscal Position"));

            entity.HasIndex(e => new { e.PositionId, e.TaxSrcId, e.TaxDestId }, "account_fiscal_position_tax_tax_src_dest_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PositionId)
                .HasComment("Fiscal Position")
                .HasColumnName("position_id");
            entity.Property(e => e.TaxDestId)
                .HasComment("Tax to Apply")
                .HasColumnName("tax_dest_id");
            entity.Property(e => e.TaxSrcId)
                .HasComment("Tax on Product")
                .HasColumnName("tax_src_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountFiscalPositionTaxes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFiscalPositionTaxCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionTaxes)
                .HasForeignKey(d => d.PositionId)
                .HasConstraintName("account_fiscal_position_tax_position_id_fkey");

            entity.HasOne(d => d.TaxDest).WithMany(p => p.AccountFiscalPositionTaxTaxDests)
                .HasForeignKey(d => d.TaxDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_tax_dest_id_fkey");

            entity.HasOne(d => d.TaxSrc).WithMany(p => p.AccountFiscalPositionTaxTaxSrcs)
                .HasForeignKey(d => d.TaxSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_tax_tax_src_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFiscalPositionTaxWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionTaxTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_tax_template_pkey");

            entity.ToTable("account_fiscal_position_tax_template", tb => tb.HasComment("Tax Mapping Template of Fiscal Position"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PositionId)
                .HasComment("Fiscal Position")
                .HasColumnName("position_id");
            entity.Property(e => e.TaxDestId)
                .HasComment("Replacement Tax")
                .HasColumnName("tax_dest_id");
            entity.Property(e => e.TaxSrcId)
                .HasComment("Tax Source")
                .HasColumnName("tax_src_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFiscalPositionTaxTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_template_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionTaxTemplates)
                .HasForeignKey(d => d.PositionId)
                .HasConstraintName("account_fiscal_position_tax_template_position_id_fkey");

            entity.HasOne(d => d.TaxDest).WithMany(p => p.AccountFiscalPositionTaxTemplateTaxDests)
                .HasForeignKey(d => d.TaxDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_template_tax_dest_id_fkey");

            entity.HasOne(d => d.TaxSrc).WithMany(p => p.AccountFiscalPositionTaxTemplateTaxSrcs)
                .HasForeignKey(d => d.TaxSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_tax_template_tax_src_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFiscalPositionTaxTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_template_pkey");

            entity.ToTable("account_fiscal_position_template", tb => tb.HasComment("Template for Fiscal Position"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AutoApply)
                .HasComment("Detect Automatically")
                .HasColumnName("auto_apply");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Chart Template")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.CountryGroupId)
                .HasComment("Country Group")
                .HasColumnName("country_group_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Fiscal Position Template")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Notes")
                .HasColumnName("note");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.VatRequired)
                .HasComment("VAT required")
                .HasColumnName("vat_required");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.ZipFrom)
                .HasComment("Zip Range From")
                .HasColumnType("character varying")
                .HasColumnName("zip_from");
            entity.Property(e => e.ZipTo)
                .HasComment("Zip Range To")
                .HasColumnType("character varying")
                .HasColumnName("zip_to");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountFiscalPositionTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_template_chart_template_id_fkey");

            entity.HasOne(d => d.CountryGroup).WithMany(p => p.AccountFiscalPositionTemplates)
                .HasForeignKey(d => d.CountryGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_country_group_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.AccountFiscalPositionTemplates)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFiscalPositionTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFiscalPositionTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_write_uid_fkey");

            entity.HasMany(d => d.ResCountryStates).WithMany(p => p.AccountFiscalPositionTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionTemplateResCountryStateRel",
                    r => r.HasOne<ResCountryState>().WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .HasConstraintName("account_fiscal_position_template_res__res_country_state_id_fkey"),
                    l => l.HasOne<AccountFiscalPositionTemplate>().WithMany()
                        .HasForeignKey("AccountFiscalPositionTemplateId")
                        .HasConstraintName("account_fiscal_position_templ_account_fiscal_position_temp_fkey"),
                    j =>
                    {
                        j.HasKey("AccountFiscalPositionTemplateId", "ResCountryStateId").HasName("account_fiscal_position_template_res_country_state_rel_pkey");
                        j.ToTable("account_fiscal_position_template_res_country_state_rel", tb => tb.HasComment("RELATION BETWEEN account_fiscal_position_template AND res_country_state"));
                        j.HasIndex(new[] { "ResCountryStateId", "AccountFiscalPositionTemplateId" }, "account_fiscal_position_templ_res_country_state_id_account__idx");
                        j.IndexerProperty<int>("AccountFiscalPositionTemplateId").HasColumnName("account_fiscal_position_template_id");
                        j.IndexerProperty<int>("ResCountryStateId").HasColumnName("res_country_state_id");
                    });
        });

        modelBuilder.Entity<AccountFullReconcile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_full_reconcile_pkey");

            entity.ToTable("account_full_reconcile", tb => tb.HasComment("Full Reconcile"));

            entity.HasIndex(e => e.ExchangeMoveId, "account_full_reconcile_exchange_move_id_index").HasFilter("(exchange_move_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ExchangeMoveId)
                .HasComment("Exchange Move")
                .HasColumnName("exchange_move_id");
            entity.Property(e => e.Name)
                .HasComment("Number")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountFullReconcileCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_full_reconcile_create_uid_fkey");

            entity.HasOne(d => d.ExchangeMove).WithMany(p => p.AccountFullReconciles)
                .HasForeignKey(d => d.ExchangeMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_full_reconcile_exchange_move_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountFullReconcileWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_full_reconcile_write_uid_fkey");
        });

        modelBuilder.Entity<AccountGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_group_pkey");

            entity.ToTable("account_group", tb => tb.HasComment("Account Group"));

            entity.HasIndex(e => e.ParentId, "account_group_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "account_group_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CodePrefixEnd)
                .HasComment("Code Prefix End")
                .HasColumnType("character varying")
                .HasColumnName("code_prefix_end");
            entity.Property(e => e.CodePrefixStart)
                .HasComment("Code Prefix Start")
                .HasColumnType("character varying")
                .HasColumnName("code_prefix_start");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountGroups)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_group_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_group_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_write_uid_fkey");
        });

        modelBuilder.Entity<AccountGroupTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_group_template_pkey");

            entity.ToTable("account_group_template", tb => tb.HasComment("Template for Account Groups"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Chart Template")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.CodePrefixEnd)
                .HasComment("Code Prefix End")
                .HasColumnType("character varying")
                .HasColumnName("code_prefix_end");
            entity.Property(e => e.CodePrefixStart)
                .HasComment("Code Prefix Start")
                .HasColumnType("character varying")
                .HasColumnName("code_prefix_start");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountGroupTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_group_template_chart_template_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountGroupTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_template_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_group_template_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountGroupTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountIncoterm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_incoterms_pkey");

            entity.ToTable("account_incoterms", tb => tb.HasComment("Incoterms"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .HasComment("Code")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountIncotermCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_incoterms_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountIncotermWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_incoterms_write_uid_fkey");
        });

        modelBuilder.Entity<AccountInvoiceSend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_invoice_send_pkey");

            entity.ToTable("account_invoice_send", tb => tb.HasComment("Account Invoice Send"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComposerId)
                .HasComment("Composer")
                .HasColumnName("composer_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsEmail)
                .HasComment("Email")
                .HasColumnName("is_email");
            entity.Property(e => e.IsPrint)
                .HasComment("Print")
                .HasColumnName("is_print");
            entity.Property(e => e.Printed)
                .HasComment("Is Printed")
                .HasColumnName("printed");
            entity.Property(e => e.SnailmailIsLetter)
                .HasComment("Send by Post")
                .HasColumnName("snailmail_is_letter");
            entity.Property(e => e.TemplateId)
                .HasComment("Use template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Composer).WithMany(p => p.AccountInvoiceSends)
                .HasForeignKey(d => d.ComposerId)
                .HasConstraintName("account_invoice_send_composer_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountInvoiceSendCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_invoice_send_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.AccountInvoiceSends)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_invoice_send_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountInvoiceSendWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_invoice_send_write_uid_fkey");

            entity.HasMany(d => d.AccountMoves).WithMany(p => p.AccountInvoiceSends)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveAccountInvoiceSendRel",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("AccountMoveId")
                        .HasConstraintName("account_move_account_invoice_send_rel_account_move_id_fkey"),
                    l => l.HasOne<AccountInvoiceSend>().WithMany()
                        .HasForeignKey("AccountInvoiceSendId")
                        .HasConstraintName("account_move_account_invoice_send__account_invoice_send_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountInvoiceSendId", "AccountMoveId").HasName("account_move_account_invoice_send_rel_pkey");
                        j.ToTable("account_move_account_invoice_send_rel", tb => tb.HasComment("RELATION BETWEEN account_invoice_send AND account_move"));
                        j.HasIndex(new[] { "AccountMoveId", "AccountInvoiceSendId" }, "account_move_account_invoice__account_move_id_account_invoi_idx");
                        j.IndexerProperty<int>("AccountInvoiceSendId").HasColumnName("account_invoice_send_id");
                        j.IndexerProperty<int>("AccountMoveId").HasColumnName("account_move_id");
                    });
        });

        modelBuilder.Entity<AccountJournal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_journal_pkey");

            entity.ToTable("account_journal", tb => tb.HasComment("Journal"));

            entity.HasIndex(e => new { e.CompanyId, e.Code }, "account_journal_code_company_uniq").IsUnique();

            entity.HasIndex(e => e.CompanyId, "account_journal_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AliasId)
                .HasComment("Email Alias")
                .HasColumnName("alias_id");
            entity.Property(e => e.BankAccountId)
                .HasComment("Bank Account")
                .HasColumnName("bank_account_id");
            entity.Property(e => e.BankStatementsSource)
                .HasComment("Bank Feeds")
                .HasColumnType("character varying")
                .HasColumnName("bank_statements_source");
            entity.Property(e => e.Code)
                .HasMaxLength(5)
                .HasComment("Short Code")
                .HasColumnName("code");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DefaultAccountId)
                .HasComment("Default Account")
                .HasColumnName("default_account_id");
            entity.Property(e => e.InvoiceReferenceModel)
                .HasComment("Communication Standard")
                .HasColumnType("character varying")
                .HasColumnName("invoice_reference_model");
            entity.Property(e => e.InvoiceReferenceType)
                .HasComment("Communication Type")
                .HasColumnType("character varying")
                .HasColumnName("invoice_reference_type");
            entity.Property(e => e.LossAccountId)
                .HasComment("Loss Account")
                .HasColumnName("loss_account_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Journal Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PaymentSequence)
                .HasComment("Dedicated Payment Sequence")
                .HasColumnName("payment_sequence");
            entity.Property(e => e.ProfitAccountId)
                .HasComment("Profit Account")
                .HasColumnName("profit_account_id");
            entity.Property(e => e.RefundSequence)
                .HasComment("Dedicated Credit Note Sequence")
                .HasColumnName("refund_sequence");
            entity.Property(e => e.RestrictModeHashTable)
                .HasComment("Lock Posted Entries with Hash")
                .HasColumnName("restrict_mode_hash_table");
            entity.Property(e => e.SaleActivityNote)
                .HasComment("Activity Summary")
                .HasColumnName("sale_activity_note");
            entity.Property(e => e.SaleActivityTypeId)
                .HasComment("Schedule Activity")
                .HasColumnName("sale_activity_type_id");
            entity.Property(e => e.SaleActivityUserId)
                .HasComment("Activity User")
                .HasColumnName("sale_activity_user_id");
            entity.Property(e => e.SecureSequenceId)
                .HasComment("Secure Sequence")
                .HasColumnName("secure_sequence_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SequenceOverrideRegex)
                .HasComment("Sequence Override Regex")
                .HasColumnName("sequence_override_regex");
            entity.Property(e => e.ShowOnDashboard)
                .HasComment("Show journal on dashboard")
                .HasColumnName("show_on_dashboard");
            entity.Property(e => e.SuspenseAccountId)
                .HasComment("Suspense Account")
                .HasColumnName("suspense_account_id");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_alias_id_fkey");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.BankAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_bank_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountJournalCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_currency_id_fkey");

            entity.HasOne(d => d.DefaultAccount).WithMany(p => p.AccountJournalDefaultAccounts)
                .HasForeignKey(d => d.DefaultAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_default_account_id_fkey");

            entity.HasOne(d => d.LossAccount).WithMany(p => p.AccountJournalLossAccounts)
                .HasForeignKey(d => d.LossAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_loss_account_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ProfitAccount).WithMany(p => p.AccountJournalProfitAccounts)
                .HasForeignKey(d => d.ProfitAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_profit_account_id_fkey");

            entity.HasOne(d => d.SaleActivityType).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.SaleActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_sale_activity_type_id_fkey");

            entity.HasOne(d => d.SaleActivityUser).WithMany(p => p.AccountJournalSaleActivityUsers)
                .HasForeignKey(d => d.SaleActivityUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_sale_activity_user_id_fkey");

            entity.HasOne(d => d.SecureSequence).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.SecureSequenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_secure_sequence_id_fkey");

            entity.HasOne(d => d.SuspenseAccount).WithMany(p => p.AccountJournalSuspenseAccounts)
                .HasForeignKey(d => d.SuspenseAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_suspense_account_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountJournalWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_write_uid_fkey");

            entity.HasMany(d => d.AccountEdiFormats).WithMany(p => p.AccountJournals)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountEdiFormatAccountJournalRel",
                    r => r.HasOne<AccountEdiFormat>().WithMany()
                        .HasForeignKey("AccountEdiFormatId")
                        .HasConstraintName("account_edi_format_account_journal_r_account_edi_format_id_fkey"),
                    l => l.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_edi_format_account_journal_rel_account_journal_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountJournalId", "AccountEdiFormatId").HasName("account_edi_format_account_journal_rel_pkey");
                        j.ToTable("account_edi_format_account_journal_rel", tb => tb.HasComment("RELATION BETWEEN account_journal AND account_edi_format"));
                        j.HasIndex(new[] { "AccountEdiFormatId", "AccountJournalId" }, "account_edi_format_account_jo_account_edi_format_id_account_idx");
                        j.IndexerProperty<int>("AccountJournalId").HasColumnName("account_journal_id");
                        j.IndexerProperty<int>("AccountEdiFormatId").HasColumnName("account_edi_format_id");
                    });

            entity.HasMany(d => d.Accounts).WithMany(p => p.Journals)
                .UsingEntity<Dictionary<string, object>>(
                    "JournalAccountControlRel",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("journal_account_control_rel_account_id_fkey"),
                    l => l.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("JournalId")
                        .HasConstraintName("journal_account_control_rel_journal_id_fkey"),
                    j =>
                    {
                        j.HasKey("JournalId", "AccountId").HasName("journal_account_control_rel_pkey");
                        j.ToTable("journal_account_control_rel", tb => tb.HasComment("RELATION BETWEEN account_journal AND account_account"));
                        j.HasIndex(new[] { "AccountId", "JournalId" }, "journal_account_control_rel_account_id_journal_id_idx");
                        j.IndexerProperty<int>("JournalId").HasColumnName("journal_id");
                        j.IndexerProperty<int>("AccountId").HasColumnName("account_id");
                    });
        });

        modelBuilder.Entity<AccountJournalGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_journal_group_pkey");

            entity.ToTable("account_journal_group", tb => tb.HasComment("Account Journal Group"));

            entity.HasIndex(e => new { e.CompanyId, e.Name }, "account_journal_group_uniq_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Journal Group")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountJournalGroups)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_group_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountJournalGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_group_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountJournalGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_group_write_uid_fkey");

            entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountJournalGroups)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountJournalGroupRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_journal_group_r_account_journal_id_fkey"),
                    l => l.HasOne<AccountJournalGroup>().WithMany()
                        .HasForeignKey("AccountJournalGroupId")
                        .HasConstraintName("account_journal_account_journal_g_account_journal_group_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountJournalGroupId", "AccountJournalId").HasName("account_journal_account_journal_group_rel_pkey");
                        j.ToTable("account_journal_account_journal_group_rel", tb => tb.HasComment("RELATION BETWEEN account_journal_group AND account_journal"));
                        j.HasIndex(new[] { "AccountJournalId", "AccountJournalGroupId" }, "account_journal_account_journ_account_journal_id_account_jo_idx");
                        j.IndexerProperty<int>("AccountJournalGroupId").HasColumnName("account_journal_group_id");
                        j.IndexerProperty<int>("AccountJournalId").HasColumnName("account_journal_id");
                    });
        });

        modelBuilder.Entity<AccountMove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_move_pkey");

            entity.ToTable("account_move", tb => tb.HasComment("Journal Entry"));

            entity.HasIndex(e => e.CompanyId, "account_move_company_id_index");

            entity.HasIndex(e => e.Date, "account_move_date_index");

            entity.HasIndex(e => e.InvoiceDateDue, "account_move_invoice_date_due_index");

            entity.HasIndex(e => e.InvoiceDate, "account_move_invoice_date_index");

            entity.HasIndex(e => e.MoveType, "account_move_move_type_index");

            entity.HasIndex(e => e.Name, "account_move_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PaymentId, "account_move_payment_id_index").HasFilter("(payment_id IS NOT NULL)");

            entity.HasIndex(e => new { e.JournalId, e.State, e.PaymentState, e.MoveType, e.Date }, "account_move_payment_idx");

            entity.HasIndex(e => e.PaymentReference, "account_move_payment_reference_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ReversedEntryId, "account_move_reversed_entry_id_index").HasFilter("(reversed_entry_id IS NOT NULL)");

            entity.HasIndex(e => e.SecureSequenceNumber, "account_move_secure_sequence_number_index");

            entity.HasIndex(e => new { e.JournalId, e.SequencePrefix, e.SequenceNumber, e.Name }, "account_move_sequence_index").IsDescending(false, true, true, false);

            entity.HasIndex(e => new { e.JournalId, e.Id, e.SequencePrefix }, "account_move_sequence_index2").IsDescending(false, true, false);

            entity.HasIndex(e => e.StockMoveId, "account_move_stock_move_id_index").HasFilter("(stock_move_id IS NOT NULL)");

            entity.HasIndex(e => e.TaxCashBasisOriginMoveId, "account_move_tax_cash_basis_origin_move_id_index").HasFilter("(tax_cash_basis_origin_move_id IS NOT NULL)");

            entity.HasIndex(e => e.JournalId, "account_move_to_check_idx").HasFilter("(to_check = true)");

            entity.HasIndex(e => new { e.Name, e.JournalId }, "account_move_unique_name")
                .IsUnique()
                .HasFilter("(((state)::text = 'posted'::text) AND ((name)::text <> '/'::text))");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.AlwaysTaxExigible)
                .HasComment("Always Tax Exigible")
                .HasColumnName("always_tax_exigible");
            entity.Property(e => e.AmountResidual)
                .HasComment("Amount Due")
                .HasColumnName("amount_residual");
            entity.Property(e => e.AmountResidualSigned)
                .HasComment("Amount Due Signed")
                .HasColumnName("amount_residual_signed");
            entity.Property(e => e.AmountTax)
                .HasComment("Tax")
                .HasColumnName("amount_tax");
            entity.Property(e => e.AmountTaxSigned)
                .HasComment("Tax Signed")
                .HasColumnName("amount_tax_signed");
            entity.Property(e => e.AmountTotal)
                .HasComment("Total")
                .HasColumnName("amount_total");
            entity.Property(e => e.AmountTotalInCurrencySigned)
                .HasComment("Total in Currency Signed")
                .HasColumnName("amount_total_in_currency_signed");
            entity.Property(e => e.AmountTotalSigned)
                .HasComment("Total Signed")
                .HasColumnName("amount_total_signed");
            entity.Property(e => e.AmountUntaxed)
                .HasComment("Untaxed Amount")
                .HasColumnName("amount_untaxed");
            entity.Property(e => e.AmountUntaxedSigned)
                .HasComment("Untaxed Amount Signed")
                .HasColumnName("amount_untaxed_signed");
            entity.Property(e => e.AutoPost)
                .HasComment("Auto-post")
                .HasColumnType("character varying")
                .HasColumnName("auto_post");
            entity.Property(e => e.AutoPostOriginId)
                .HasComment("First recurring entry")
                .HasColumnName("auto_post_origin_id");
            entity.Property(e => e.AutoPostUntil)
                .HasComment("Auto-post until")
                .HasColumnName("auto_post_until");
            entity.Property(e => e.CampaignId)
                .HasComment("Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.CommercialPartnerId)
                .HasComment("Commercial Entity")
                .HasColumnName("commercial_partner_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.EdiState)
                .HasComment("Electronic invoicing")
                .HasColumnType("character varying")
                .HasColumnName("edi_state");
            entity.Property(e => e.FiscalPositionId)
                .HasComment("Fiscal Position")
                .HasColumnName("fiscal_position_id");
            entity.Property(e => e.InalterableHash)
                .HasComment("Inalterability Hash")
                .HasColumnType("character varying")
                .HasColumnName("inalterable_hash");
            entity.Property(e => e.InvoiceCashRoundingId)
                .HasComment("Cash Rounding Method")
                .HasColumnName("invoice_cash_rounding_id");
            entity.Property(e => e.InvoiceDate)
                .HasComment("Invoice/Bill Date")
                .HasColumnName("invoice_date");
            entity.Property(e => e.InvoiceDateDue)
                .HasComment("Due Date")
                .HasColumnName("invoice_date_due");
            entity.Property(e => e.InvoiceIncotermId)
                .HasComment("Incoterm")
                .HasColumnName("invoice_incoterm_id");
            entity.Property(e => e.InvoiceOrigin)
                .HasComment("Origin")
                .HasColumnType("character varying")
                .HasColumnName("invoice_origin");
            entity.Property(e => e.InvoicePartnerDisplayName)
                .HasComment("Invoice Partner Display Name")
                .HasColumnType("character varying")
                .HasColumnName("invoice_partner_display_name");
            entity.Property(e => e.InvoicePaymentTermId)
                .HasComment("Payment Terms")
                .HasColumnName("invoice_payment_term_id");
            entity.Property(e => e.InvoiceSourceEmail)
                .HasComment("Source Email")
                .HasColumnType("character varying")
                .HasColumnName("invoice_source_email");
            entity.Property(e => e.InvoiceUserId)
                .HasComment("Salesperson")
                .HasColumnName("invoice_user_id");
            entity.Property(e => e.IsMoveSent)
                .HasComment("Is Move Sent")
                .HasColumnName("is_move_sent");
            entity.Property(e => e.IsStorno)
                .HasComment("Is Storno")
                .HasColumnName("is_storno");
            entity.Property(e => e.JournalId)
                .HasComment("Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.MediumId)
                .HasComment("Medium")
                .HasColumnName("medium_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("move_type");
            entity.Property(e => e.Name)
                .HasComment("Number")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Narration)
                .HasComment("Terms and Conditions")
                .HasColumnName("narration");
            entity.Property(e => e.PartnerBankId)
                .HasComment("Recipient Bank")
                .HasColumnName("partner_bank_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerShippingId)
                .HasComment("Delivery Address")
                .HasColumnName("partner_shipping_id");
            entity.Property(e => e.PaymentId)
                .HasComment("Payment")
                .HasColumnName("payment_id");
            entity.Property(e => e.PaymentReference)
                .HasComment("Payment Reference")
                .HasColumnType("character varying")
                .HasColumnName("payment_reference");
            entity.Property(e => e.PaymentState)
                .HasComment("Payment Status")
                .HasColumnType("character varying")
                .HasColumnName("payment_state");
            entity.Property(e => e.PostedBefore)
                .HasComment("Posted Before")
                .HasColumnName("posted_before");
            entity.Property(e => e.QrCodeMethod)
                .HasComment("Payment QR-code")
                .HasColumnType("character varying")
                .HasColumnName("qr_code_method");
            entity.Property(e => e.QuickEditTotalAmount)
                .HasComment("Total (Tax inc.)")
                .HasColumnName("quick_edit_total_amount");
            entity.Property(e => e.Ref)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("ref");
            entity.Property(e => e.ReversedEntryId)
                .HasComment("Reversal of")
                .HasColumnName("reversed_entry_id");
            entity.Property(e => e.SecureSequenceNumber)
                .HasComment("Inalteralbility No Gap Sequence #")
                .HasColumnName("secure_sequence_number");
            entity.Property(e => e.SequenceNumber)
                .HasComment("Sequence Number")
                .HasColumnName("sequence_number");
            entity.Property(e => e.SequencePrefix)
                .HasComment("Sequence Prefix")
                .HasColumnType("character varying")
                .HasColumnName("sequence_prefix");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.StatementLineId)
                .HasComment("Statement Line")
                .HasColumnName("statement_line_id");
            entity.Property(e => e.StockMoveId)
                .HasComment("Stock Move")
                .HasColumnName("stock_move_id");
            entity.Property(e => e.TaxCashBasisOriginMoveId)
                .HasComment("Cash Basis Origin")
                .HasColumnName("tax_cash_basis_origin_move_id");
            entity.Property(e => e.TaxCashBasisRecId)
                .HasComment("Tax Cash Basis Entry of")
                .HasColumnName("tax_cash_basis_rec_id");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.ToCheck)
                .HasComment("To Check")
                .HasColumnName("to_check");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AutoPostOrigin).WithMany(p => p.InverseAutoPostOrigin)
                .HasForeignKey(d => d.AutoPostOriginId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_auto_post_origin_id_fkey");

            entity.HasOne(d => d.Campaign).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_campaign_id_fkey");

            entity.HasOne(d => d.CommercialPartner).WithMany(p => p.AccountMoveCommercialPartners)
                .HasForeignKey(d => d.CommercialPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_commercial_partner_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountMoveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_currency_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_fiscal_position_id_fkey");

            entity.HasOne(d => d.InvoiceCashRounding).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.InvoiceCashRoundingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_cash_rounding_id_fkey");

            entity.HasOne(d => d.InvoiceIncoterm).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.InvoiceIncotermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_incoterm_id_fkey");

            entity.HasOne(d => d.InvoicePaymentTerm).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.InvoicePaymentTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_payment_term_id_fkey");

            entity.HasOne(d => d.InvoiceUser).WithMany(p => p.AccountMoveInvoiceUsers)
                .HasForeignKey(d => d.InvoiceUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_user_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_journal_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_message_main_attachment_id_fkey");

            entity.HasOne(d => d.PartnerBank).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.PartnerBankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_partner_bank_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountMovePartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_partner_id_fkey");

            entity.HasOne(d => d.PartnerShipping).WithMany(p => p.AccountMovePartnerShippings)
                .HasForeignKey(d => d.PartnerShippingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_partner_shipping_id_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_payment_id_fkey");

            entity.HasOne(d => d.ReversedEntry).WithMany(p => p.InverseReversedEntry)
                .HasForeignKey(d => d.ReversedEntryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_reversed_entry_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_source_id_fkey");

            entity.HasOne(d => d.StatementLine).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.StatementLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_statement_line_id_fkey");

            entity.HasOne(d => d.StockMove).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.StockMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_stock_move_id_fkey");

            entity.HasOne(d => d.TaxCashBasisOriginMove).WithMany(p => p.InverseTaxCashBasisOriginMove)
                .HasForeignKey(d => d.TaxCashBasisOriginMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_tax_cash_basis_origin_move_id_fkey");

            entity.HasOne(d => d.TaxCashBasisRec).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.TaxCashBasisRecId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_tax_cash_basis_rec_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_team_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountMoveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_write_uid_fkey");

            entity.HasMany(d => d.Transactions).WithMany(p => p.Invoices)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountInvoiceTransactionRel",
                    r => r.HasOne<PaymentTransaction>().WithMany()
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("account_invoice_transaction_rel_transaction_id_fkey"),
                    l => l.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("account_invoice_transaction_rel_invoice_id_fkey"),
                    j =>
                    {
                        j.HasKey("InvoiceId", "TransactionId").HasName("account_invoice_transaction_rel_pkey");
                        j.ToTable("account_invoice_transaction_rel", tb => tb.HasComment("RELATION BETWEEN account_move AND payment_transaction"));
                        j.HasIndex(new[] { "TransactionId", "InvoiceId" }, "account_invoice_transaction_rel_transaction_id_invoice_id_idx");
                        j.IndexerProperty<int>("InvoiceId").HasColumnName("invoice_id");
                        j.IndexerProperty<int>("TransactionId").HasColumnName("transaction_id");
                    });
        });

        modelBuilder.Entity<AccountMoveLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_move_line_pkey");

            entity.ToTable("account_move_line", tb => tb.HasComment("Journal Item"));

            entity.HasIndex(e => e.AccountId, "account_move_line_account_id_index");

            entity.HasIndex(e => e.AnalyticDistribution, "account_move_line_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.CompanyId, "account_move_line_company_id_index");

            entity.HasIndex(e => e.DateMaturity, "account_move_line_date_maturity_index");

            entity.HasIndex(e => new { e.Date, e.MoveName, e.Id }, "account_move_line_date_name_id_idx").IsDescending(true, true, false);

            entity.HasIndex(e => e.FullReconcileId, "account_move_line_full_reconcile_id_index").HasFilter("(full_reconcile_id IS NOT NULL)");

            entity.HasIndex(e => e.GroupTaxId, "account_move_line_group_tax_id_index").HasFilter("(group_tax_id IS NOT NULL)");

            entity.HasIndex(e => e.JournalId, "account_move_line_journal_id_index");

            entity.HasIndex(e => e.MoveId, "account_move_line_move_id_index");

            entity.HasIndex(e => e.MoveName, "account_move_line_move_name_index");

            entity.HasIndex(e => new { e.PartnerId, e.Ref }, "account_move_line_partner_id_ref_idx");

            entity.HasIndex(e => e.PaymentId, "account_move_line_payment_id_index").HasFilter("(payment_id IS NOT NULL)");

            entity.HasIndex(e => e.PurchaseLineId, "account_move_line_purchase_line_id_index").HasFilter("(purchase_line_id IS NOT NULL)");

            entity.HasIndex(e => e.Ref, "account_move_line_ref_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.StatementId, "account_move_line_statement_id_index").HasFilter("(statement_id IS NOT NULL)");

            entity.HasIndex(e => e.StatementLineId, "account_move_line_statement_line_id_index").HasFilter("(statement_line_id IS NOT NULL)");

            entity.HasIndex(e => e.VehicleId, "account_move_line_vehicle_id_index").HasFilter("(vehicle_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Account")
                .HasColumnName("account_id");
            entity.Property(e => e.AccountRootId)
                .HasComment("Account Root")
                .HasColumnName("account_root_id");
            entity.Property(e => e.AmountCurrency)
                .HasComment("Amount in Currency")
                .HasColumnName("amount_currency");
            entity.Property(e => e.AmountResidual)
                .HasComment("Residual Amount")
                .HasColumnName("amount_residual");
            entity.Property(e => e.AmountResidualCurrency)
                .HasComment("Residual Amount in Currency")
                .HasColumnName("amount_residual_currency");
            entity.Property(e => e.AnalyticDistribution)
                .HasComment("Analytic")
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.Balance)
                .HasComment("Balance")
                .HasColumnName("balance");
            entity.Property(e => e.Blocked)
                .HasComment("No Follow-up")
                .HasColumnName("blocked");
            entity.Property(e => e.CompanyCurrencyId)
                .HasComment("Company Currency")
                .HasColumnName("company_currency_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Credit)
                .HasComment("Credit")
                .HasColumnName("credit");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.DateMaturity)
                .HasComment("Due Date")
                .HasColumnName("date_maturity");
            entity.Property(e => e.Debit)
                .HasComment("Debit")
                .HasColumnName("debit");
            entity.Property(e => e.Discount)
                .HasComment("Discount (%)")
                .HasColumnName("discount");
            entity.Property(e => e.DiscountAmountCurrency)
                .HasComment("Discount amount in Currency")
                .HasColumnName("discount_amount_currency");
            entity.Property(e => e.DiscountBalance)
                .HasComment("Discount Balance")
                .HasColumnName("discount_balance");
            entity.Property(e => e.DiscountDate)
                .HasComment("Discount Date")
                .HasColumnName("discount_date");
            entity.Property(e => e.DiscountPercentage)
                .HasComment("Discount Percentage")
                .HasColumnName("discount_percentage");
            entity.Property(e => e.DisplayType)
                .HasComment("Display Type")
                .HasColumnType("character varying")
                .HasColumnName("display_type");
            entity.Property(e => e.ExpenseId)
                .HasComment("Expense")
                .HasColumnName("expense_id");
            entity.Property(e => e.FullReconcileId)
                .HasComment("Matching")
                .HasColumnName("full_reconcile_id");
            entity.Property(e => e.GroupTaxId)
                .HasComment("Originator Group of Taxes")
                .HasColumnName("group_tax_id");
            entity.Property(e => e.IsDownpayment)
                .HasComment("Is Downpayment")
                .HasColumnName("is_downpayment");
            entity.Property(e => e.JournalId)
                .HasComment("Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.MatchingNumber)
                .HasComment("Matching #")
                .HasColumnType("character varying")
                .HasColumnName("matching_number");
            entity.Property(e => e.MoveId)
                .HasComment("Journal Entry")
                .HasColumnName("move_id");
            entity.Property(e => e.MoveName)
                .HasComment("Number")
                .HasColumnType("character varying")
                .HasColumnName("move_name");
            entity.Property(e => e.Name)
                .HasComment("Label")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentState)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("parent_state");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PaymentId)
                .HasComment("Originator Payment")
                .HasColumnName("payment_id");
            entity.Property(e => e.PriceSubtotal)
                .HasComment("Subtotal")
                .HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTotal)
                .HasComment("Total")
                .HasColumnName("price_total");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.PurchaseLineId)
                .HasComment("Purchase Order Line")
                .HasColumnName("purchase_line_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.ReconcileModelId)
                .HasComment("Reconciliation Model")
                .HasColumnName("reconcile_model_id");
            entity.Property(e => e.Reconciled)
                .HasComment("Reconciled")
                .HasColumnName("reconciled");
            entity.Property(e => e.Ref)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("ref");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.StatementId)
                .HasComment("Statement")
                .HasColumnName("statement_id");
            entity.Property(e => e.StatementLineId)
                .HasComment("Originator Statement Line")
                .HasColumnName("statement_line_id");
            entity.Property(e => e.TaxAudit)
                .HasComment("Tax Audit String")
                .HasColumnType("character varying")
                .HasColumnName("tax_audit");
            entity.Property(e => e.TaxBaseAmount)
                .HasComment("Base Amount")
                .HasColumnName("tax_base_amount");
            entity.Property(e => e.TaxGroupId)
                .HasComment("Originator tax group")
                .HasColumnName("tax_group_id");
            entity.Property(e => e.TaxLineId)
                .HasComment("Originator Tax")
                .HasColumnName("tax_line_id");
            entity.Property(e => e.TaxRepartitionLineId)
                .HasComment("Originator Tax Distribution Line")
                .HasColumnName("tax_repartition_line_id");
            entity.Property(e => e.TaxTagInvert)
                .HasComment("Invert Tags")
                .HasColumnName("tax_tag_invert");
            entity.Property(e => e.VehicleId)
                .HasComment("Vehicle")
                .HasColumnName("vehicle_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_move_line_account_id_fkey");

            entity.HasOne(d => d.CompanyCurrency).WithMany(p => p.AccountMoveLineCompanyCurrencies)
                .HasForeignKey(d => d.CompanyCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_company_currency_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountMoveLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountMoveLineCurrencies)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_currency_id_fkey");

            entity.HasOne(d => d.Expense).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ExpenseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_expense_id_fkey");

            entity.HasOne(d => d.FullReconcile).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.FullReconcileId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_full_reconcile_id_fkey");

            entity.HasOne(d => d.GroupTax).WithMany(p => p.AccountMoveLineGroupTaxes)
                .HasForeignKey(d => d.GroupTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_group_tax_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_journal_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.MoveId)
                .HasConstraintName("account_move_line_move_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_partner_id_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_payment_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_product_uom_id_fkey");

            entity.HasOne(d => d.PurchaseLine).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.PurchaseLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_purchase_line_id_fkey");

            entity.HasOne(d => d.ReconcileModel).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ReconcileModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_reconcile_model_id_fkey");

            entity.HasOne(d => d.Statement).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.StatementId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_statement_id_fkey");

            entity.HasOne(d => d.StatementLine).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.StatementLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_statement_line_id_fkey");

            entity.HasOne(d => d.TaxGroup).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.TaxGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_tax_group_id_fkey");

            entity.HasOne(d => d.TaxLine).WithMany(p => p.AccountMoveLineTaxLines)
                .HasForeignKey(d => d.TaxLineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_tax_line_id_fkey");

            entity.HasOne(d => d.TaxRepartitionLine).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.TaxRepartitionLineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_tax_repartition_line_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_vehicle_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountMoveLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_write_uid_fkey");

            entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountMoveLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTagAccountMoveLineRel",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_account_tag_account_move_li_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .HasConstraintName("account_account_tag_account_move_line_account_move_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountMoveLineId", "AccountAccountTagId").HasName("account_account_tag_account_move_line_rel_pkey");
                        j.ToTable("account_account_tag_account_move_line_rel", tb => tb.HasComment("RELATION BETWEEN account_move_line AND account_account_tag"));
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountMoveLineId" }, "account_account_tag_account_m_account_account_tag_id_accoun_idx");
                        j.IndexerProperty<int>("AccountMoveLineId").HasColumnName("account_move_line_id");
                        j.IndexerProperty<int>("AccountAccountTagId").HasColumnName("account_account_tag_id");
                    });

            entity.HasMany(d => d.AccountTaxes).WithMany(p => p.AccountMoveLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveLineAccountTaxRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_move_line_account_tax_rel_account_tax_id_fkey"),
                    l => l.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .HasConstraintName("account_move_line_account_tax_rel_account_move_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountMoveLineId", "AccountTaxId").HasName("account_move_line_account_tax_rel_pkey");
                        j.ToTable("account_move_line_account_tax_rel", tb => tb.HasComment("RELATION BETWEEN account_move_line AND account_tax"));
                        j.HasIndex(new[] { "AccountTaxId", "AccountMoveLineId" }, "account_move_line_account_tax_account_tax_id_account_move_l_idx");
                        j.IndexerProperty<int>("AccountMoveLineId").HasColumnName("account_move_line_id");
                        j.IndexerProperty<int>("AccountTaxId").HasColumnName("account_tax_id");
                    });

            entity.HasMany(d => d.OrderLines).WithMany(p => p.InvoiceLines)
                .UsingEntity<Dictionary<string, object>>(
                    "SaleOrderLineInvoiceRel",
                    r => r.HasOne<SaleOrderLine>().WithMany()
                        .HasForeignKey("OrderLineId")
                        .HasConstraintName("sale_order_line_invoice_rel_order_line_id_fkey"),
                    l => l.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("InvoiceLineId")
                        .HasConstraintName("sale_order_line_invoice_rel_invoice_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("InvoiceLineId", "OrderLineId").HasName("sale_order_line_invoice_rel_pkey");
                        j.ToTable("sale_order_line_invoice_rel", tb => tb.HasComment("RELATION BETWEEN account_move_line AND sale_order_line"));
                        j.HasIndex(new[] { "OrderLineId", "InvoiceLineId" }, "sale_order_line_invoice_rel_order_line_id_invoice_line_id_idx");
                        j.IndexerProperty<int>("InvoiceLineId").HasColumnName("invoice_line_id");
                        j.IndexerProperty<int>("OrderLineId").HasColumnName("order_line_id");
                    });
        });

        modelBuilder.Entity<AccountMoveReversal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_move_reversal_pkey");

            entity.ToTable("account_move_reversal", tb => tb.HasComment("Account Move Reversal"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Reversal date")
                .HasColumnName("date");
            entity.Property(e => e.DateMode)
                .HasComment("Date Mode")
                .HasColumnType("character varying")
                .HasColumnName("date_mode");
            entity.Property(e => e.JournalId)
                .HasComment("Use Specific Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.Reason)
                .HasComment("Reason")
                .HasColumnType("character varying")
                .HasColumnName("reason");
            entity.Property(e => e.RefundMethod)
                .HasComment("Credit Method")
                .HasColumnType("character varying")
                .HasColumnName("refund_method");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountMoveReversals)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("account_move_reversal_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountMoveReversalCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_reversal_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountMoveReversals)
                .HasForeignKey(d => d.JournalId)
                .HasConstraintName("account_move_reversal_journal_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountMoveReversalWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_reversal_write_uid_fkey");

            entity.HasMany(d => d.Moves).WithMany(p => p.Reversals)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveReversalMove",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("MoveId")
                        .HasConstraintName("account_move_reversal_move_move_id_fkey"),
                    l => l.HasOne<AccountMoveReversal>().WithMany()
                        .HasForeignKey("ReversalId")
                        .HasConstraintName("account_move_reversal_move_reversal_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReversalId", "MoveId").HasName("account_move_reversal_move_pkey");
                        j.ToTable("account_move_reversal_move", tb => tb.HasComment("RELATION BETWEEN account_move_reversal AND account_move"));
                        j.HasIndex(new[] { "MoveId", "ReversalId" }, "account_move_reversal_move_move_id_reversal_id_idx");
                        j.IndexerProperty<int>("ReversalId").HasColumnName("reversal_id");
                        j.IndexerProperty<int>("MoveId").HasColumnName("move_id");
                    });

            entity.HasMany(d => d.NewMoves).WithMany(p => p.ReversalsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveReversalNewMove",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("NewMoveId")
                        .HasConstraintName("account_move_reversal_new_move_new_move_id_fkey"),
                    l => l.HasOne<AccountMoveReversal>().WithMany()
                        .HasForeignKey("ReversalId")
                        .HasConstraintName("account_move_reversal_new_move_reversal_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReversalId", "NewMoveId").HasName("account_move_reversal_new_move_pkey");
                        j.ToTable("account_move_reversal_new_move", tb => tb.HasComment("RELATION BETWEEN account_move_reversal AND account_move"));
                        j.HasIndex(new[] { "NewMoveId", "ReversalId" }, "account_move_reversal_new_move_new_move_id_reversal_id_idx");
                        j.IndexerProperty<int>("ReversalId").HasColumnName("reversal_id");
                        j.IndexerProperty<int>("NewMoveId").HasColumnName("new_move_id");
                    });
        });

        modelBuilder.Entity<AccountPartialReconcile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_partial_reconcile_pkey");

            entity.ToTable("account_partial_reconcile", tb => tb.HasComment("Partial Reconcile"));

            entity.HasIndex(e => e.CreditMoveId, "account_partial_reconcile_credit_move_id_index");

            entity.HasIndex(e => e.DebitMoveId, "account_partial_reconcile_debit_move_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CreditAmountCurrency)
                .HasComment("Credit Amount Currency")
                .HasColumnName("credit_amount_currency");
            entity.Property(e => e.CreditCurrencyId)
                .HasComment("Currency of the credit journal item.")
                .HasColumnName("credit_currency_id");
            entity.Property(e => e.CreditMoveId)
                .HasComment("Credit Move")
                .HasColumnName("credit_move_id");
            entity.Property(e => e.DebitAmountCurrency)
                .HasComment("Debit Amount Currency")
                .HasColumnName("debit_amount_currency");
            entity.Property(e => e.DebitCurrencyId)
                .HasComment("Currency of the debit journal item.")
                .HasColumnName("debit_currency_id");
            entity.Property(e => e.DebitMoveId)
                .HasComment("Debit Move")
                .HasColumnName("debit_move_id");
            entity.Property(e => e.ExchangeMoveId)
                .HasComment("Exchange Move")
                .HasColumnName("exchange_move_id");
            entity.Property(e => e.FullReconcileId)
                .HasComment("Full Reconcile")
                .HasColumnName("full_reconcile_id");
            entity.Property(e => e.MaxDate)
                .HasComment("Max Date of Matched Lines")
                .HasColumnName("max_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountPartialReconciles)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountPartialReconcileCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_create_uid_fkey");

            entity.HasOne(d => d.CreditCurrency).WithMany(p => p.AccountPartialReconcileCreditCurrencies)
                .HasForeignKey(d => d.CreditCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_credit_currency_id_fkey");

            entity.HasOne(d => d.CreditMove).WithMany(p => p.AccountPartialReconcileCreditMoves)
                .HasForeignKey(d => d.CreditMoveId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_partial_reconcile_credit_move_id_fkey");

            entity.HasOne(d => d.DebitCurrency).WithMany(p => p.AccountPartialReconcileDebitCurrencies)
                .HasForeignKey(d => d.DebitCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_debit_currency_id_fkey");

            entity.HasOne(d => d.DebitMove).WithMany(p => p.AccountPartialReconcileDebitMoves)
                .HasForeignKey(d => d.DebitMoveId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_partial_reconcile_debit_move_id_fkey");

            entity.HasOne(d => d.ExchangeMove).WithMany(p => p.AccountPartialReconciles)
                .HasForeignKey(d => d.ExchangeMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_exchange_move_id_fkey");

            entity.HasOne(d => d.FullReconcile).WithMany(p => p.AccountPartialReconciles)
                .HasForeignKey(d => d.FullReconcileId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_full_reconcile_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountPartialReconcileWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_pkey");

            entity.ToTable("account_payment", tb => tb.HasComment("Payments"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.AmountCompanyCurrencySigned)
                .HasComment("Amount Company Currency Signed")
                .HasColumnName("amount_company_currency_signed");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DestinationAccountId)
                .HasComment("Destination Account")
                .HasColumnName("destination_account_id");
            entity.Property(e => e.DestinationJournalId)
                .HasComment("Destination Journal")
                .HasColumnName("destination_journal_id");
            entity.Property(e => e.ForceOutstandingAccountId)
                .HasComment("Forced Outstanding Account")
                .HasColumnName("force_outstanding_account_id");
            entity.Property(e => e.IsInternalTransfer)
                .HasComment("Internal Transfer")
                .HasColumnName("is_internal_transfer");
            entity.Property(e => e.IsMatched)
                .HasComment("Is Matched With a Bank Statement")
                .HasColumnName("is_matched");
            entity.Property(e => e.IsReconciled)
                .HasComment("Is Reconciled")
                .HasColumnName("is_reconciled");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId)
                .HasComment("Journal Entry")
                .HasColumnName("move_id");
            entity.Property(e => e.OutstandingAccountId)
                .HasComment("Outstanding Account")
                .HasColumnName("outstanding_account_id");
            entity.Property(e => e.PairedInternalTransferPaymentId)
                .HasComment("Paired Internal Transfer Payment")
                .HasColumnName("paired_internal_transfer_payment_id");
            entity.Property(e => e.PartnerBankId)
                .HasComment("Recipient Bank Account")
                .HasColumnName("partner_bank_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer/Vendor")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerType)
                .HasComment("Partner Type")
                .HasColumnType("character varying")
                .HasColumnName("partner_type");
            entity.Property(e => e.PaymentMethodId)
                .HasComment("Method")
                .HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentMethodLineId)
                .HasComment("Payment Method")
                .HasColumnName("payment_method_line_id");
            entity.Property(e => e.PaymentReference)
                .HasComment("Payment Reference")
                .HasColumnType("character varying")
                .HasColumnName("payment_reference");
            entity.Property(e => e.PaymentTokenId)
                .HasComment("Saved Payment Token")
                .HasColumnName("payment_token_id");
            entity.Property(e => e.PaymentTransactionId)
                .HasComment("Payment Transaction")
                .HasColumnName("payment_transaction_id");
            entity.Property(e => e.PaymentType)
                .HasComment("Payment Type")
                .HasColumnType("character varying")
                .HasColumnName("payment_type");
            entity.Property(e => e.PosPaymentMethodId)
                .HasComment("POS Payment Method")
                .HasColumnName("pos_payment_method_id");
            entity.Property(e => e.PosSessionId)
                .HasComment("POS Session")
                .HasColumnName("pos_session_id");
            entity.Property(e => e.SourcePaymentId)
                .HasComment("Source Payment")
                .HasColumnName("source_payment_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountPaymentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_currency_id_fkey");

            entity.HasOne(d => d.DestinationAccount).WithMany(p => p.AccountPaymentDestinationAccounts)
                .HasForeignKey(d => d.DestinationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_destination_account_id_fkey");

            entity.HasOne(d => d.DestinationJournal).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.DestinationJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_destination_journal_id_fkey");

            entity.HasOne(d => d.ForceOutstandingAccount).WithMany(p => p.AccountPaymentForceOutstandingAccounts)
                .HasForeignKey(d => d.ForceOutstandingAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_force_outstanding_account_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.MoveId)
                .HasConstraintName("account_payment_move_id_fkey");

            entity.HasOne(d => d.OutstandingAccount).WithMany(p => p.AccountPaymentOutstandingAccounts)
                .HasForeignKey(d => d.OutstandingAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_outstanding_account_id_fkey");

            entity.HasOne(d => d.PairedInternalTransferPayment).WithMany(p => p.InversePairedInternalTransferPayment)
                .HasForeignKey(d => d.PairedInternalTransferPaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_paired_internal_transfer_payment_id_fkey");

            entity.HasOne(d => d.PartnerBank).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PartnerBankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_partner_bank_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_payment_partner_id_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_method_id_fkey");

            entity.HasOne(d => d.PaymentMethodLine).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentMethodLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_method_line_id_fkey");

            entity.HasOne(d => d.PaymentToken).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentTokenId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_token_id_fkey");

            entity.HasOne(d => d.PaymentTransaction).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentTransactionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_transaction_id_fkey");

            entity.HasOne(d => d.PosPaymentMethod).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PosPaymentMethodId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_pos_payment_method_id_fkey");

            entity.HasOne(d => d.PosSession).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PosSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_pos_session_id_fkey");

            entity.HasOne(d => d.SourcePayment).WithMany(p => p.InverseSourcePayment)
                .HasForeignKey(d => d.SourcePaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_source_payment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountPaymentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_method_pkey");

            entity.ToTable("account_payment_method", tb => tb.HasComment("Payment Methods"));

            entity.HasIndex(e => new { e.Code, e.PaymentType }, "account_payment_method_name_code_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasComment("Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PaymentType)
                .HasComment("Payment Type")
                .HasColumnType("character varying")
                .HasColumnName("payment_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountPaymentMethodCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountPaymentMethodWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentMethodLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_method_line_pkey");

            entity.ToTable("account_payment_method_line", tb => tb.HasComment("Payment Methods"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.JournalId)
                .HasComment("Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PaymentAccountId)
                .HasComment("Payment Account")
                .HasColumnName("payment_account_id");
            entity.Property(e => e.PaymentMethodId)
                .HasComment("Payment Method")
                .HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentProviderId)
                .HasComment("Payment Provider")
                .HasColumnName("payment_provider_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountPaymentMethodLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_line_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_payment_method_line_journal_id_fkey");

            entity.HasOne(d => d.PaymentAccount).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.PaymentAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_payment_method_line_payment_account_id_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("account_payment_method_line_payment_method_id_fkey");

            entity.HasOne(d => d.PaymentProvider).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.PaymentProviderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_line_payment_provider_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountPaymentMethodLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentRegister>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_register_pkey");

            entity.ToTable("account_payment_register", tb => tb.HasComment("Register Payment"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.CanEditWizard)
                .HasComment("Can Edit Wizard")
                .HasColumnName("can_edit_wizard");
            entity.Property(e => e.CanGroupPayments)
                .HasComment("Can Group Payments")
                .HasColumnName("can_group_payments");
            entity.Property(e => e.Communication)
                .HasComment("Memo")
                .HasColumnType("character varying")
                .HasColumnName("communication");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.GroupPayment)
                .HasComment("Group Payments")
                .HasColumnName("group_payment");
            entity.Property(e => e.JournalId)
                .HasComment("Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.PartnerBankId)
                .HasComment("Recipient Bank Account")
                .HasColumnName("partner_bank_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer/Vendor")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerType)
                .HasComment("Partner Type")
                .HasColumnType("character varying")
                .HasColumnName("partner_type");
            entity.Property(e => e.PaymentDate)
                .HasComment("Payment Date")
                .HasColumnName("payment_date");
            entity.Property(e => e.PaymentDifferenceHandling)
                .HasComment("Payment Difference Handling")
                .HasColumnType("character varying")
                .HasColumnName("payment_difference_handling");
            entity.Property(e => e.PaymentMethodLineId)
                .HasComment("Payment Method")
                .HasColumnName("payment_method_line_id");
            entity.Property(e => e.PaymentTokenId)
                .HasComment("Saved payment token")
                .HasColumnName("payment_token_id");
            entity.Property(e => e.PaymentType)
                .HasComment("Payment Type")
                .HasColumnType("character varying")
                .HasColumnName("payment_type");
            entity.Property(e => e.SourceAmount)
                .HasComment("Amount to Pay (company currency)")
                .HasColumnName("source_amount");
            entity.Property(e => e.SourceAmountCurrency)
                .HasComment("Amount to Pay (foreign currency)")
                .HasColumnName("source_amount_currency");
            entity.Property(e => e.SourceCurrencyId)
                .HasComment("Source Currency")
                .HasColumnName("source_currency_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.WriteoffAccountId)
                .HasComment("Difference Account")
                .HasColumnName("writeoff_account_id");
            entity.Property(e => e.WriteoffLabel)
                .HasComment("Journal Item Label")
                .HasColumnType("character varying")
                .HasColumnName("writeoff_label");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountPaymentRegisterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.AccountPaymentRegisterCurrencies)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_currency_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_journal_id_fkey");

            entity.HasOne(d => d.PartnerBank).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.PartnerBankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_partner_bank_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_payment_register_partner_id_fkey");

            entity.HasOne(d => d.PaymentMethodLine).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.PaymentMethodLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_payment_method_line_id_fkey");

            entity.HasOne(d => d.PaymentToken).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.PaymentTokenId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_payment_token_id_fkey");

            entity.HasOne(d => d.SourceCurrency).WithMany(p => p.AccountPaymentRegisterSourceCurrencies)
                .HasForeignKey(d => d.SourceCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_source_currency_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountPaymentRegisterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_write_uid_fkey");

            entity.HasOne(d => d.WriteoffAccount).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.WriteoffAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_writeoff_account_id_fkey");

            entity.HasMany(d => d.Lines).WithMany(p => p.Wizards)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountPaymentRegisterMoveLineRel",
                    r => r.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("LineId")
                        .HasConstraintName("account_payment_register_move_line_rel_line_id_fkey"),
                    l => l.HasOne<AccountPaymentRegister>().WithMany()
                        .HasForeignKey("WizardId")
                        .HasConstraintName("account_payment_register_move_line_rel_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizardId", "LineId").HasName("account_payment_register_move_line_rel_pkey");
                        j.ToTable("account_payment_register_move_line_rel", tb => tb.HasComment("RELATION BETWEEN account_payment_register AND account_move_line"));
                        j.HasIndex(new[] { "LineId", "WizardId" }, "account_payment_register_move_line_rel_line_id_wizard_id_idx");
                        j.IndexerProperty<int>("WizardId").HasColumnName("wizard_id");
                        j.IndexerProperty<int>("LineId").HasColumnName("line_id");
                    });
        });

        modelBuilder.Entity<AccountPaymentTerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_term_pkey");

            entity.ToTable("account_payment_term", tb => tb.HasComment("Payment Terms"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DisplayOnInvoice)
                .HasComment("Display terms on invoice")
                .HasColumnName("display_on_invoice");
            entity.Property(e => e.Name)
                .HasComment("Payment Terms")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Description on the Invoice")
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountPaymentTerms)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountPaymentTermCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountPaymentTermWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentTermLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_term_line_pkey");

            entity.ToTable("account_payment_term_line", tb => tb.HasComment("Payment Terms Line"));

            entity.HasIndex(e => e.PaymentId, "account_payment_term_line_payment_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Days)
                .HasComment("Days")
                .HasColumnName("days");
            entity.Property(e => e.DaysAfter)
                .HasComment("Days after End of month")
                .HasColumnName("days_after");
            entity.Property(e => e.DiscountDays)
                .HasComment("Discount Days")
                .HasColumnName("discount_days");
            entity.Property(e => e.DiscountPercentage)
                .HasComment("Discount %")
                .HasColumnName("discount_percentage");
            entity.Property(e => e.EndMonth)
                .HasComment("End of month")
                .HasColumnName("end_month");
            entity.Property(e => e.Months)
                .HasComment("Months")
                .HasColumnName("months");
            entity.Property(e => e.PaymentId)
                .HasComment("Payment Terms")
                .HasColumnName("payment_id");
            entity.Property(e => e.Value)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.ValueAmount)
                .HasComment("Value")
                .HasColumnName("value_amount");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountPaymentTermLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_line_create_uid_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.AccountPaymentTermLines)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("account_payment_term_line_payment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountPaymentTermLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReconcileModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_pkey");

            entity.ToTable("account_reconcile_model", tb => tb.HasComment("Preset to create journal entries during a invoices and payments matching"));

            entity.HasIndex(e => new { e.Name, e.CompanyId }, "account_reconcile_model_name_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AllowPaymentTolerance)
                .HasComment("Payment Tolerance")
                .HasColumnName("allow_payment_tolerance");
            entity.Property(e => e.AutoReconcile)
                .HasComment("Auto-validate")
                .HasColumnName("auto_reconcile");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DecimalSeparator)
                .HasComment("Decimal Separator")
                .HasColumnType("character varying")
                .HasColumnName("decimal_separator");
            entity.Property(e => e.MatchAmount)
                .HasComment("Amount Condition")
                .HasColumnType("character varying")
                .HasColumnName("match_amount");
            entity.Property(e => e.MatchAmountMax)
                .HasComment("Amount Max Parameter")
                .HasColumnName("match_amount_max");
            entity.Property(e => e.MatchAmountMin)
                .HasComment("Amount Min Parameter")
                .HasColumnName("match_amount_min");
            entity.Property(e => e.MatchLabel)
                .HasComment("Label")
                .HasColumnType("character varying")
                .HasColumnName("match_label");
            entity.Property(e => e.MatchLabelParam)
                .HasComment("Label Parameter")
                .HasColumnType("character varying")
                .HasColumnName("match_label_param");
            entity.Property(e => e.MatchNature)
                .HasComment("Amount Type")
                .HasColumnType("character varying")
                .HasColumnName("match_nature");
            entity.Property(e => e.MatchNote)
                .HasComment("Note")
                .HasColumnType("character varying")
                .HasColumnName("match_note");
            entity.Property(e => e.MatchNoteParam)
                .HasComment("Note Parameter")
                .HasColumnType("character varying")
                .HasColumnName("match_note_param");
            entity.Property(e => e.MatchPartner)
                .HasComment("Partner is Set")
                .HasColumnName("match_partner");
            entity.Property(e => e.MatchSameCurrency)
                .HasComment("Same Currency")
                .HasColumnName("match_same_currency");
            entity.Property(e => e.MatchTextLocationLabel)
                .HasComment("Match Text Location Label")
                .HasColumnName("match_text_location_label");
            entity.Property(e => e.MatchTextLocationNote)
                .HasComment("Match Text Location Note")
                .HasColumnName("match_text_location_note");
            entity.Property(e => e.MatchTextLocationReference)
                .HasComment("Match Text Location Reference")
                .HasColumnName("match_text_location_reference");
            entity.Property(e => e.MatchTransactionType)
                .HasComment("Transaction Type")
                .HasColumnType("character varying")
                .HasColumnName("match_transaction_type");
            entity.Property(e => e.MatchTransactionTypeParam)
                .HasComment("Transaction Type Parameter")
                .HasColumnType("character varying")
                .HasColumnName("match_transaction_type_param");
            entity.Property(e => e.MatchingOrder)
                .HasComment("Matching Order")
                .HasColumnType("character varying")
                .HasColumnName("matching_order");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PastMonthsLimit)
                .HasComment("Search Months Limit")
                .HasColumnName("past_months_limit");
            entity.Property(e => e.PaymentToleranceParam)
                .HasComment("Gap")
                .HasColumnName("payment_tolerance_param");
            entity.Property(e => e.PaymentToleranceType)
                .HasComment("Payment Tolerance Type")
                .HasColumnType("character varying")
                .HasColumnName("payment_tolerance_type");
            entity.Property(e => e.RuleType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("rule_type");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ToCheck)
                .HasComment("To Check")
                .HasColumnName("to_check");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountReconcileModels)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_reconcile_model_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReconcileModelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountReconcileModels)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_message_main_attachment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReconcileModelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_write_uid_fkey");

            entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountReconcileModels)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountReconcileModelRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_reconcile_model_account_journal_id_fkey"),
                    l => l.HasOne<AccountReconcileModel>().WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .HasConstraintName("account_journal_account_reconci_account_reconcile_model_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelId", "AccountJournalId").HasName("account_journal_account_reconcile_model_rel_pkey");
                        j.ToTable("account_journal_account_reconcile_model_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model AND account_journal"));
                        j.HasIndex(new[] { "AccountJournalId", "AccountReconcileModelId" }, "account_journal_account_recon_account_journal_id_account_re_idx");
                        j.IndexerProperty<int>("AccountReconcileModelId").HasColumnName("account_reconcile_model_id");
                        j.IndexerProperty<int>("AccountJournalId").HasColumnName("account_journal_id");
                    });

            entity.HasMany(d => d.ResPartnerCategories).WithMany(p => p.AccountReconcileModels)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelResPartnerCategoryRel",
                    r => r.HasOne<ResPartnerCategory>().WithMany()
                        .HasForeignKey("ResPartnerCategoryId")
                        .HasConstraintName("account_reconcile_model_res_partne_res_partner_category_id_fkey"),
                    l => l.HasOne<AccountReconcileModel>().WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .HasConstraintName("account_reconcile_model_res_pa_account_reconcile_model_id_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelId", "ResPartnerCategoryId").HasName("account_reconcile_model_res_partner_category_rel_pkey");
                        j.ToTable("account_reconcile_model_res_partner_category_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model AND res_partner_category"));
                        j.HasIndex(new[] { "ResPartnerCategoryId", "AccountReconcileModelId" }, "account_reconcile_model_res_p_res_partner_category_id_accou_idx");
                        j.IndexerProperty<int>("AccountReconcileModelId").HasColumnName("account_reconcile_model_id");
                        j.IndexerProperty<int>("ResPartnerCategoryId").HasColumnName("res_partner_category_id");
                    });

            entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountReconcileModels)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_reconcile_model_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<AccountReconcileModel>().WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .HasConstraintName("account_reconcile_model_res_par_account_reconcile_model_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelId", "ResPartnerId").HasName("account_reconcile_model_res_partner_rel_pkey");
                        j.ToTable("account_reconcile_model_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "AccountReconcileModelId" }, "account_reconcile_model_res_p_res_partner_id_account_reconc_idx");
                        j.IndexerProperty<int>("AccountReconcileModelId").HasColumnName("account_reconcile_model_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<AccountReconcileModelLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_line_pkey");

            entity.ToTable("account_reconcile_model_line", tb => tb.HasComment("Rules for the reconciliation model"));

            entity.HasIndex(e => e.AnalyticDistribution, "account_reconcile_model_line_analytic_distribution_gin_index").HasMethod("gin");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Account")
                .HasColumnName("account_id");
            entity.Property(e => e.Amount)
                .HasComment("Float Amount")
                .HasColumnName("amount");
            entity.Property(e => e.AmountString)
                .HasComment("Amount")
                .HasColumnType("character varying")
                .HasColumnName("amount_string");
            entity.Property(e => e.AmountType)
                .HasComment("Amount Type")
                .HasColumnType("character varying")
                .HasColumnName("amount_type");
            entity.Property(e => e.AnalyticDistribution)
                .HasComment("Analytic")
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ForceTaxIncluded)
                .HasComment("Tax Included in Price")
                .HasColumnName("force_tax_included");
            entity.Property(e => e.JournalId)
                .HasComment("Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.Label)
                .HasComment("Journal Item Label")
                .HasColumnType("character varying")
                .HasColumnName("label");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountReconcileModelLines)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("account_reconcile_model_line_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountReconcileModelLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReconcileModelLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountReconcileModelLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_line_journal_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.AccountReconcileModelLines)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_line_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReconcileModelLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_write_uid_fkey");

            entity.HasMany(d => d.AccountTaxes).WithMany(p => p.AccountReconcileModelLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelLineAccountTaxRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_reconcile_model_line_account_tax_re_account_tax_id_fkey"),
                    l => l.HasOne<AccountReconcileModelLine>().WithMany()
                        .HasForeignKey("AccountReconcileModelLineId")
                        .HasConstraintName("account_reconcile_model_line__account_reconcile_model_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelLineId", "AccountTaxId").HasName("account_reconcile_model_line_account_tax_rel_pkey");
                        j.ToTable("account_reconcile_model_line_account_tax_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model_line AND account_tax"));
                        j.HasIndex(new[] { "AccountTaxId", "AccountReconcileModelLineId" }, "account_reconcile_model_line__account_tax_id_account_reconc_idx");
                        j.IndexerProperty<int>("AccountReconcileModelLineId").HasColumnName("account_reconcile_model_line_id");
                        j.IndexerProperty<int>("AccountTaxId").HasColumnName("account_tax_id");
                    });
        });

        modelBuilder.Entity<AccountReconcileModelLineTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_line_template_pkey");

            entity.ToTable("account_reconcile_model_line_template", tb => tb.HasComment("Reconcile Model Line Template"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Account")
                .HasColumnName("account_id");
            entity.Property(e => e.AmountString)
                .HasComment("Amount")
                .HasColumnType("character varying")
                .HasColumnName("amount_string");
            entity.Property(e => e.AmountType)
                .HasComment("Amount Type")
                .HasColumnType("character varying")
                .HasColumnName("amount_type");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ForceTaxIncluded)
                .HasComment("Tax Included in Price")
                .HasColumnName("force_tax_included");
            entity.Property(e => e.Label)
                .HasComment("Journal Item Label")
                .HasColumnType("character varying")
                .HasColumnName("label");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountReconcileModelLineTemplates)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_line_template_account_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReconcileModelLineTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_template_create_uid_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.AccountReconcileModelLineTemplates)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_template_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReconcileModelLineTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_template_write_uid_fkey");

            entity.HasMany(d => d.AccountTaxTemplates).WithMany(p => p.AccountReconcileModelLineTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelLineTemplateAccountTaxTemplateRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("AccountTaxTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_reconcile_model_line_templ_account_tax_template_id_fkey"),
                    l => l.HasOne<AccountReconcileModelLineTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelLineTemplateId")
                        .HasConstraintName("account_reconcile_model_line_account_reconcile_model_line_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelLineTemplateId", "AccountTaxTemplateId").HasName("account_reconcile_model_line_template_account_tax_template_pkey");
                        j.ToTable("account_reconcile_model_line_template_account_tax_template_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model_line_template AND account_tax_template"));
                        j.HasIndex(new[] { "AccountTaxTemplateId", "AccountReconcileModelLineTemplateId" }, "account_reconcile_model_line__account_tax_template_id_accou_idx");
                        j.IndexerProperty<int>("AccountReconcileModelLineTemplateId").HasColumnName("account_reconcile_model_line_template_id");
                        j.IndexerProperty<int>("AccountTaxTemplateId").HasColumnName("account_tax_template_id");
                    });
        });

        modelBuilder.Entity<AccountReconcileModelPartnerMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_partner_mapping_pkey");

            entity.ToTable("account_reconcile_model_partner_mapping", tb => tb.HasComment("Partner mapping for reconciliation models"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.NarrationRegex)
                .HasComment("Find Text in Notes")
                .HasColumnType("character varying")
                .HasColumnName("narration_regex");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PaymentRefRegex)
                .HasComment("Find Text in Label")
                .HasColumnType("character varying")
                .HasColumnName("payment_ref_regex");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReconcileModelPartnerMappingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_partner_mapping_create_uid_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.AccountReconcileModelPartnerMappings)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("account_reconcile_model_partner_mapping_model_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.AccountReconcileModelPartnerMappings)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("account_reconcile_model_partner_mapping_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReconcileModelPartnerMappingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_partner_mapping_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReconcileModelTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_template_pkey");

            entity.ToTable("account_reconcile_model_template", tb => tb.HasComment("Reconcile Model Template"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllowPaymentTolerance)
                .HasComment("Allow Payment Gap")
                .HasColumnName("allow_payment_tolerance");
            entity.Property(e => e.AutoReconcile)
                .HasComment("Auto-validate")
                .HasColumnName("auto_reconcile");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Chart Template")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DecimalSeparator)
                .HasComment("Decimal Separator")
                .HasColumnType("character varying")
                .HasColumnName("decimal_separator");
            entity.Property(e => e.MatchAmount)
                .HasComment("Amount Condition")
                .HasColumnType("character varying")
                .HasColumnName("match_amount");
            entity.Property(e => e.MatchAmountMax)
                .HasComment("Amount Max Parameter")
                .HasColumnName("match_amount_max");
            entity.Property(e => e.MatchAmountMin)
                .HasComment("Amount Min Parameter")
                .HasColumnName("match_amount_min");
            entity.Property(e => e.MatchLabel)
                .HasComment("Label")
                .HasColumnType("character varying")
                .HasColumnName("match_label");
            entity.Property(e => e.MatchLabelParam)
                .HasComment("Label Parameter")
                .HasColumnType("character varying")
                .HasColumnName("match_label_param");
            entity.Property(e => e.MatchNature)
                .HasComment("Amount Type")
                .HasColumnType("character varying")
                .HasColumnName("match_nature");
            entity.Property(e => e.MatchNote)
                .HasComment("Note")
                .HasColumnType("character varying")
                .HasColumnName("match_note");
            entity.Property(e => e.MatchNoteParam)
                .HasComment("Note Parameter")
                .HasColumnType("character varying")
                .HasColumnName("match_note_param");
            entity.Property(e => e.MatchPartner)
                .HasComment("Partner Is Set")
                .HasColumnName("match_partner");
            entity.Property(e => e.MatchSameCurrency)
                .HasComment("Same Currency")
                .HasColumnName("match_same_currency");
            entity.Property(e => e.MatchTextLocationLabel)
                .HasComment("Match Text Location Label")
                .HasColumnName("match_text_location_label");
            entity.Property(e => e.MatchTextLocationNote)
                .HasComment("Match Text Location Note")
                .HasColumnName("match_text_location_note");
            entity.Property(e => e.MatchTextLocationReference)
                .HasComment("Match Text Location Reference")
                .HasColumnName("match_text_location_reference");
            entity.Property(e => e.MatchTransactionType)
                .HasComment("Transaction Type")
                .HasColumnType("character varying")
                .HasColumnName("match_transaction_type");
            entity.Property(e => e.MatchTransactionTypeParam)
                .HasComment("Transaction Type Parameter")
                .HasColumnType("character varying")
                .HasColumnName("match_transaction_type_param");
            entity.Property(e => e.MatchingOrder)
                .HasComment("Matching Order")
                .HasColumnType("character varying")
                .HasColumnName("matching_order");
            entity.Property(e => e.Name)
                .HasComment("Button Label")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PaymentToleranceParam)
                .HasComment("Gap")
                .HasColumnName("payment_tolerance_param");
            entity.Property(e => e.PaymentToleranceType)
                .HasComment("Payment Tolerance Type")
                .HasColumnType("character varying")
                .HasColumnName("payment_tolerance_type");
            entity.Property(e => e.RuleType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("rule_type");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ToCheck)
                .HasComment("To Check")
                .HasColumnName("to_check");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountReconcileModelTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_reconcile_model_template_chart_template_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReconcileModelTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_template_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReconcileModelTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_template_write_uid_fkey");

            entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountReconcileModelTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountReconcileModelTemplateRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_reconcile_mode_account_journal_id_fkey1"),
                    l => l.HasOne<AccountReconcileModelTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .HasConstraintName("account_journal_account_recon_account_reconcile_model_temp_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelTemplateId", "AccountJournalId").HasName("account_journal_account_reconcile_model_template_rel_pkey");
                        j.ToTable("account_journal_account_reconcile_model_template_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model_template AND account_journal"));
                        j.HasIndex(new[] { "AccountJournalId", "AccountReconcileModelTemplateId" }, "account_journal_account_recon_account_journal_id_account_r_idx1");
                        j.IndexerProperty<int>("AccountReconcileModelTemplateId").HasColumnName("account_reconcile_model_template_id");
                        j.IndexerProperty<int>("AccountJournalId").HasColumnName("account_journal_id");
                    });

            entity.HasMany(d => d.ResPartnerCategories).WithMany(p => p.AccountReconcileModelTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelTemplateResPartnerCategoryRel",
                    r => r.HasOne<ResPartnerCategory>().WithMany()
                        .HasForeignKey("ResPartnerCategoryId")
                        .HasConstraintName("account_reconcile_model_template_r_res_partner_category_id_fkey"),
                    l => l.HasOne<AccountReconcileModelTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .HasConstraintName("account_reconcile_model_temp_account_reconcile_model_temp_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelTemplateId", "ResPartnerCategoryId").HasName("account_reconcile_model_template_res_partner_category_rel_pkey");
                        j.ToTable("account_reconcile_model_template_res_partner_category_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model_template AND res_partner_category"));
                        j.HasIndex(new[] { "ResPartnerCategoryId", "AccountReconcileModelTemplateId" }, "account_reconcile_model_templ_res_partner_category_id_accou_idx");
                        j.IndexerProperty<int>("AccountReconcileModelTemplateId").HasColumnName("account_reconcile_model_template_id");
                        j.IndexerProperty<int>("ResPartnerCategoryId").HasColumnName("res_partner_category_id");
                    });

            entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountReconcileModelTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelTemplateResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_reconcile_model_template_res_partne_res_partner_id_fkey"),
                    l => l.HasOne<AccountReconcileModelTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .HasConstraintName("account_reconcile_model_templ_account_reconcile_model_temp_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelTemplateId", "ResPartnerId").HasName("account_reconcile_model_template_res_partner_rel_pkey");
                        j.ToTable("account_reconcile_model_template_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN account_reconcile_model_template AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "AccountReconcileModelTemplateId" }, "account_reconcile_model_templ_res_partner_id_account_reconc_idx");
                        j.IndexerProperty<int>("AccountReconcileModelTemplateId").HasColumnName("account_reconcile_model_template_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<AccountReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_pkey");

            entity.ToTable("account_report", tb => tb.HasComment("Accounting Report"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AvailabilityCondition)
                .HasComment("Availability")
                .HasColumnType("character varying")
                .HasColumnName("availability_condition");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Chart of Accounts")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultOpeningDateFilter)
                .HasComment("Default Opening")
                .HasColumnType("character varying")
                .HasColumnName("default_opening_date_filter");
            entity.Property(e => e.FilterAccountType)
                .HasComment("Account Types")
                .HasColumnName("filter_account_type");
            entity.Property(e => e.FilterAnalytic)
                .HasComment("Analytic Filter")
                .HasColumnName("filter_analytic");
            entity.Property(e => e.FilterDateRange)
                .HasComment("Date Range")
                .HasColumnName("filter_date_range");
            entity.Property(e => e.FilterFiscalPosition)
                .HasComment("Filter Multivat")
                .HasColumnName("filter_fiscal_position");
            entity.Property(e => e.FilterGrowthComparison)
                .HasComment("Growth Comparison")
                .HasColumnName("filter_growth_comparison");
            entity.Property(e => e.FilterHierarchy)
                .HasComment("Account Groups")
                .HasColumnType("character varying")
                .HasColumnName("filter_hierarchy");
            entity.Property(e => e.FilterJournals)
                .HasComment("Journals")
                .HasColumnName("filter_journals");
            entity.Property(e => e.FilterMultiCompany)
                .HasComment("Multi-Company")
                .HasColumnType("character varying")
                .HasColumnName("filter_multi_company");
            entity.Property(e => e.FilterPartner)
                .HasComment("Partners")
                .HasColumnName("filter_partner");
            entity.Property(e => e.FilterPeriodComparison)
                .HasComment("Period Comparison")
                .HasColumnName("filter_period_comparison");
            entity.Property(e => e.FilterShowDraft)
                .HasComment("Draft Entries")
                .HasColumnName("filter_show_draft");
            entity.Property(e => e.FilterUnfoldAll)
                .HasComment("Unfold All")
                .HasColumnName("filter_unfold_all");
            entity.Property(e => e.FilterUnreconciled)
                .HasComment("Unreconciled Entries")
                .HasColumnName("filter_unreconciled");
            entity.Property(e => e.LoadMoreLimit)
                .HasComment("Load More Limit")
                .HasColumnName("load_more_limit");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OnlyTaxExigible)
                .HasComment("Only Tax Exigible Lines")
                .HasColumnName("only_tax_exigible");
            entity.Property(e => e.RootReportId)
                .HasComment("Root Report")
                .HasColumnName("root_report_id");
            entity.Property(e => e.SearchBar)
                .HasComment("Search Bar")
                .HasColumnName("search_bar");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountReports)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_chart_template_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.AccountReports)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_create_uid_fkey");

            entity.HasOne(d => d.RootReport).WithMany(p => p.InverseRootReport)
                .HasForeignKey(d => d.RootReportId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_root_report_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportColumn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_column_pkey");

            entity.ToTable("account_report_column", tb => tb.HasComment("Accounting Report Column"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BlankIfZero)
                .HasComment("Blank if Zero")
                .HasColumnName("blank_if_zero");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomAuditActionId)
                .HasComment("Custom Audit Action")
                .HasColumnName("custom_audit_action_id");
            entity.Property(e => e.ExpressionLabel)
                .HasComment("Expression Label")
                .HasColumnType("character varying")
                .HasColumnName("expression_label");
            entity.Property(e => e.FigureType)
                .HasComment("Figure Type")
                .HasColumnType("character varying")
                .HasColumnName("figure_type");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ReportId)
                .HasComment("Report")
                .HasColumnName("report_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Sortable)
                .HasComment("Sortable")
                .HasColumnName("sortable");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReportColumnCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_create_uid_fkey");

            entity.HasOne(d => d.CustomAuditAction).WithMany(p => p.AccountReportColumns)
                .HasForeignKey(d => d.CustomAuditActionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_custom_audit_action_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.AccountReportColumns)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_report_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReportColumnWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportExpression>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_expression_pkey");

            entity.ToTable("account_report_expression", tb => tb.HasComment("Accounting Report Expression"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Auditable)
                .HasComment("Auditable")
                .HasColumnName("auditable");
            entity.Property(e => e.BlankIfZero)
                .HasComment("Blank if Zero")
                .HasColumnName("blank_if_zero");
            entity.Property(e => e.CarryoverTarget)
                .HasComment("Carry Over To")
                .HasColumnType("character varying")
                .HasColumnName("carryover_target");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateScope)
                .HasComment("Date Scope")
                .HasColumnType("character varying")
                .HasColumnName("date_scope");
            entity.Property(e => e.Engine)
                .HasComment("Computation Engine")
                .HasColumnType("character varying")
                .HasColumnName("engine");
            entity.Property(e => e.FigureType)
                .HasComment("Figure Type")
                .HasColumnType("character varying")
                .HasColumnName("figure_type");
            entity.Property(e => e.Formula)
                .HasComment("Formula")
                .HasColumnType("character varying")
                .HasColumnName("formula");
            entity.Property(e => e.GreenOnPositive)
                .HasComment("Is Growth Good when Positive")
                .HasColumnName("green_on_positive");
            entity.Property(e => e.Label)
                .HasComment("Label")
                .HasColumnType("character varying")
                .HasColumnName("label");
            entity.Property(e => e.ReportLineId)
                .HasComment("Report Line")
                .HasColumnName("report_line_id");
            entity.Property(e => e.Subformula)
                .HasComment("Subformula")
                .HasColumnType("character varying")
                .HasColumnName("subformula");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReportExpressionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_expression_create_uid_fkey");

            entity.HasOne(d => d.ReportLine).WithMany(p => p.AccountReportExpressions)
                .HasForeignKey(d => d.ReportLineId)
                .HasConstraintName("account_report_expression_report_line_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReportExpressionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_expression_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportExternalValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_external_value_pkey");

            entity.ToTable("account_report_external_value", tb => tb.HasComment("Accounting Report External Value"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CarryoverOriginExpressionLabel)
                .HasComment("Origin Expression Label")
                .HasColumnType("character varying")
                .HasColumnName("carryover_origin_expression_label");
            entity.Property(e => e.CarryoverOriginReportLineId)
                .HasComment("Origin Line")
                .HasColumnName("carryover_origin_report_line_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.ForeignVatFiscalPositionId)
                .HasComment("Fiscal position")
                .HasColumnName("foreign_vat_fiscal_position_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TargetReportExpressionId)
                .HasComment("Target Expression")
                .HasColumnName("target_report_expression_id");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CarryoverOriginReportLine).WithMany(p => p.AccountReportExternalValues)
                .HasForeignKey(d => d.CarryoverOriginReportLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_carryover_origin_report_line_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountReportExternalValues)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_report_external_value_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReportExternalValueCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_create_uid_fkey");

            entity.HasOne(d => d.ForeignVatFiscalPosition).WithMany(p => p.AccountReportExternalValues)
                .HasForeignKey(d => d.ForeignVatFiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_foreign_vat_fiscal_position__fkey");

            entity.HasOne(d => d.TargetReportExpression).WithMany(p => p.AccountReportExternalValues)
                .HasForeignKey(d => d.TargetReportExpressionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_report_external_value_target_report_expression_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReportExternalValueWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_line_pkey");

            entity.ToTable("account_report_line", tb => tb.HasComment("Accounting Report Line"));

            entity.HasIndex(e => e.Code, "account_report_line_code_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionId)
                .HasComment("Action")
                .HasColumnName("action_id");
            entity.Property(e => e.Code)
                .HasComment("Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Foldable)
                .HasComment("Foldable")
                .HasColumnName("foldable");
            entity.Property(e => e.Groupby)
                .HasComment("Group By")
                .HasColumnType("character varying")
                .HasColumnName("groupby");
            entity.Property(e => e.HideIfZero)
                .HasComment("Hide if Zero")
                .HasColumnName("hide_if_zero");
            entity.Property(e => e.HierarchyLevel)
                .HasComment("Level")
                .HasColumnName("hierarchy_level");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Line")
                .HasColumnName("parent_id");
            entity.Property(e => e.PrintOnNewPage)
                .HasComment("Print On New Page")
                .HasColumnName("print_on_new_page");
            entity.Property(e => e.ReportId)
                .HasComment("Parent Report")
                .HasColumnName("report_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountReportLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_line_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_line_parent_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.AccountReportLines)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("account_report_line_report_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountReportLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountResequenceWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_resequence_wizard_pkey");

            entity.ToTable("account_resequence_wizard", tb => tb.HasComment("Remake the sequence of Journal Entries."));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EndDate)
                .HasComment("End Date")
                .HasColumnName("end_date");
            entity.Property(e => e.FirstDate)
                .HasComment("First Date")
                .HasColumnName("first_date");
            entity.Property(e => e.FirstName)
                .HasComment("First New Sequence")
                .HasColumnType("character varying")
                .HasColumnName("first_name");
            entity.Property(e => e.Ordering)
                .HasComment("Ordering")
                .HasColumnType("character varying")
                .HasColumnName("ordering");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountResequenceWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_resequence_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountResequenceWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_resequence_wizard_write_uid_fkey");

            entity.HasMany(d => d.AccountMoves).WithMany(p => p.AccountResequenceWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveAccountResequenceWizardRel",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("AccountMoveId")
                        .HasConstraintName("account_move_account_resequence_wizard_rel_account_move_id_fkey"),
                    l => l.HasOne<AccountResequenceWizard>().WithMany()
                        .HasForeignKey("AccountResequenceWizardId")
                        .HasConstraintName("account_move_account_resequen_account_resequence_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountResequenceWizardId", "AccountMoveId").HasName("account_move_account_resequence_wizard_rel_pkey");
                        j.ToTable("account_move_account_resequence_wizard_rel", tb => tb.HasComment("RELATION BETWEEN account_resequence_wizard AND account_move"));
                        j.HasIndex(new[] { "AccountMoveId", "AccountResequenceWizardId" }, "account_move_account_resequen_account_move_id_account_reseq_idx");
                        j.IndexerProperty<int>("AccountResequenceWizardId").HasColumnName("account_resequence_wizard_id");
                        j.IndexerProperty<int>("AccountMoveId").HasColumnName("account_move_id");
                    });
        });

        modelBuilder.Entity<AccountRoot>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("account_root");

            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
        });

        modelBuilder.Entity<AccountSetupBankManualConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_setup_bank_manual_config_pkey");

            entity.ToTable("account_setup_bank_manual_config", tb => tb.HasComment("Bank setup manual config"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.NewJournalName)
                .HasComment("New Journal Name")
                .HasColumnType("character varying")
                .HasColumnName("new_journal_name");
            entity.Property(e => e.NumJournalsWithoutAccount)
                .HasComment("Num Journals Without Account")
                .HasColumnName("num_journals_without_account");
            entity.Property(e => e.ResPartnerBankId)
                .HasComment("Res Partner Bank")
                .HasColumnName("res_partner_bank_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountSetupBankManualConfigCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_setup_bank_manual_config_create_uid_fkey");

            entity.HasOne(d => d.ResPartnerBank).WithMany(p => p.AccountSetupBankManualConfigs)
                .HasForeignKey(d => d.ResPartnerBankId)
                .HasConstraintName("account_setup_bank_manual_config_res_partner_bank_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountSetupBankManualConfigWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_setup_bank_manual_config_write_uid_fkey");
        });

        modelBuilder.Entity<AccountTax>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_pkey");

            entity.ToTable("account_tax", tb => tb.HasComment("Tax"));

            entity.HasIndex(e => new { e.Name, e.CompanyId, e.TypeTaxUse, e.TaxScope }, "account_tax_name_company_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.AmountType)
                .HasComment("Tax Computation")
                .HasColumnType("character varying")
                .HasColumnName("amount_type");
            entity.Property(e => e.Analytic)
                .HasComment("Include in Analytic Cost")
                .HasColumnName("analytic");
            entity.Property(e => e.CashBasisTransitionAccountId)
                .HasComment("Cash Basis Transition Account")
                .HasColumnName("cash_basis_transition_account_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Label on Invoices")
                .HasColumnType("character varying")
                .HasColumnName("description");
            entity.Property(e => e.IncludeBaseAmount)
                .HasComment("Affect Base of Subsequent Taxes")
                .HasColumnName("include_base_amount");
            entity.Property(e => e.IsBaseAffected)
                .HasComment("Base Affected by Previous Taxes")
                .HasColumnName("is_base_affected");
            entity.Property(e => e.Name)
                .HasComment("Tax Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PriceInclude)
                .HasComment("Included in Price")
                .HasColumnName("price_include");
            entity.Property(e => e.RealAmount)
                .HasComment("Real amount to apply")
                .HasColumnName("real_amount");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TaxExigibility)
                .HasComment("Tax Exigibility")
                .HasColumnType("character varying")
                .HasColumnName("tax_exigibility");
            entity.Property(e => e.TaxGroupId)
                .HasComment("Tax Group")
                .HasColumnName("tax_group_id");
            entity.Property(e => e.TaxScope)
                .HasComment("Tax Scope")
                .HasColumnType("character varying")
                .HasColumnName("tax_scope");
            entity.Property(e => e.TypeTaxUse)
                .HasComment("Tax Type")
                .HasColumnType("character varying")
                .HasColumnName("type_tax_use");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CashBasisTransitionAccount).WithMany(p => p.AccountTaxes)
                .HasForeignKey(d => d.CashBasisTransitionAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_cash_basis_transition_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountTaxes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_company_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.AccountTaxes)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountTaxCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_create_uid_fkey");

            entity.HasOne(d => d.TaxGroup).WithMany(p => p.AccountTaxes)
                .HasForeignKey(d => d.TaxGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_tax_group_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountTaxWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_write_uid_fkey");

            entity.HasMany(d => d.ChildTaxes).WithMany(p => p.ParentTaxes)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxFiliationRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_filiation_rel_child_tax_fkey"),
                    l => l.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_filiation_rel_parent_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_filiation_rel_pkey");
                        j.ToTable("account_tax_filiation_rel", tb => tb.HasComment("RELATION BETWEEN account_tax AND account_tax"));
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_filiation_rel_child_tax_parent_tax_idx");
                        j.IndexerProperty<int>("ParentTax").HasColumnName("parent_tax");
                        j.IndexerProperty<int>("ChildTax").HasColumnName("child_tax");
                    });

            entity.HasMany(d => d.ParentTaxes).WithMany(p => p.ChildTaxes)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxFiliationRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_filiation_rel_parent_tax_fkey"),
                    l => l.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_filiation_rel_child_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_filiation_rel_pkey");
                        j.ToTable("account_tax_filiation_rel", tb => tb.HasComment("RELATION BETWEEN account_tax AND account_tax"));
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_filiation_rel_child_tax_parent_tax_idx");
                        j.IndexerProperty<int>("ParentTax").HasColumnName("parent_tax");
                        j.IndexerProperty<int>("ChildTax").HasColumnName("child_tax");
                    });
        });

        modelBuilder.Entity<AccountTaxGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_group_pkey");

            entity.ToTable("account_tax_group", tb => tb.HasComment("Tax Group"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PrecedingSubtotal)
                .HasComment("Preceding Subtotal")
                .HasColumnType("character varying")
                .HasColumnName("preceding_subtotal");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Country).WithMany(p => p.AccountTaxGroups)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_group_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountTaxGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_group_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountTaxGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_group_write_uid_fkey");
        });

        modelBuilder.Entity<AccountTaxRepartitionLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_repartition_line_pkey");

            entity.ToTable("account_tax_repartition_line", tb => tb.HasComment("Tax Repartition Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Account")
                .HasColumnName("account_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FactorPercent)
                .HasComment("%")
                .HasColumnName("factor_percent");
            entity.Property(e => e.InvoiceTaxId)
                .HasComment("Invoice Tax")
                .HasColumnName("invoice_tax_id");
            entity.Property(e => e.RefundTaxId)
                .HasComment("Refund Tax")
                .HasColumnName("refund_tax_id");
            entity.Property(e => e.RepartitionType)
                .HasComment("Based On")
                .HasColumnType("character varying")
                .HasColumnName("repartition_type");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.UseInTaxClosing)
                .HasComment("Tax Closing Entry")
                .HasColumnName("use_in_tax_closing");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountTaxRepartitionLines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.AccountTaxRepartitionLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountTaxRepartitionLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_create_uid_fkey");

            entity.HasOne(d => d.InvoiceTax).WithMany(p => p.AccountTaxRepartitionLineInvoiceTaxes)
                .HasForeignKey(d => d.InvoiceTaxId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_tax_repartition_line_invoice_tax_id_fkey");

            entity.HasOne(d => d.RefundTax).WithMany(p => p.AccountTaxRepartitionLineRefundTaxes)
                .HasForeignKey(d => d.RefundTaxId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_tax_repartition_line_refund_tax_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountTaxRepartitionLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_write_uid_fkey");

            entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountTaxRepartitionLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTagAccountTaxRepartitionLineRel",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_account_tag_account_tax_rep_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLine>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineId")
                        .HasConstraintName("account_account_tag_account_t_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineId", "AccountAccountTagId").HasName("account_account_tag_account_tax_repartition_line_rel_pkey");
                        j.ToTable("account_account_tag_account_tax_repartition_line_rel", tb => tb.HasComment("RELATION BETWEEN account_tax_repartition_line AND account_account_tag"));
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountTaxRepartitionLineId" }, "account_account_tag_account_t_account_account_tag_id_accoun_idx");
                        j.IndexerProperty<int>("AccountTaxRepartitionLineId").HasColumnName("account_tax_repartition_line_id");
                        j.IndexerProperty<int>("AccountAccountTagId").HasColumnName("account_account_tag_id");
                    });
        });

        modelBuilder.Entity<AccountTaxRepartitionLineTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_repartition_line_template_pkey");

            entity.ToTable("account_tax_repartition_line_template", tb => tb.HasComment("Tax Repartition Line Template"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Account")
                .HasColumnName("account_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FactorPercent)
                .HasComment("%")
                .HasColumnName("factor_percent");
            entity.Property(e => e.InvoiceTaxId)
                .HasComment("Invoice Tax")
                .HasColumnName("invoice_tax_id");
            entity.Property(e => e.RefundTaxId)
                .HasComment("Refund Tax")
                .HasColumnName("refund_tax_id");
            entity.Property(e => e.RepartitionType)
                .HasComment("Based On")
                .HasColumnType("character varying")
                .HasColumnName("repartition_type");
            entity.Property(e => e.UseInTaxClosing)
                .HasComment("Tax Closing Entry")
                .HasColumnName("use_in_tax_closing");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountTaxRepartitionLineTemplates)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_account_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountTaxRepartitionLineTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_create_uid_fkey");

            entity.HasOne(d => d.InvoiceTax).WithMany(p => p.AccountTaxRepartitionLineTemplateInvoiceTaxes)
                .HasForeignKey(d => d.InvoiceTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_invoice_tax_id_fkey");

            entity.HasOne(d => d.RefundTax).WithMany(p => p.AccountTaxRepartitionLineTemplateRefundTaxes)
                .HasForeignKey(d => d.RefundTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_refund_tax_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountTaxRepartitionLineTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_write_uid_fkey");

            entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountTaxRepartitionLineTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxRepartitionFinancialTag",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_tax_repartition_financial_t_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLineTemplate>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .HasConstraintName("account_tax_repartition_finan_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineTemplateId", "AccountAccountTagId").HasName("account_tax_repartition_financial_tags_pkey");
                        j.ToTable("account_tax_repartition_financial_tags", tb => tb.HasComment("RELATION BETWEEN account_tax_repartition_line_template AND account_account_tag"));
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_repartition_finan_account_account_tag_id_accoun_idx");
                        j.IndexerProperty<int>("AccountTaxRepartitionLineTemplateId").HasColumnName("account_tax_repartition_line_template_id");
                        j.IndexerProperty<int>("AccountAccountTagId").HasColumnName("account_account_tag_id");
                    });

            entity.HasMany(d => d.AccountReportExpressions).WithMany(p => p.AccountTaxRepartitionLineTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxRepTemplateMinu",
                    r => r.HasOne<AccountReportExpression>().WithMany()
                        .HasForeignKey("AccountReportExpressionId")
                        .HasConstraintName("account_tax_rep_template_minu_account_report_expression_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLineTemplate>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .HasConstraintName("account_tax_rep_template_minu_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineTemplateId", "AccountReportExpressionId").HasName("account_tax_rep_template_minus_pkey");
                        j.ToTable("account_tax_rep_template_minus", tb => tb.HasComment("RELATION BETWEEN account_tax_repartition_line_template AND account_report_expression"));
                        j.HasIndex(new[] { "AccountReportExpressionId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_rep_template_minu_account_report_expression_id__idx");
                        j.IndexerProperty<int>("AccountTaxRepartitionLineTemplateId").HasColumnName("account_tax_repartition_line_template_id");
                        j.IndexerProperty<int>("AccountReportExpressionId").HasColumnName("account_report_expression_id");
                    });

            entity.HasMany(d => d.AccountReportExpressionsNavigation).WithMany(p => p.AccountTaxRepartitionLineTemplatesNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxRepTemplatePlu",
                    r => r.HasOne<AccountReportExpression>().WithMany()
                        .HasForeignKey("AccountReportExpressionId")
                        .HasConstraintName("account_tax_rep_template_plus_account_report_expression_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLineTemplate>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .HasConstraintName("account_tax_rep_template_plus_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineTemplateId", "AccountReportExpressionId").HasName("account_tax_rep_template_plus_pkey");
                        j.ToTable("account_tax_rep_template_plus", tb => tb.HasComment("RELATION BETWEEN account_tax_repartition_line_template AND account_report_expression"));
                        j.HasIndex(new[] { "AccountReportExpressionId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_rep_template_plus_account_report_expression_id__idx");
                        j.IndexerProperty<int>("AccountTaxRepartitionLineTemplateId").HasColumnName("account_tax_repartition_line_template_id");
                        j.IndexerProperty<int>("AccountReportExpressionId").HasColumnName("account_report_expression_id");
                    });
        });

        modelBuilder.Entity<AccountTaxTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_template_pkey");

            entity.ToTable("account_tax_template", tb => tb.HasComment("Templates for Taxes"));

            entity.HasIndex(e => new { e.Name, e.TypeTaxUse, e.TaxScope, e.ChartTemplateId }, "account_tax_template_name_company_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.AmountType)
                .HasComment("Tax Computation")
                .HasColumnType("character varying")
                .HasColumnName("amount_type");
            entity.Property(e => e.Analytic)
                .HasComment("Analytic Cost")
                .HasColumnName("analytic");
            entity.Property(e => e.CashBasisTransitionAccountId)
                .HasComment("Cash Basis Transition Account")
                .HasColumnName("cash_basis_transition_account_id");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Chart Template")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Display on Invoices")
                .HasColumnType("character varying")
                .HasColumnName("description");
            entity.Property(e => e.IncludeBaseAmount)
                .HasComment("Affect Subsequent Taxes")
                .HasColumnName("include_base_amount");
            entity.Property(e => e.IsBaseAffected)
                .HasComment("Base Affected by Previous Taxes")
                .HasColumnName("is_base_affected");
            entity.Property(e => e.Name)
                .HasComment("Tax Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PriceInclude)
                .HasComment("Included in Price")
                .HasColumnName("price_include");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TaxExigibility)
                .HasComment("Tax Due")
                .HasColumnType("character varying")
                .HasColumnName("tax_exigibility");
            entity.Property(e => e.TaxGroupId)
                .HasComment("Tax Group")
                .HasColumnName("tax_group_id");
            entity.Property(e => e.TaxScope)
                .HasComment("Tax Scope")
                .HasColumnType("character varying")
                .HasColumnName("tax_scope");
            entity.Property(e => e.TypeTaxUse)
                .HasComment("Tax Type")
                .HasColumnType("character varying")
                .HasColumnName("type_tax_use");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CashBasisTransitionAccount).WithMany(p => p.AccountTaxTemplates)
                .HasForeignKey(d => d.CashBasisTransitionAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_cash_basis_transition_account_id_fkey");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountTaxTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_template_chart_template_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountTaxTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_create_uid_fkey");

            entity.HasOne(d => d.TaxGroup).WithMany(p => p.AccountTaxTemplates)
                .HasForeignKey(d => d.TaxGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_tax_group_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountTaxTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_write_uid_fkey");

            entity.HasMany(d => d.ChildTaxes).WithMany(p => p.ParentTaxes)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxTemplateFiliationRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_template_filiation_rel_child_tax_fkey"),
                    l => l.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_template_filiation_rel_parent_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_template_filiation_rel_pkey");
                        j.ToTable("account_tax_template_filiation_rel", tb => tb.HasComment("RELATION BETWEEN account_tax_template AND account_tax_template"));
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_template_filiation_rel_child_tax_parent_tax_idx");
                        j.IndexerProperty<int>("ParentTax").HasColumnName("parent_tax");
                        j.IndexerProperty<int>("ChildTax").HasColumnName("child_tax");
                    });

            entity.HasMany(d => d.ParentTaxes).WithMany(p => p.ChildTaxes)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxTemplateFiliationRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_template_filiation_rel_parent_tax_fkey"),
                    l => l.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_template_filiation_rel_child_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_template_filiation_rel_pkey");
                        j.ToTable("account_tax_template_filiation_rel", tb => tb.HasComment("RELATION BETWEEN account_tax_template AND account_tax_template"));
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_template_filiation_rel_child_tax_parent_tax_idx");
                        j.IndexerProperty<int>("ParentTax").HasColumnName("parent_tax");
                        j.IndexerProperty<int>("ChildTax").HasColumnName("child_tax");
                    });
        });

        modelBuilder.Entity<AccountTourUploadBill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tour_upload_bill_pkey");

            entity.ToTable("account_tour_upload_bill", tb => tb.HasComment("Account tour upload bill"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Selection)
                .HasComment("Selection")
                .HasColumnType("character varying")
                .HasColumnName("selection");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountTourUploadBillCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountTourUploadBillWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_write_uid_fkey");

            entity.HasMany(d => d.IrAttachments).WithMany(p => p.AccountTourUploadBills)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTourUploadBillIrAttachmentsRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .HasConstraintName("account_tour_upload_bill_ir_attachments_r_ir_attachment_id_fkey"),
                    l => l.HasOne<AccountTourUploadBill>().WithMany()
                        .HasForeignKey("AccountTourUploadBillId")
                        .HasConstraintName("account_tour_upload_bill_ir_at_account_tour_upload_bill_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTourUploadBillId", "IrAttachmentId").HasName("account_tour_upload_bill_ir_attachments_rel_pkey");
                        j.ToTable("account_tour_upload_bill_ir_attachments_rel", tb => tb.HasComment("RELATION BETWEEN account_tour_upload_bill AND ir_attachment"));
                        j.HasIndex(new[] { "IrAttachmentId", "AccountTourUploadBillId" }, "account_tour_upload_bill_ir_a_ir_attachment_id_account_tour_idx");
                        j.IndexerProperty<int>("AccountTourUploadBillId").HasColumnName("account_tour_upload_bill_id");
                        j.IndexerProperty<int>("IrAttachmentId").HasColumnName("ir_attachment_id");
                    });
        });

        modelBuilder.Entity<AccountTourUploadBillEmailConfirm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tour_upload_bill_email_confirm_pkey");

            entity.ToTable("account_tour_upload_bill_email_confirm", tb => tb.HasComment("Account tour upload bill email confirm"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmailAlias)
                .HasComment("Email Alias")
                .HasColumnType("character varying")
                .HasColumnName("email_alias");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountTourUploadBillEmailConfirmCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_email_confirm_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountTourUploadBillEmailConfirmWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_email_confirm_write_uid_fkey");
        });

        modelBuilder.Entity<AccountUnreconcile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_unreconcile_pkey");

            entity.ToTable("account_unreconcile", tb => tb.HasComment("Account Unreconcile"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AccountUnreconcileCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_unreconcile_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AccountUnreconcileWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_unreconcile_write_uid_fkey");
        });

        modelBuilder.Entity<ApplicantGetRefuseReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("applicant_get_refuse_reason_pkey");

            entity.ToTable("applicant_get_refuse_reason", tb => tb.HasComment("Get Refuse Reason"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.RefuseReasonId)
                .HasComment("Refuse Reason")
                .HasColumnName("refuse_reason_id");
            entity.Property(e => e.SendMail)
                .HasComment("Send Email")
                .HasColumnName("send_mail");
            entity.Property(e => e.TemplateId)
                .HasComment("Email Template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ApplicantGetRefuseReasonCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_get_refuse_reason_create_uid_fkey");

            entity.HasOne(d => d.RefuseReason).WithMany(p => p.ApplicantGetRefuseReasons)
                .HasForeignKey(d => d.RefuseReasonId)
                .HasConstraintName("applicant_get_refuse_reason_refuse_reason_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.ApplicantGetRefuseReasons)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_get_refuse_reason_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ApplicantGetRefuseReasonWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_get_refuse_reason_write_uid_fkey");

            entity.HasMany(d => d.HrApplicants).WithMany(p => p.ApplicantGetRefuseReasons)
                .UsingEntity<Dictionary<string, object>>(
                    "ApplicantGetRefuseReasonHrApplicantRel",
                    r => r.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("applicant_get_refuse_reason_hr_applicant_r_hr_applicant_id_fkey"),
                    l => l.HasOne<ApplicantGetRefuseReason>().WithMany()
                        .HasForeignKey("ApplicantGetRefuseReasonId")
                        .HasConstraintName("applicant_get_refuse_reason_h_applicant_get_refuse_reason__fkey"),
                    j =>
                    {
                        j.HasKey("ApplicantGetRefuseReasonId", "HrApplicantId").HasName("applicant_get_refuse_reason_hr_applicant_rel_pkey");
                        j.ToTable("applicant_get_refuse_reason_hr_applicant_rel", tb => tb.HasComment("RELATION BETWEEN applicant_get_refuse_reason AND hr_applicant"));
                        j.HasIndex(new[] { "HrApplicantId", "ApplicantGetRefuseReasonId" }, "applicant_get_refuse_reason_h_hr_applicant_id_applicant_get_idx");
                        j.IndexerProperty<int>("ApplicantGetRefuseReasonId").HasColumnName("applicant_get_refuse_reason_id");
                        j.IndexerProperty<int>("HrApplicantId").HasColumnName("hr_applicant_id");
                    });
        });

        modelBuilder.Entity<ApplicantSendMail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("applicant_send_mail_pkey");

            entity.ToTable("applicant_send_mail", tb => tb.HasComment("Send mails to applicants"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthorId)
                .HasComment("Author")
                .HasColumnName("author_id");
            entity.Property(e => e.Body)
                .HasComment("Contents")
                .HasColumnName("body");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.TemplateId)
                .HasComment("Mail Template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Author).WithMany(p => p.ApplicantSendMails)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("applicant_send_mail_author_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ApplicantSendMailCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_send_mail_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.ApplicantSendMails)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_send_mail_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ApplicantSendMailWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_send_mail_write_uid_fkey");

            entity.HasMany(d => d.HrApplicants).WithMany(p => p.ApplicantSendMails)
                .UsingEntity<Dictionary<string, object>>(
                    "ApplicantSendMailHrApplicantRel",
                    r => r.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("applicant_send_mail_hr_applicant_rel_hr_applicant_id_fkey"),
                    l => l.HasOne<ApplicantSendMail>().WithMany()
                        .HasForeignKey("ApplicantSendMailId")
                        .HasConstraintName("applicant_send_mail_hr_applicant_re_applicant_send_mail_id_fkey"),
                    j =>
                    {
                        j.HasKey("ApplicantSendMailId", "HrApplicantId").HasName("applicant_send_mail_hr_applicant_rel_pkey");
                        j.ToTable("applicant_send_mail_hr_applicant_rel", tb => tb.HasComment("RELATION BETWEEN applicant_send_mail AND hr_applicant"));
                        j.HasIndex(new[] { "HrApplicantId", "ApplicantSendMailId" }, "applicant_send_mail_hr_applic_hr_applicant_id_applicant_sen_idx");
                        j.IndexerProperty<int>("ApplicantSendMailId").HasColumnName("applicant_send_mail_id");
                        j.IndexerProperty<int>("HrApplicantId").HasColumnName("hr_applicant_id");
                    });
        });

        modelBuilder.Entity<AuthTotpDevice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("auth_totp_device_pkey");

            entity.ToTable("auth_totp_device");

            entity.HasIndex(e => new { e.UserId, e.Index }, "auth_totp_device_user_id_index_idx");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("timezone('utc'::text, now())")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Index)
                .HasMaxLength(8)
                .HasColumnName("index");
            entity.Property(e => e.Key)
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Scope)
                .HasColumnType("character varying")
                .HasColumnName("scope");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.AuthTotpDevices)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_totp_device_user_id_fkey");
        });

        modelBuilder.Entity<AuthTotpWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("auth_totp_wizard_pkey");

            entity.ToTable("auth_totp_wizard", tb => tb.HasComment("2-Factor Setup Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(7)
                .HasComment("Verification Code")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Qrcode)
                .HasComment("Qrcode")
                .HasColumnName("qrcode");
            entity.Property(e => e.Secret)
                .HasComment("Secret")
                .HasColumnType("character varying")
                .HasColumnName("secret");
            entity.Property(e => e.Url)
                .HasComment("Url")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.AuthTotpWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("auth_totp_wizard_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.AuthTotpWizardUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("auth_totp_wizard_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.AuthTotpWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("auth_totp_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<BarcodeNomenclature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("barcode_nomenclature_pkey");

            entity.ToTable("barcode_nomenclature", tb => tb.HasComment("Barcode Nomenclature"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Gs1SeparatorFnc1)
                .HasComment("FNC1 Separator")
                .HasColumnType("character varying")
                .HasColumnName("gs1_separator_fnc1");
            entity.Property(e => e.IsGs1Nomenclature)
                .HasComment("Is GS1 Nomenclature")
                .HasColumnName("is_gs1_nomenclature");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasComment("Barcode Nomenclature")
                .HasColumnName("name");
            entity.Property(e => e.UpcEanConv)
                .HasComment("UPC/EAN Conversion")
                .HasColumnType("character varying")
                .HasColumnName("upc_ean_conv");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BarcodeNomenclatureCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_nomenclature_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BarcodeNomenclatureWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_nomenclature_write_uid_fkey");
        });

        modelBuilder.Entity<BarcodeRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("barcode_rule_pkey");

            entity.ToTable("barcode_rule", tb => tb.HasComment("Barcode Rule"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Alias)
                .HasComment("Alias")
                .HasColumnType("character varying")
                .HasColumnName("alias");
            entity.Property(e => e.AssociatedUomId)
                .HasComment("Associated Uom")
                .HasColumnName("associated_uom_id");
            entity.Property(e => e.BarcodeNomenclatureId)
                .HasComment("Barcode Nomenclature")
                .HasColumnName("barcode_nomenclature_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Encoding)
                .HasComment("Encoding")
                .HasColumnType("character varying")
                .HasColumnName("encoding");
            entity.Property(e => e.Gs1ContentType)
                .HasComment("GS1 Content Type")
                .HasColumnType("character varying")
                .HasColumnName("gs1_content_type");
            entity.Property(e => e.Gs1DecimalUsage)
                .HasComment("Decimal")
                .HasColumnName("gs1_decimal_usage");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasComment("Rule Name")
                .HasColumnName("name");
            entity.Property(e => e.Pattern)
                .HasComment("Barcode Pattern")
                .HasColumnType("character varying")
                .HasColumnName("pattern");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AssociatedUom).WithMany(p => p.BarcodeRules)
                .HasForeignKey(d => d.AssociatedUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_associated_uom_id_fkey");

            entity.HasOne(d => d.BarcodeNomenclature).WithMany(p => p.BarcodeRules)
                .HasForeignKey(d => d.BarcodeNomenclatureId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_barcode_nomenclature_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BarcodeRuleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BarcodeRuleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_write_uid_fkey");
        });

        modelBuilder.Entity<BaseDocumentLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_document_layout_pkey");

            entity.ToTable("base_document_layout", tb => tb.HasComment("Company Document Layout"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ReportLayoutId)
                .HasComment("Report Layout")
                .HasColumnName("report_layout_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.BaseDocumentLayouts)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("base_document_layout_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseDocumentLayoutCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_document_layout_create_uid_fkey");

            entity.HasOne(d => d.ReportLayout).WithMany(p => p.BaseDocumentLayouts)
                .HasForeignKey(d => d.ReportLayoutId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_document_layout_report_layout_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseDocumentLayoutWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_document_layout_write_uid_fkey");
        });

        modelBuilder.Entity<BaseEnableProfilingWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_enable_profiling_wizard_pkey");

            entity.ToTable("base_enable_profiling_wizard", tb => tb.HasComment("Enable profiling for some time"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Duration)
                .HasComment("Enable profiling for")
                .HasColumnType("character varying")
                .HasColumnName("duration");
            entity.Property(e => e.Expiration)
                .HasComment("Enable profiling until")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expiration");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseEnableProfilingWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_enable_profiling_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseEnableProfilingWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_enable_profiling_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_import_pkey");

            entity.ToTable("base_import_import", tb => tb.HasComment("Base Import"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.File)
                .HasComment("File")
                .HasColumnName("file");
            entity.Property(e => e.FileName)
                .HasComment("File Name")
                .HasColumnType("character varying")
                .HasColumnName("file_name");
            entity.Property(e => e.FileType)
                .HasComment("File Type")
                .HasColumnType("character varying")
                .HasColumnName("file_type");
            entity.Property(e => e.ResModel)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportImportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_import_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportImportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_import_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_mapping_pkey");

            entity.ToTable("base_import_mapping", tb => tb.HasComment("Base Import Mapping"));

            entity.HasIndex(e => e.ResModel, "base_import_mapping_res_model_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ColumnName)
                .HasComment("Column Name")
                .HasColumnType("character varying")
                .HasColumnName("column_name");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FieldName)
                .HasComment("Field Name")
                .HasColumnType("character varying")
                .HasColumnName("field_name");
            entity.Property(e => e.ResModel)
                .HasComment("Res Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportMappingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_mapping_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportMappingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_mapping_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsChar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_pkey");

            entity.ToTable("base_import_tests_models_char", tb => tb.HasComment("Tests : Base Import Model, Character"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsCharCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsCharWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharNoreadonly>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_noreadonly_pkey");

            entity.ToTable("base_import_tests_models_char_noreadonly", tb => tb.HasComment("Tests : Base Import Model, Character No readonly"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsCharNoreadonlyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_noreadonly_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsCharNoreadonlyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_noreadonly_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharReadonly>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_readonly_pkey");

            entity.ToTable("base_import_tests_models_char_readonly", tb => tb.HasComment("Tests : Base Import Model, Character readonly"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsCharReadonlyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_readonly_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsCharReadonlyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_readonly_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharRequired>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_required_pkey");

            entity.ToTable("base_import_tests_models_char_required", tb => tb.HasComment("Tests : Base Import Model, Character required"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsCharRequiredCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_required_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsCharRequiredWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_required_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_states_pkey");

            entity.ToTable("base_import_tests_models_char_states", tb => tb.HasComment("Tests : Base Import Model, Character states"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsCharStateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_states_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsCharStateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_states_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharStillreadonly>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_stillreadonly_pkey");

            entity.ToTable("base_import_tests_models_char_stillreadonly", tb => tb.HasComment("Tests : Base Import Model, Character still readonly"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsCharStillreadonlyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_stillreadonly_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsCharStillreadonlyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_stillreadonly_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsComplex>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_complex_pkey");

            entity.ToTable("base_import_tests_models_complex", tb => tb.HasComment("Tests: Base Import Model Complex"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.C)
                .HasComment("C")
                .HasColumnType("character varying")
                .HasColumnName("c");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.D)
                .HasComment("D")
                .HasColumnName("d");
            entity.Property(e => e.Dt)
                .HasComment("Dt")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dt");
            entity.Property(e => e.F)
                .HasComment("F")
                .HasColumnName("f");
            entity.Property(e => e.M)
                .HasComment("M")
                .HasColumnName("m");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsComplexCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_complex_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.BaseImportTestsModelsComplexes)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_complex_currency_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsComplexWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_complex_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsFloat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_float_pkey");

            entity.ToTable("base_import_tests_models_float", tb => tb.HasComment("Tests: Base Import Model Float"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.Value2)
                .HasComment("Value2")
                .HasColumnName("value2");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsFloatCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_float_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.BaseImportTestsModelsFloats)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_float_currency_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsFloatWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_float_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2o>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_pkey");

            entity.ToTable("base_import_tests_models_m2o", tb => tb.HasComment("Tests : Base Import Model, Many to One"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsM2oCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_create_uid_fkey");

            entity.HasOne(d => d.ValueNavigation).WithMany(p => p.BaseImportTestsModelsM2os)
                .HasForeignKey(d => d.Value)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_value_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsM2oWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2oRelated>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_related_pkey");

            entity.ToTable("base_import_tests_models_m2o_related", tb => tb.HasComment("Tests : Base Import Model, Many to One related"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsM2oRelatedCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_related_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsM2oRelatedWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_related_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2oRequired>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_required_pkey");

            entity.ToTable("base_import_tests_models_m2o_required", tb => tb.HasComment("Tests : Base Import Model, Many to One required"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsM2oRequiredCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_create_uid_fkey");

            entity.HasOne(d => d.ValueNavigation).WithMany(p => p.BaseImportTestsModelsM2oRequireds)
                .HasForeignKey(d => d.Value)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("base_import_tests_models_m2o_required_value_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsM2oRequiredWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2oRequiredRelated>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_required_related_pkey");

            entity.ToTable("base_import_tests_models_m2o_required_related", tb => tb.HasComment("Tests : Base Import Model, Many to One required related"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsM2oRequiredRelatedCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_related_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsM2oRequiredRelatedWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_related_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsO2m>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_o2m_pkey");

            entity.ToTable("base_import_tests_models_o2m", tb => tb.HasComment("Tests : Base Import Model, One to Many"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsO2mCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsO2mWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsO2mChild>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_o2m_child_pkey");

            entity.ToTable("base_import_tests_models_o2m_child", tb => tb.HasComment("Tests : Base Import Model, One to Many child"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsO2mChildCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_child_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.BaseImportTestsModelsO2mChildren)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_child_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsO2mChildWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_child_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsPreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_preview_pkey");

            entity.ToTable("base_import_tests_models_preview", tb => tb.HasComment("Tests : Base Import Model Preview"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Othervalue)
                .HasComment("Other Variable")
                .HasColumnName("othervalue");
            entity.Property(e => e.Somevalue)
                .HasComment("Some Value")
                .HasColumnName("somevalue");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseImportTestsModelsPreviewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_preview_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseImportTestsModelsPreviewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_preview_write_uid_fkey");
        });

        modelBuilder.Entity<BaseLanguageExport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_language_export_pkey");

            entity.ToTable("base_language_export", tb => tb.HasComment("Language Export"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Data)
                .HasComment("File")
                .HasColumnName("data");
            entity.Property(e => e.Format)
                .HasComment("File Format")
                .HasColumnType("character varying")
                .HasColumnName("format");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.Name)
                .HasComment("File Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseLanguageExportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_export_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseLanguageExportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_export_write_uid_fkey");

            entity.HasMany(d => d.Modules).WithMany(p => p.Wizs)
                .UsingEntity<Dictionary<string, object>>(
                    "RelModulesLangexport",
                    r => r.HasOne<IrModuleModule>().WithMany()
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("rel_modules_langexport_module_id_fkey"),
                    l => l.HasOne<BaseLanguageExport>().WithMany()
                        .HasForeignKey("WizId")
                        .HasConstraintName("rel_modules_langexport_wiz_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizId", "ModuleId").HasName("rel_modules_langexport_pkey");
                        j.ToTable("rel_modules_langexport", tb => tb.HasComment("RELATION BETWEEN base_language_export AND ir_module_module"));
                        j.HasIndex(new[] { "ModuleId", "WizId" }, "rel_modules_langexport_module_id_wiz_id_idx");
                        j.IndexerProperty<int>("WizId").HasColumnName("wiz_id");
                        j.IndexerProperty<int>("ModuleId").HasColumnName("module_id");
                    });
        });

        modelBuilder.Entity<BaseLanguageImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_language_import_pkey");

            entity.ToTable("base_language_import", tb => tb.HasComment("Language Import"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .HasComment("ISO Code")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Data)
                .HasComment("File")
                .HasColumnName("data");
            entity.Property(e => e.Filename)
                .HasComment("File Name")
                .HasColumnType("character varying")
                .HasColumnName("filename");
            entity.Property(e => e.Name)
                .HasComment("Language Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Overwrite)
                .HasComment("Overwrite Existing Terms")
                .HasColumnName("overwrite");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseLanguageImportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_import_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseLanguageImportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_import_write_uid_fkey");
        });

        modelBuilder.Entity<BaseLanguageInstall>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_language_install_pkey");

            entity.ToTable("base_language_install", tb => tb.HasComment("Install Language"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Overwrite)
                .HasComment("Overwrite Existing Terms")
                .HasColumnName("overwrite");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseLanguageInstallCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_install_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseLanguageInstallWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_install_write_uid_fkey");

            entity.HasMany(d => d.Langs).WithMany(p => p.LanguageWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "ResLangInstallRel",
                    r => r.HasOne<ResLang>().WithMany()
                        .HasForeignKey("LangId")
                        .HasConstraintName("res_lang_install_rel_lang_id_fkey"),
                    l => l.HasOne<BaseLanguageInstall>().WithMany()
                        .HasForeignKey("LanguageWizardId")
                        .HasConstraintName("res_lang_install_rel_language_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("LanguageWizardId", "LangId").HasName("res_lang_install_rel_pkey");
                        j.ToTable("res_lang_install_rel", tb => tb.HasComment("RELATION BETWEEN base_language_install AND res_lang"));
                        j.HasIndex(new[] { "LangId", "LanguageWizardId" }, "res_lang_install_rel_lang_id_language_wizard_id_idx");
                        j.IndexerProperty<int>("LanguageWizardId").HasColumnName("language_wizard_id");
                        j.IndexerProperty<int>("LangId").HasColumnName("lang_id");
                    });

            entity.HasMany(d => d.Websites).WithMany(p => p.BaseLanguageInstalls)
                .UsingEntity<Dictionary<string, object>>(
                    "BaseLanguageInstallWebsiteRel",
                    r => r.HasOne<Website>().WithMany()
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("base_language_install_website_rel_website_id_fkey"),
                    l => l.HasOne<BaseLanguageInstall>().WithMany()
                        .HasForeignKey("BaseLanguageInstallId")
                        .HasConstraintName("base_language_install_website_rel_base_language_install_id_fkey"),
                    j =>
                    {
                        j.HasKey("BaseLanguageInstallId", "WebsiteId").HasName("base_language_install_website_rel_pkey");
                        j.ToTable("base_language_install_website_rel", tb => tb.HasComment("RELATION BETWEEN base_language_install AND website"));
                        j.HasIndex(new[] { "WebsiteId", "BaseLanguageInstallId" }, "base_language_install_website_website_id_base_language_inst_idx");
                        j.IndexerProperty<int>("BaseLanguageInstallId").HasColumnName("base_language_install_id");
                        j.IndexerProperty<int>("WebsiteId").HasColumnName("website_id");
                    });
        });

        modelBuilder.Entity<BaseModuleInstallRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_install_request_pkey");

            entity.ToTable("base_module_install_request", tb => tb.HasComment("Module Activation Request"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BodyHtml)
                .HasComment("Body")
                .HasColumnName("body_html");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ModuleId)
                .HasComment("Module")
                .HasColumnName("module_id");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseModuleInstallRequestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_request_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.BaseModuleInstallRequests)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("base_module_install_request_module_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.BaseModuleInstallRequestUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("base_module_install_request_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseModuleInstallRequestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_request_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleInstallReview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_install_review_pkey");

            entity.ToTable("base_module_install_review", tb => tb.HasComment("Module Activation Review"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ModuleId)
                .HasComment("Module")
                .HasColumnName("module_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseModuleInstallReviewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_review_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.BaseModuleInstallReviews)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("base_module_install_review_module_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseModuleInstallReviewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_review_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleUninstall>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_uninstall_pkey");

            entity.ToTable("base_module_uninstall", tb => tb.HasComment("Module Uninstall"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ModuleId)
                .HasComment("Module")
                .HasColumnName("module_id");
            entity.Property(e => e.ShowAll)
                .HasComment("Show All")
                .HasColumnName("show_all");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseModuleUninstallCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_uninstall_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.BaseModuleUninstalls)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("base_module_uninstall_module_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseModuleUninstallWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_uninstall_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_update_pkey");

            entity.ToTable("base_module_update", tb => tb.HasComment("Update Module"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Added)
                .HasComment("Number of modules added")
                .HasColumnName("added");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.Updated)
                .HasComment("Number of modules updated")
                .HasColumnName("updated");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseModuleUpdateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_update_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseModuleUpdateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_update_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleUpgrade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_upgrade_pkey");

            entity.ToTable("base_module_upgrade", tb => tb.HasComment("Upgrade Module"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ModuleInfo)
                .HasComment("Apps to Update")
                .HasColumnName("module_info");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BaseModuleUpgradeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_upgrade_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BaseModuleUpgradeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_upgrade_write_uid_fkey");
        });

        modelBuilder.Entity<BasePartnerMergeAutomaticWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_partner_merge_automatic_wizard_pkey");

            entity.ToTable("base_partner_merge_automatic_wizard", tb => tb.HasComment("Merge Partner Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrentLineId)
                .HasComment("Current Line")
                .HasColumnName("current_line_id");
            entity.Property(e => e.DstPartnerId)
                .HasComment("Destination Contact")
                .HasColumnName("dst_partner_id");
            entity.Property(e => e.ExcludeContact)
                .HasComment("A user associated to the contact")
                .HasColumnName("exclude_contact");
            entity.Property(e => e.ExcludeJournalItem)
                .HasComment("Journal Items associated to the contact")
                .HasColumnName("exclude_journal_item");
            entity.Property(e => e.GroupByEmail)
                .HasComment("Email")
                .HasColumnName("group_by_email");
            entity.Property(e => e.GroupByIsCompany)
                .HasComment("Is Company")
                .HasColumnName("group_by_is_company");
            entity.Property(e => e.GroupByName)
                .HasComment("Name")
                .HasColumnName("group_by_name");
            entity.Property(e => e.GroupByParentId)
                .HasComment("Parent Company")
                .HasColumnName("group_by_parent_id");
            entity.Property(e => e.GroupByVat)
                .HasComment("VAT")
                .HasColumnName("group_by_vat");
            entity.Property(e => e.MaximumGroup)
                .HasComment("Maximum of Group of Contacts")
                .HasColumnName("maximum_group");
            entity.Property(e => e.NumberGroup)
                .HasComment("Group of Contacts")
                .HasColumnName("number_group");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BasePartnerMergeAutomaticWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_create_uid_fkey");

            entity.HasOne(d => d.CurrentLine).WithMany(p => p.BasePartnerMergeAutomaticWizards)
                .HasForeignKey(d => d.CurrentLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_current_line_id_fkey");

            entity.HasOne(d => d.DstPartner).WithMany(p => p.BasePartnerMergeAutomaticWizards)
                .HasForeignKey(d => d.DstPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_dst_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BasePartnerMergeAutomaticWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_write_uid_fkey");

            entity.HasMany(d => d.ResPartners).WithMany(p => p.BasePartnerMergeAutomaticWizardsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "BasePartnerMergeAutomaticWizardResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("base_partner_merge_automatic_wizard_res_par_res_partner_id_fkey"),
                    l => l.HasOne<BasePartnerMergeAutomaticWizard>().WithMany()
                        .HasForeignKey("BasePartnerMergeAutomaticWizardId")
                        .HasConstraintName("base_partner_merge_automatic__base_partner_merge_automatic_fkey"),
                    j =>
                    {
                        j.HasKey("BasePartnerMergeAutomaticWizardId", "ResPartnerId").HasName("base_partner_merge_automatic_wizard_res_partner_rel_pkey");
                        j.ToTable("base_partner_merge_automatic_wizard_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN base_partner_merge_automatic_wizard AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "BasePartnerMergeAutomaticWizardId" }, "base_partner_merge_automatic__res_partner_id_base_partner_m_idx");
                        j.IndexerProperty<int>("BasePartnerMergeAutomaticWizardId").HasColumnName("base_partner_merge_automatic_wizard_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<BasePartnerMergeLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_partner_merge_line_pkey");

            entity.ToTable("base_partner_merge_line", tb => tb.HasComment("Merge Partner Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AggrIds)
                .HasComment("Ids")
                .HasColumnType("character varying")
                .HasColumnName("aggr_ids");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MinId)
                .HasComment("MinID")
                .HasColumnName("min_id");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BasePartnerMergeLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_line_create_uid_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.BasePartnerMergeLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_line_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BasePartnerMergeLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_line_write_uid_fkey");
        });

        modelBuilder.Entity<BusBu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("bus_bus_pkey");

            entity.ToTable("bus_bus", tb => tb.HasComment("Communication Bus"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Channel)
                .HasComment("Channel")
                .HasColumnType("character varying")
                .HasColumnName("channel");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Message)
                .HasComment("Message")
                .HasColumnType("character varying")
                .HasColumnName("message");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.BusBuCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("bus_bus_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.BusBuWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("bus_bus_write_uid_fkey");
        });

        modelBuilder.Entity<BusPresence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("bus_presence_pkey");

            entity.ToTable("bus_presence", tb => tb.HasComment("User Presence"));

            entity.HasIndex(e => e.GuestId, "bus_presence_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => e.UserId, "bus_presence_user_unique")
                .IsUnique()
                .HasFilter("(user_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GuestId)
                .HasComment("Guest")
                .HasColumnName("guest_id");
            entity.Property(e => e.LastPoll)
                .HasComment("Last Poll")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_poll");
            entity.Property(e => e.LastPresence)
                .HasComment("Last Presence")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_presence");
            entity.Property(e => e.Status)
                .HasComment("IM Status")
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserId)
                .HasComment("Users")
                .HasColumnName("user_id");

            entity.HasOne(d => d.Guest).WithOne(p => p.BusPresence)
                .HasForeignKey<BusPresence>(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("bus_presence_guest_id_fkey");

            entity.HasOne(d => d.User).WithOne(p => p.BusPresence)
                .HasForeignKey<BusPresence>(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("bus_presence_user_id_fkey");
        });

        modelBuilder.Entity<CalendarAlarm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_alarm_pkey");

            entity.ToTable("calendar_alarm", tb => tb.HasComment("Event Alarm"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AlarmType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("alarm_type");
            entity.Property(e => e.Body)
                .HasComment("Additional Message")
                .HasColumnName("body");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Duration)
                .HasComment("Remind Before")
                .HasColumnName("duration");
            entity.Property(e => e.DurationMinutes)
                .HasComment("Duration in minutes")
                .HasColumnName("duration_minutes");
            entity.Property(e => e.Interval)
                .HasComment("Unit")
                .HasColumnType("character varying")
                .HasColumnName("interval");
            entity.Property(e => e.MailTemplateId)
                .HasComment("Email Template")
                .HasColumnName("mail_template_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.SmsTemplateId)
                .HasComment("SMS Template")
                .HasColumnName("sms_template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CalendarAlarmCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.CalendarAlarms)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_mail_template_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.CalendarAlarms)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_sms_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CalendarAlarmWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarAttendee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_attendee_pkey");

            entity.ToTable("calendar_attendee", tb => tb.HasComment("Calendar Attendee Information"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Invitation Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Availability)
                .HasComment("Available/Busy")
                .HasColumnType("character varying")
                .HasColumnName("availability");
            entity.Property(e => e.CommonName)
                .HasComment("Common name")
                .HasColumnType("character varying")
                .HasColumnName("common_name");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EventId)
                .HasComment("Meeting linked")
                .HasColumnName("event_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Attendee")
                .HasColumnName("partner_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CalendarAttendeeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_attendee_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.CalendarAttendees)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("calendar_attendee_event_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.CalendarAttendees)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("calendar_attendee_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CalendarAttendeeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_attendee_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_event_pkey");

            entity.ToTable("calendar_event", tb => tb.HasComment("Calendar Event"));

            entity.HasIndex(e => e.AccessToken, "calendar_event_access_token_index");

            entity.HasIndex(e => e.ApplicantId, "calendar_event_applicant_id_index").HasFilter("(applicant_id IS NOT NULL)");

            entity.HasIndex(e => e.OpportunityId, "calendar_event_opportunity_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Invitation Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Allday)
                .HasComment("All Day")
                .HasColumnName("allday");
            entity.Property(e => e.ApplicantId)
                .HasComment("Applicant")
                .HasColumnName("applicant_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.Duration)
                .HasComment("Duration")
                .HasColumnName("duration");
            entity.Property(e => e.FollowRecurrence)
                .HasComment("Follow Recurrence")
                .HasColumnName("follow_recurrence");
            entity.Property(e => e.Location)
                .HasComment("Location")
                .HasColumnType("character varying")
                .HasColumnName("location");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Meeting Subject")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OpportunityId)
                .HasComment("Opportunity")
                .HasColumnName("opportunity_id");
            entity.Property(e => e.Privacy)
                .HasComment("Privacy")
                .HasColumnType("character varying")
                .HasColumnName("privacy");
            entity.Property(e => e.RecurrenceId)
                .HasComment("Recurrence Rule")
                .HasColumnName("recurrence_id");
            entity.Property(e => e.Recurrency)
                .HasComment("Recurrent")
                .HasColumnName("recurrency");
            entity.Property(e => e.ResId)
                .HasComment("Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Document Model Name")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.ResModelId)
                .HasComment("Document Model")
                .HasColumnName("res_model_id");
            entity.Property(e => e.ShowAs)
                .HasComment("Show as")
                .HasColumnType("character varying")
                .HasColumnName("show_as");
            entity.Property(e => e.Start)
                .HasComment("Start")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start");
            entity.Property(e => e.StartDate)
                .HasComment("Start Date")
                .HasColumnName("start_date");
            entity.Property(e => e.Stop)
                .HasComment("Stop")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("stop");
            entity.Property(e => e.StopDate)
                .HasComment("End Date")
                .HasColumnName("stop_date");
            entity.Property(e => e.UserId)
                .HasComment("Organizer")
                .HasColumnName("user_id");
            entity.Property(e => e.VideocallChannelId)
                .HasComment("Discuss Channel")
                .HasColumnName("videocall_channel_id");
            entity.Property(e => e.VideocallLocation)
                .HasComment("Meeting URL")
                .HasColumnType("character varying")
                .HasColumnName("videocall_location");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Applicant).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.ApplicantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_applicant_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CalendarEventCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Opportunity).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.OpportunityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_opportunity_id_fkey");

            entity.HasOne(d => d.Recurrence).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.RecurrenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_recurrence_id_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("calendar_event_res_model_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CalendarEventUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_user_id_fkey");

            entity.HasOne(d => d.VideocallChannel).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.VideocallChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_videocall_channel_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CalendarEventWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_write_uid_fkey");

            entity.HasMany(d => d.CalendarAlarms).WithMany(p => p.CalendarEvents)
                .UsingEntity<Dictionary<string, object>>(
                    "CalendarAlarmCalendarEventRel",
                    r => r.HasOne<CalendarAlarm>().WithMany()
                        .HasForeignKey("CalendarAlarmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("calendar_alarm_calendar_event_rel_calendar_alarm_id_fkey"),
                    l => l.HasOne<CalendarEvent>().WithMany()
                        .HasForeignKey("CalendarEventId")
                        .HasConstraintName("calendar_alarm_calendar_event_rel_calendar_event_id_fkey"),
                    j =>
                    {
                        j.HasKey("CalendarEventId", "CalendarAlarmId").HasName("calendar_alarm_calendar_event_rel_pkey");
                        j.ToTable("calendar_alarm_calendar_event_rel", tb => tb.HasComment("RELATION BETWEEN calendar_event AND calendar_alarm"));
                        j.HasIndex(new[] { "CalendarAlarmId", "CalendarEventId" }, "calendar_alarm_calendar_event_calendar_alarm_id_calendar_ev_idx");
                        j.IndexerProperty<int>("CalendarEventId").HasColumnName("calendar_event_id");
                        j.IndexerProperty<int>("CalendarAlarmId").HasColumnName("calendar_alarm_id");
                    });

            entity.HasMany(d => d.Types).WithMany(p => p.Events)
                .UsingEntity<Dictionary<string, object>>(
                    "MeetingCategoryRel",
                    r => r.HasOne<CalendarEventType>().WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("meeting_category_rel_type_id_fkey"),
                    l => l.HasOne<CalendarEvent>().WithMany()
                        .HasForeignKey("EventId")
                        .HasConstraintName("meeting_category_rel_event_id_fkey"),
                    j =>
                    {
                        j.HasKey("EventId", "TypeId").HasName("meeting_category_rel_pkey");
                        j.ToTable("meeting_category_rel", tb => tb.HasComment("RELATION BETWEEN calendar_event AND calendar_event_type"));
                        j.HasIndex(new[] { "TypeId", "EventId" }, "meeting_category_rel_type_id_event_id_idx");
                        j.IndexerProperty<int>("EventId").HasColumnName("event_id");
                        j.IndexerProperty<int>("TypeId").HasColumnName("type_id");
                    });
        });

        modelBuilder.Entity<CalendarEventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_event_type_pkey");

            entity.ToTable("calendar_event_type", tb => tb.HasComment("Event Meeting Type"));

            entity.HasIndex(e => e.Name, "calendar_event_type_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CalendarEventTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CalendarEventTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_type_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarFilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_filters_pkey");

            entity.ToTable("calendar_filters", tb => tb.HasComment("Calendar Filters"));

            entity.HasIndex(e => e.PartnerId, "calendar_filters_partner_id_index");

            entity.HasIndex(e => e.UserId, "calendar_filters_user_id_index");

            entity.HasIndex(e => new { e.UserId, e.PartnerId }, "calendar_filters_user_id_partner_id_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PartnerChecked)
                .HasComment("Checked")
                .HasColumnName("partner_checked");
            entity.Property(e => e.PartnerId)
                .HasComment("Employee")
                .HasColumnName("partner_id");
            entity.Property(e => e.UserId)
                .HasComment("Me")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CalendarFilterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_filters_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.CalendarFilters)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("calendar_filters_partner_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CalendarFilterUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("calendar_filters_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CalendarFilterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_filters_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarProviderConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_provider_config_pkey");

            entity.ToTable("calendar_provider_config", tb => tb.HasComment("Calendar Provider Configuration Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CalClientId)
                .HasComment("Google Client_id")
                .HasColumnType("character varying")
                .HasColumnName("cal_client_id");
            entity.Property(e => e.CalClientSecret)
                .HasComment("Google Client_key")
                .HasColumnType("character varying")
                .HasColumnName("cal_client_secret");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ExternalCalendarProvider)
                .HasComment("Choose an external calendar to configure")
                .HasColumnType("character varying")
                .HasColumnName("external_calendar_provider");
            entity.Property(e => e.MicrosoftOutlookClientIdentifier)
                .HasComment("Outlook Client Id")
                .HasColumnType("character varying")
                .HasColumnName("microsoft_outlook_client_identifier");
            entity.Property(e => e.MicrosoftOutlookClientSecret)
                .HasComment("Outlook Client Secret")
                .HasColumnType("character varying")
                .HasColumnName("microsoft_outlook_client_secret");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CalendarProviderConfigCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_provider_config_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CalendarProviderConfigWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_provider_config_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarRecurrence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_recurrence_pkey");

            entity.ToTable("calendar_recurrence", tb => tb.HasComment("Event Recurrence Rule"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseEventId)
                .HasComment("Base Event")
                .HasColumnName("base_event_id");
            entity.Property(e => e.Byday)
                .HasComment("By day")
                .HasColumnType("character varying")
                .HasColumnName("byday");
            entity.Property(e => e.Count)
                .HasComment("Count")
                .HasColumnName("count");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Day)
                .HasComment("Day")
                .HasColumnName("day");
            entity.Property(e => e.EndType)
                .HasComment("End Type")
                .HasColumnType("character varying")
                .HasColumnName("end_type");
            entity.Property(e => e.EventTz)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("event_tz");
            entity.Property(e => e.Fri)
                .HasComment("Fri")
                .HasColumnName("fri");
            entity.Property(e => e.Interval)
                .HasComment("Interval")
                .HasColumnName("interval");
            entity.Property(e => e.Mon)
                .HasComment("Mon")
                .HasColumnName("mon");
            entity.Property(e => e.MonthBy)
                .HasComment("Month By")
                .HasColumnType("character varying")
                .HasColumnName("month_by");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Rrule)
                .HasComment("Rrule")
                .HasColumnType("character varying")
                .HasColumnName("rrule");
            entity.Property(e => e.RruleType)
                .HasComment("Rrule Type")
                .HasColumnType("character varying")
                .HasColumnName("rrule_type");
            entity.Property(e => e.Sat)
                .HasComment("Sat")
                .HasColumnName("sat");
            entity.Property(e => e.Sun)
                .HasComment("Sun")
                .HasColumnName("sun");
            entity.Property(e => e.Thu)
                .HasComment("Thu")
                .HasColumnName("thu");
            entity.Property(e => e.Tue)
                .HasComment("Tue")
                .HasColumnName("tue");
            entity.Property(e => e.Until)
                .HasComment("Repeat Until")
                .HasColumnName("until");
            entity.Property(e => e.Wed)
                .HasComment("Wed")
                .HasColumnName("wed");
            entity.Property(e => e.Weekday)
                .HasComment("Weekday")
                .HasColumnType("character varying")
                .HasColumnName("weekday");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.BaseEvent).WithMany(p => p.CalendarRecurrences)
                .HasForeignKey(d => d.BaseEventId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_recurrence_base_event_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CalendarRecurrenceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_recurrence_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CalendarRecurrenceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_recurrence_write_uid_fkey");
        });

        modelBuilder.Entity<ChangePasswordOwn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_password_own_pkey");

            entity.ToTable("change_password_own", tb => tb.HasComment("User, change own password wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ConfirmPassword)
                .HasComment("New Password (Confirmation)")
                .HasColumnType("character varying")
                .HasColumnName("confirm_password");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.NewPassword)
                .HasComment("New Password")
                .HasColumnType("character varying")
                .HasColumnName("new_password");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChangePasswordOwnCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_own_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChangePasswordOwnWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_own_write_uid_fkey");
        });

        modelBuilder.Entity<ChangePasswordUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_password_user_pkey");

            entity.ToTable("change_password_user", tb => tb.HasComment("User, Change Password Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.NewPasswd)
                .HasComment("New Password")
                .HasColumnType("character varying")
                .HasColumnName("new_passwd");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.UserLogin)
                .HasComment("User Login")
                .HasColumnType("character varying")
                .HasColumnName("user_login");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChangePasswordUserCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_user_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ChangePasswordUserUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("change_password_user_user_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.ChangePasswordUsers)
                .HasForeignKey(d => d.WizardId)
                .HasConstraintName("change_password_user_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChangePasswordUserWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_user_write_uid_fkey");
        });

        modelBuilder.Entity<ChangePasswordWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_password_wizard_pkey");

            entity.ToTable("change_password_wizard", tb => tb.HasComment("Change Password Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChangePasswordWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChangePasswordWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<ChangeProductionQty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_production_qty_pkey");

            entity.ToTable("change_production_qty", tb => tb.HasComment("Change Production Qty"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MoId)
                .HasComment("Manufacturing Order")
                .HasColumnName("mo_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Quantity To Produce")
                .HasColumnName("product_qty");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChangeProductionQtyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_production_qty_create_uid_fkey");

            entity.HasOne(d => d.Mo).WithMany(p => p.ChangeProductionQties)
                .HasForeignKey(d => d.MoId)
                .HasConstraintName("change_production_qty_mo_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChangeProductionQtyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_production_qty_write_uid_fkey");
        });

        modelBuilder.Entity<ChatbotMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chatbot_message_pkey");

            entity.ToTable("chatbot_message", tb => tb.HasComment("Chatbot Message"));

            entity.HasIndex(e => e.MailMessageId, "chatbot_message__unique_mail_message_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailChannelId)
                .HasComment("Discussion Channel")
                .HasColumnName("mail_channel_id");
            entity.Property(e => e.MailMessageId)
                .HasComment("Related Mail Message")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.ScriptStepId)
                .HasComment("Chatbot Step")
                .HasColumnName("script_step_id");
            entity.Property(e => e.UserRawAnswer)
                .HasComment("User's raw answer")
                .HasColumnName("user_raw_answer");
            entity.Property(e => e.UserScriptAnswerId)
                .HasComment("User's answer")
                .HasColumnName("user_script_answer_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChatbotMessageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_message_create_uid_fkey");

            entity.HasOne(d => d.MailChannel).WithMany(p => p.ChatbotMessages)
                .HasForeignKey(d => d.MailChannelId)
                .HasConstraintName("chatbot_message_mail_channel_id_fkey");

            entity.HasOne(d => d.MailMessage).WithOne(p => p.ChatbotMessage)
                .HasForeignKey<ChatbotMessage>(d => d.MailMessageId)
                .HasConstraintName("chatbot_message_mail_message_id_fkey");

            entity.HasOne(d => d.ScriptStep).WithMany(p => p.ChatbotMessages)
                .HasForeignKey(d => d.ScriptStepId)
                .HasConstraintName("chatbot_message_script_step_id_fkey");

            entity.HasOne(d => d.UserScriptAnswer).WithMany(p => p.ChatbotMessages)
                .HasForeignKey(d => d.UserScriptAnswerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_message_user_script_answer_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChatbotMessageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_message_write_uid_fkey");
        });

        modelBuilder.Entity<ChatbotScript>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chatbot_script_pkey");

            entity.ToTable("chatbot_script", tb => tb.HasComment("Chatbot Script"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.OperatorPartnerId)
                .HasComment("Bot Operator")
                .HasColumnName("operator_partner_id");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.Title)
                .HasComment("Title")
                .HasColumnType("jsonb")
                .HasColumnName("title");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChatbotScriptCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_script_create_uid_fkey");

            entity.HasOne(d => d.OperatorPartner).WithMany(p => p.ChatbotScripts)
                .HasForeignKey(d => d.OperatorPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("chatbot_script_operator_partner_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.ChatbotScripts)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("chatbot_script_source_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChatbotScriptWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_script_write_uid_fkey");
        });

        modelBuilder.Entity<ChatbotScriptAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chatbot_script_answer_pkey");

            entity.ToTable("chatbot_script_answer", tb => tb.HasComment("Chatbot Script Answer"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Answer")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RedirectLink)
                .HasComment("Redirect Link")
                .HasColumnType("character varying")
                .HasColumnName("redirect_link");
            entity.Property(e => e.ScriptStepId)
                .HasComment("Script Step")
                .HasColumnName("script_step_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChatbotScriptAnswerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_script_answer_create_uid_fkey");

            entity.HasOne(d => d.ScriptStep).WithMany(p => p.ChatbotScriptAnswers)
                .HasForeignKey(d => d.ScriptStepId)
                .HasConstraintName("chatbot_script_answer_script_step_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChatbotScriptAnswerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_script_answer_write_uid_fkey");
        });

        modelBuilder.Entity<ChatbotScriptStep>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chatbot_script_step_pkey");

            entity.ToTable("chatbot_script_step", tb => tb.HasComment("Chatbot Script Step"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChatbotScriptId)
                .HasComment("Chatbot")
                .HasColumnName("chatbot_script_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CrmTeamId)
                .HasComment("Sales Team")
                .HasColumnName("crm_team_id");
            entity.Property(e => e.Message)
                .HasComment("Message")
                .HasColumnType("jsonb")
                .HasColumnName("message");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.StepType)
                .HasComment("Step Type")
                .HasColumnType("character varying")
                .HasColumnName("step_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ChatbotScript).WithMany(p => p.ChatbotScriptSteps)
                .HasForeignKey(d => d.ChatbotScriptId)
                .HasConstraintName("chatbot_script_step_chatbot_script_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ChatbotScriptStepCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_script_step_create_uid_fkey");

            entity.HasOne(d => d.CrmTeam).WithMany(p => p.ChatbotScriptSteps)
                .HasForeignKey(d => d.CrmTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_script_step_crm_team_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ChatbotScriptStepWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("chatbot_script_step_write_uid_fkey");

            entity.HasMany(d => d.ChatbotScriptAnswersNavigation).WithMany(p => p.ChatbotScriptSteps)
                .UsingEntity<Dictionary<string, object>>(
                    "ChatbotScriptAnswerChatbotScriptStepRel",
                    r => r.HasOne<ChatbotScriptAnswer>().WithMany()
                        .HasForeignKey("ChatbotScriptAnswerId")
                        .HasConstraintName("chatbot_script_answer_chatbot_scr_chatbot_script_answer_id_fkey"),
                    l => l.HasOne<ChatbotScriptStep>().WithMany()
                        .HasForeignKey("ChatbotScriptStepId")
                        .HasConstraintName("chatbot_script_answer_chatbot_scrip_chatbot_script_step_id_fkey"),
                    j =>
                    {
                        j.HasKey("ChatbotScriptStepId", "ChatbotScriptAnswerId").HasName("chatbot_script_answer_chatbot_script_step_rel_pkey");
                        j.ToTable("chatbot_script_answer_chatbot_script_step_rel", tb => tb.HasComment("RELATION BETWEEN chatbot_script_step AND chatbot_script_answer"));
                        j.HasIndex(new[] { "ChatbotScriptAnswerId", "ChatbotScriptStepId" }, "chatbot_script_answer_chatbot_chatbot_script_answer_id_chat_idx");
                        j.IndexerProperty<int>("ChatbotScriptStepId").HasColumnName("chatbot_script_step_id");
                        j.IndexerProperty<int>("ChatbotScriptAnswerId").HasColumnName("chatbot_script_answer_id");
                    });
        });

        modelBuilder.Entity<ConfirmStockSm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("confirm_stock_sms_pkey");

            entity.ToTable("confirm_stock_sms", tb => tb.HasComment("Confirm Stock SMS"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ConfirmStockSmCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("confirm_stock_sms_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ConfirmStockSmWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("confirm_stock_sms_write_uid_fkey");

            entity.HasMany(d => d.StockPickings).WithMany(p => p.ConfirmStockSms)
                .UsingEntity<Dictionary<string, object>>(
                    "StockPickingSmsRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("stock_picking_sms_rel_stock_picking_id_fkey"),
                    l => l.HasOne<ConfirmStockSm>().WithMany()
                        .HasForeignKey("ConfirmStockSmsId")
                        .HasConstraintName("stock_picking_sms_rel_confirm_stock_sms_id_fkey"),
                    j =>
                    {
                        j.HasKey("ConfirmStockSmsId", "StockPickingId").HasName("stock_picking_sms_rel_pkey");
                        j.ToTable("stock_picking_sms_rel", tb => tb.HasComment("RELATION BETWEEN confirm_stock_sms AND stock_picking"));
                        j.HasIndex(new[] { "StockPickingId", "ConfirmStockSmsId" }, "stock_picking_sms_rel_stock_picking_id_confirm_stock_sms_id_idx");
                        j.IndexerProperty<int>("ConfirmStockSmsId").HasColumnName("confirm_stock_sms_id");
                        j.IndexerProperty<int>("StockPickingId").HasColumnName("stock_picking_id");
                    });
        });

        modelBuilder.Entity<CrmActivityReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("crm_activity_report");

            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DateClosed)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_closed");
            entity.Property(e => e.DateConversion)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_conversion");
            entity.Property(e => e.DateDeadline).HasColumnName("date_deadline");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LeadCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("lead_create_date");
            entity.Property(e => e.LeadId).HasColumnName("lead_id");
            entity.Property(e => e.LeadType)
                .HasColumnType("character varying")
                .HasColumnName("lead_type");
            entity.Property(e => e.MailActivityTypeId).HasColumnName("mail_activity_type_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.SubtypeId).HasColumnName("subtype_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CrmIapLeadHelper>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_helpers_pkey");

            entity.ToTable("crm_iap_lead_helpers", tb => tb.HasComment("Helper methods for crm_iap_mine modules"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmIapLeadHelperCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_helpers_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmIapLeadHelperWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_helpers_write_uid_fkey");
        });

        modelBuilder.Entity<CrmIapLeadIndustry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_industry_pkey");

            entity.ToTable("crm_iap_lead_industry", tb => tb.HasComment("CRM IAP Lead Industry"));

            entity.HasIndex(e => e.Name, "crm_iap_lead_industry_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Industry")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RevealIds)
                .HasComment("Reveal")
                .HasColumnType("character varying")
                .HasColumnName("reveal_ids");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmIapLeadIndustryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_industry_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmIapLeadIndustryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_industry_write_uid_fkey");
        });

        modelBuilder.Entity<CrmIapLeadMiningRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_mining_request_pkey");

            entity.ToTable("crm_iap_lead_mining_request", tb => tb.HasComment("CRM Lead Mining Request"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanySizeMax)
                .HasComment("Company Size Max")
                .HasColumnName("company_size_max");
            entity.Property(e => e.CompanySizeMin)
                .HasComment("Size")
                .HasColumnName("company_size_min");
            entity.Property(e => e.ContactFilterType)
                .HasComment("Filter on")
                .HasColumnType("character varying")
                .HasColumnName("contact_filter_type");
            entity.Property(e => e.ContactNumber)
                .HasComment("Number of Contacts")
                .HasColumnName("contact_number");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ErrorType)
                .HasComment("Error Type")
                .HasColumnType("character varying")
                .HasColumnName("error_type");
            entity.Property(e => e.FilterOnSize)
                .HasComment("Filter on Size")
                .HasColumnName("filter_on_size");
            entity.Property(e => e.LeadNumber)
                .HasComment("Number of Leads")
                .HasColumnName("lead_number");
            entity.Property(e => e.LeadType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("lead_type");
            entity.Property(e => e.Name)
                .HasComment("Request Number")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PreferredRoleId)
                .HasComment("Preferred Role")
                .HasColumnName("preferred_role_id");
            entity.Property(e => e.SearchType)
                .HasComment("Target")
                .HasColumnType("character varying")
                .HasColumnName("search_type");
            entity.Property(e => e.SeniorityId)
                .HasComment("Seniority")
                .HasColumnName("seniority_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmIapLeadMiningRequestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_create_uid_fkey");

            entity.HasOne(d => d.PreferredRole).WithMany(p => p.CrmIapLeadMiningRequests)
                .HasForeignKey(d => d.PreferredRoleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_preferred_role_id_fkey");

            entity.HasOne(d => d.Seniority).WithMany(p => p.CrmIapLeadMiningRequests)
                .HasForeignKey(d => d.SeniorityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_seniority_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmIapLeadMiningRequests)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_team_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CrmIapLeadMiningRequestUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmIapLeadMiningRequestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_write_uid_fkey");

            entity.HasMany(d => d.CrmIapLeadIndustries).WithMany(p => p.CrmIapLeadMiningRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadIndustryCrmIapLeadMiningRequestRel",
                    r => r.HasOne<CrmIapLeadIndustry>().WithMany()
                        .HasForeignKey("CrmIapLeadIndustryId")
                        .HasConstraintName("crm_iap_lead_industry_crm_iap_lea_crm_iap_lead_industry_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_industry_crm_iap_crm_iap_lead_mining_request__fkey"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "CrmIapLeadIndustryId").HasName("crm_iap_lead_industry_crm_iap_lead_mining_request_rel_pkey");
                        j.ToTable("crm_iap_lead_industry_crm_iap_lead_mining_request_rel", tb => tb.HasComment("RELATION BETWEEN crm_iap_lead_mining_request AND crm_iap_lead_industry"));
                        j.HasIndex(new[] { "CrmIapLeadIndustryId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_industry_crm_iap_crm_iap_lead_industry_id_crm__idx");
                        j.IndexerProperty<int>("CrmIapLeadMiningRequestId").HasColumnName("crm_iap_lead_mining_request_id");
                        j.IndexerProperty<int>("CrmIapLeadIndustryId").HasColumnName("crm_iap_lead_industry_id");
                    });

            entity.HasMany(d => d.CrmIapLeadRoles).WithMany(p => p.CrmIapLeadMiningRequestsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestCrmIapLeadRoleRel",
                    r => r.HasOne<CrmIapLeadRole>().WithMany()
                        .HasForeignKey("CrmIapLeadRoleId")
                        .HasConstraintName("crm_iap_lead_mining_request_crm_iap_l_crm_iap_lead_role_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey2"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "CrmIapLeadRoleId").HasName("crm_iap_lead_mining_request_crm_iap_lead_role_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_crm_iap_lead_role_rel", tb => tb.HasComment("RELATION BETWEEN crm_iap_lead_mining_request AND crm_iap_lead_role"));
                        j.HasIndex(new[] { "CrmIapLeadRoleId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_c_crm_iap_lead_role_id_crm_iap__idx");
                        j.IndexerProperty<int>("CrmIapLeadMiningRequestId").HasColumnName("crm_iap_lead_mining_request_id");
                        j.IndexerProperty<int>("CrmIapLeadRoleId").HasColumnName("crm_iap_lead_role_id");
                    });

            entity.HasMany(d => d.CrmTags).WithMany(p => p.CrmIapLeadMiningRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestCrmTagRel",
                    r => r.HasOne<CrmTag>().WithMany()
                        .HasForeignKey("CrmTagId")
                        .HasConstraintName("crm_iap_lead_mining_request_crm_tag_rel_crm_tag_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request_c_crm_iap_lead_mining_request__fkey"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "CrmTagId").HasName("crm_iap_lead_mining_request_crm_tag_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_crm_tag_rel", tb => tb.HasComment("RELATION BETWEEN crm_iap_lead_mining_request AND crm_tag"));
                        j.HasIndex(new[] { "CrmTagId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_c_crm_tag_id_crm_iap_lead_minin_idx");
                        j.IndexerProperty<int>("CrmIapLeadMiningRequestId").HasColumnName("crm_iap_lead_mining_request_id");
                        j.IndexerProperty<int>("CrmTagId").HasColumnName("crm_tag_id");
                    });

            entity.HasMany(d => d.ResCountries).WithMany(p => p.CrmIapLeadMiningRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestResCountryRel",
                    r => r.HasOne<ResCountry>().WithMany()
                        .HasForeignKey("ResCountryId")
                        .HasConstraintName("crm_iap_lead_mining_request_res_country_rel_res_country_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request_r_crm_iap_lead_mining_request__fkey"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "ResCountryId").HasName("crm_iap_lead_mining_request_res_country_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_res_country_rel", tb => tb.HasComment("RELATION BETWEEN crm_iap_lead_mining_request AND res_country"));
                        j.HasIndex(new[] { "ResCountryId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_r_res_country_id_crm_iap_lead_m_idx");
                        j.IndexerProperty<int>("CrmIapLeadMiningRequestId").HasColumnName("crm_iap_lead_mining_request_id");
                        j.IndexerProperty<int>("ResCountryId").HasColumnName("res_country_id");
                    });

            entity.HasMany(d => d.ResCountryStates).WithMany(p => p.CrmIapLeadMiningRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestResCountryStateRel",
                    r => r.HasOne<ResCountryState>().WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .HasConstraintName("crm_iap_lead_mining_request_res_count_res_country_state_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey1"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "ResCountryStateId").HasName("crm_iap_lead_mining_request_res_country_state_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_res_country_state_rel", tb => tb.HasComment("RELATION BETWEEN crm_iap_lead_mining_request AND res_country_state"));
                        j.HasIndex(new[] { "ResCountryStateId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_r_res_country_state_id_crm_iap__idx");
                        j.IndexerProperty<int>("CrmIapLeadMiningRequestId").HasColumnName("crm_iap_lead_mining_request_id");
                        j.IndexerProperty<int>("ResCountryStateId").HasColumnName("res_country_state_id");
                    });
        });

        modelBuilder.Entity<CrmIapLeadRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_role_pkey");

            entity.ToTable("crm_iap_lead_role", tb => tb.HasComment("People Role"));

            entity.HasIndex(e => e.Name, "crm_iap_lead_role_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Role Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RevealId)
                .HasComment("Reveal")
                .HasColumnType("character varying")
                .HasColumnName("reveal_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmIapLeadRoleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_role_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmIapLeadRoleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_role_write_uid_fkey");
        });

        modelBuilder.Entity<CrmIapLeadSeniority>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_seniority_pkey");

            entity.ToTable("crm_iap_lead_seniority", tb => tb.HasComment("People Seniority"));

            entity.HasIndex(e => e.Name, "crm_iap_lead_seniority_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RevealId)
                .HasComment("Reveal")
                .HasColumnType("character varying")
                .HasColumnName("reveal_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmIapLeadSeniorityCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_seniority_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmIapLeadSeniorityWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_seniority_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLead>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_pkey");

            entity.ToTable("crm_lead", tb => tb.HasComment("Lead/Opportunity"));

            entity.HasIndex(e => e.CompanyId, "crm_lead_company_id_index");

            entity.HasIndex(e => new { e.CreateDate, e.TeamId }, "crm_lead_create_date_team_id_idx");

            entity.HasIndex(e => e.DateLastStageUpdate, "crm_lead_date_last_stage_update_index");

            entity.HasIndex(e => e.EmailFrom, "crm_lead_email_from_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.LeadMiningRequestId, "crm_lead_lead_mining_request_id_index").HasFilter("(lead_mining_request_id IS NOT NULL)");

            entity.HasIndex(e => e.LostReasonId, "crm_lead_lost_reason_id_index");

            entity.HasIndex(e => e.Name, "crm_lead_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PartnerId, "crm_lead_partner_id_index");

            entity.HasIndex(e => e.Priority, "crm_lead_priority_index");

            entity.HasIndex(e => e.StageId, "crm_lead_stage_id_index");

            entity.HasIndex(e => e.TeamId, "crm_lead_team_id_index");

            entity.HasIndex(e => e.Type, "crm_lead_type_index");

            entity.HasIndex(e => e.UserId, "crm_lead_user_id_index");

            entity.HasIndex(e => new { e.UserId, e.TeamId, e.Type }, "crm_lead_user_id_team_id_type_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AutomatedProbability)
                .HasComment("Automated Probability")
                .HasColumnName("automated_probability");
            entity.Property(e => e.CampaignId)
                .HasComment("Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.City)
                .HasComment("City")
                .HasColumnType("character varying")
                .HasColumnName("city");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.ContactName)
                .HasComment("Contact Name")
                .HasColumnType("character varying")
                .HasColumnName("contact_name");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateActionLast)
                .HasComment("Last Action")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_action_last");
            entity.Property(e => e.DateClosed)
                .HasComment("Closed Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_closed");
            entity.Property(e => e.DateConversion)
                .HasComment("Conversion Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_conversion");
            entity.Property(e => e.DateDeadline)
                .HasComment("Expected Closing")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DateLastStageUpdate)
                .HasComment("Last Stage Update")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_stage_update");
            entity.Property(e => e.DateOpen)
                .HasComment("Assignment Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_open");
            entity.Property(e => e.DayClose)
                .HasComment("Days to Close")
                .HasColumnName("day_close");
            entity.Property(e => e.DayOpen)
                .HasComment("Days to Assign")
                .HasColumnName("day_open");
            entity.Property(e => e.Description)
                .HasComment("Notes")
                .HasColumnName("description");
            entity.Property(e => e.EmailCc)
                .HasComment("Email cc")
                .HasColumnType("character varying")
                .HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.EmailNormalized)
                .HasComment("Normalized Email")
                .HasColumnType("character varying")
                .HasColumnName("email_normalized");
            entity.Property(e => e.EmailState)
                .HasComment("Email Quality")
                .HasColumnType("character varying")
                .HasColumnName("email_state");
            entity.Property(e => e.EventId)
                .HasComment("Source Event")
                .HasColumnName("event_id");
            entity.Property(e => e.EventLeadRuleId)
                .HasComment("Registration Rule")
                .HasColumnName("event_lead_rule_id");
            entity.Property(e => e.ExpectedRevenue)
                .HasComment("Expected Revenue")
                .HasColumnName("expected_revenue");
            entity.Property(e => e.Function)
                .HasComment("Job Position")
                .HasColumnType("character varying")
                .HasColumnName("function");
            entity.Property(e => e.IapEnrichDone)
                .HasComment("Enrichment done")
                .HasColumnName("iap_enrich_done");
            entity.Property(e => e.LangId)
                .HasComment("Language")
                .HasColumnName("lang_id");
            entity.Property(e => e.LeadMiningRequestId)
                .HasComment("Lead Mining Request")
                .HasColumnName("lead_mining_request_id");
            entity.Property(e => e.LeadProperties)
                .HasComment("Properties")
                .HasColumnType("jsonb")
                .HasColumnName("lead_properties");
            entity.Property(e => e.LostReasonId)
                .HasComment("Lost Reason")
                .HasColumnName("lost_reason_id");
            entity.Property(e => e.MediumId)
                .HasComment("Medium")
                .HasColumnName("medium_id");
            entity.Property(e => e.MessageBounce)
                .HasComment("Bounce")
                .HasColumnName("message_bounce");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile)
                .HasComment("Mobile")
                .HasColumnType("character varying")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasComment("Opportunity")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerName)
                .HasComment("Company Name")
                .HasColumnType("character varying")
                .HasColumnName("partner_name");
            entity.Property(e => e.Phone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.PhoneSanitized)
                .HasComment("Sanitized Number")
                .HasColumnType("character varying")
                .HasColumnName("phone_sanitized");
            entity.Property(e => e.PhoneState)
                .HasComment("Phone Quality")
                .HasColumnType("character varying")
                .HasColumnName("phone_state");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.Probability)
                .HasComment("Probability")
                .HasColumnName("probability");
            entity.Property(e => e.ProratedRevenue)
                .HasComment("Prorated Revenue")
                .HasColumnName("prorated_revenue");
            entity.Property(e => e.RecurringPlan)
                .HasComment("Recurring Plan")
                .HasColumnName("recurring_plan");
            entity.Property(e => e.RecurringRevenue)
                .HasComment("Recurring Revenues")
                .HasColumnName("recurring_revenue");
            entity.Property(e => e.RecurringRevenueMonthly)
                .HasComment("Expected MRR")
                .HasColumnName("recurring_revenue_monthly");
            entity.Property(e => e.RecurringRevenueMonthlyProrated)
                .HasComment("Prorated MRR")
                .HasColumnName("recurring_revenue_monthly_prorated");
            entity.Property(e => e.Referred)
                .HasComment("Referred By")
                .HasColumnType("character varying")
                .HasColumnName("referred");
            entity.Property(e => e.RevealId)
                .HasComment("Reveal ID")
                .HasColumnType("character varying")
                .HasColumnName("reveal_id");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.StateId)
                .HasComment("State")
                .HasColumnName("state_id");
            entity.Property(e => e.Street)
                .HasComment("Street")
                .HasColumnType("character varying")
                .HasColumnName("street");
            entity.Property(e => e.Street2)
                .HasComment("Street2")
                .HasColumnType("character varying")
                .HasColumnName("street2");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.Title)
                .HasComment("Title")
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.Website)
                .HasComment("Website")
                .HasColumnType("character varying")
                .HasColumnName("website");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.Zip)
                .HasComment("Zip")
                .HasColumnType("character varying")
                .HasColumnName("zip");

            entity.HasOne(d => d.Campaign).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_campaign_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_company_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLeadCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_event_id_fkey");

            entity.HasOne(d => d.EventLeadRule).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.EventLeadRuleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_event_lead_rule_id_fkey");

            entity.HasOne(d => d.Lang).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.LangId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lang_id_fkey");

            entity.HasOne(d => d.LeadMiningRequest).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.LeadMiningRequestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lead_mining_request_id_fkey");

            entity.HasOne(d => d.LostReason).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.LostReasonId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("crm_lead_lost_reason_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_partner_id_fkey");

            entity.HasOne(d => d.RecurringPlanNavigation).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.RecurringPlan)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_recurring_plan_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_source_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("crm_lead_stage_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_state_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_team_id_fkey");

            entity.HasOne(d => d.TitleNavigation).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.Title)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_title_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CrmLeadUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLeadWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_write_uid_fkey");

            entity.HasMany(d => d.Tags).WithMany(p => p.Leads)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmTagRel",
                    r => r.HasOne<CrmTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("crm_tag_rel_tag_id_fkey"),
                    l => l.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("LeadId")
                        .HasConstraintName("crm_tag_rel_lead_id_fkey"),
                    j =>
                    {
                        j.HasKey("LeadId", "TagId").HasName("crm_tag_rel_pkey");
                        j.ToTable("crm_tag_rel", tb => tb.HasComment("RELATION BETWEEN crm_lead AND crm_tag"));
                        j.HasIndex(new[] { "TagId", "LeadId" }, "crm_tag_rel_tag_id_lead_id_idx");
                        j.IndexerProperty<int>("LeadId").HasColumnName("lead_id");
                        j.IndexerProperty<int>("TagId").HasColumnName("tag_id");
                    });

            entity.HasMany(d => d.WebsiteVisitors).WithMany(p => p.CrmLeads)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadWebsiteVisitorRel",
                    r => r.HasOne<WebsiteVisitor>().WithMany()
                        .HasForeignKey("WebsiteVisitorId")
                        .HasConstraintName("crm_lead_website_visitor_rel_website_visitor_id_fkey"),
                    l => l.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_lead_website_visitor_rel_crm_lead_id_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLeadId", "WebsiteVisitorId").HasName("crm_lead_website_visitor_rel_pkey");
                        j.ToTable("crm_lead_website_visitor_rel", tb => tb.HasComment("RELATION BETWEEN crm_lead AND website_visitor"));
                        j.HasIndex(new[] { "WebsiteVisitorId", "CrmLeadId" }, "crm_lead_website_visitor_rel_website_visitor_id_crm_lead_id_idx");
                        j.IndexerProperty<int>("CrmLeadId").HasColumnName("crm_lead_id");
                        j.IndexerProperty<int>("WebsiteVisitorId").HasColumnName("website_visitor_id");
                    });
        });

        modelBuilder.Entity<CrmLead2opportunityPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead2opportunity_partner_pkey");

            entity.ToTable("crm_lead2opportunity_partner", tb => tb.HasComment("Convert Lead to Opportunity (not in mass)"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasComment("Related Customer")
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ForceAssignment)
                .HasComment("Force assignment")
                .HasColumnName("force_assignment");
            entity.Property(e => e.LeadId)
                .HasComment("Associated Lead")
                .HasColumnName("lead_id");
            entity.Property(e => e.Name)
                .HasComment("Conversion Action")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLead2opportunityPartnerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_create_uid_fkey");

            entity.HasOne(d => d.Lead).WithMany(p => p.CrmLead2opportunityPartners)
                .HasForeignKey(d => d.LeadId)
                .HasConstraintName("crm_lead2opportunity_partner_lead_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.CrmLead2opportunityPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_partner_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLead2opportunityPartners)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_team_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CrmLead2opportunityPartnerUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLead2opportunityPartnerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_write_uid_fkey");

            entity.HasMany(d => d.CrmLeads).WithMany(p => p.CrmLead2opportunityPartnersNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadCrmLead2opportunityPartnerRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_lead_crm_lead2opportunity_partner_rel_crm_lead_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartner>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerId")
                        .HasConstraintName("crm_lead_crm_lead2opportunity_crm_lead2opportunity_partner_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerId", "CrmLeadId").HasName("crm_lead_crm_lead2opportunity_partner_rel_pkey");
                        j.ToTable("crm_lead_crm_lead2opportunity_partner_rel", tb => tb.HasComment("RELATION BETWEEN crm_lead2opportunity_partner AND crm_lead"));
                        j.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerId" }, "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportun_idx");
                        j.IndexerProperty<int>("CrmLead2opportunityPartnerId").HasColumnName("crm_lead2opportunity_partner_id");
                        j.IndexerProperty<int>("CrmLeadId").HasColumnName("crm_lead_id");
                    });
        });

        modelBuilder.Entity<CrmLead2opportunityPartnerMass>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead2opportunity_partner_mass_pkey");

            entity.ToTable("crm_lead2opportunity_partner_mass", tb => tb.HasComment("Convert Lead to Opportunity (in mass)"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasComment("Related Customer")
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Deduplicate)
                .HasComment("Apply deduplication")
                .HasColumnName("deduplicate");
            entity.Property(e => e.ForceAssignment)
                .HasComment("Force assignment")
                .HasColumnName("force_assignment");
            entity.Property(e => e.LeadId)
                .HasComment("Associated Lead")
                .HasColumnName("lead_id");
            entity.Property(e => e.Name)
                .HasComment("Conversion Action")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLead2opportunityPartnerMassCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_create_uid_fkey");

            entity.HasOne(d => d.Lead).WithMany(p => p.CrmLead2opportunityPartnerMassesNavigation)
                .HasForeignKey(d => d.LeadId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_lead_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.CrmLead2opportunityPartnerMasses)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_partner_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLead2opportunityPartnerMasses)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_team_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CrmLead2opportunityPartnerMassUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLead2opportunityPartnerMassWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_write_uid_fkey");

            entity.HasMany(d => d.CrmLeads).WithMany(p => p.CrmLead2opportunityPartnerMasses)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmConvertLeadMassLeadRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_convert_lead_mass_lead_rel_crm_lead_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartnerMass>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .HasConstraintName("crm_convert_lead_mass_lead_re_crm_lead2opportunity_partner_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerMassId", "CrmLeadId").HasName("crm_convert_lead_mass_lead_rel_pkey");
                        j.ToTable("crm_convert_lead_mass_lead_rel", tb => tb.HasComment("RELATION BETWEEN crm_lead2opportunity_partner_mass AND crm_lead"));
                        j.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerMassId" }, "crm_convert_lead_mass_lead_re_crm_lead_id_crm_lead2opportun_idx");
                        j.IndexerProperty<int>("CrmLead2opportunityPartnerMassId").HasColumnName("crm_lead2opportunity_partner_mass_id");
                        j.IndexerProperty<int>("CrmLeadId").HasColumnName("crm_lead_id");
                    });

            entity.HasMany(d => d.CrmLeadsNavigation).WithMany(p => p.CrmLead2opportunityPartnerMasses1)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadCrmLead2opportunityPartnerMassRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_lead_crm_lead2opportunity_partner_mass_rel_crm_lead_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartnerMass>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .HasConstraintName("crm_lead_crm_lead2opportunit_crm_lead2opportunity_partner_fkey1"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerMassId", "CrmLeadId").HasName("crm_lead_crm_lead2opportunity_partner_mass_rel_pkey");
                        j.ToTable("crm_lead_crm_lead2opportunity_partner_mass_rel", tb => tb.HasComment("RELATION BETWEEN crm_lead2opportunity_partner_mass AND crm_lead"));
                        j.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerMassId" }, "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportu_idx1");
                        j.IndexerProperty<int>("CrmLead2opportunityPartnerMassId").HasColumnName("crm_lead2opportunity_partner_mass_id");
                        j.IndexerProperty<int>("CrmLeadId").HasColumnName("crm_lead_id");
                    });

            entity.HasMany(d => d.ResUsers).WithMany(p => p.CrmLead2opportunityPartnerMasses)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLead2opportunityPartnerMassResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("crm_lead2opportunity_partner_mass_res_users_r_res_users_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartnerMass>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .HasConstraintName("crm_lead2opportunity_partner__crm_lead2opportunity_partner_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerMassId", "ResUsersId").HasName("crm_lead2opportunity_partner_mass_res_users_rel_pkey");
                        j.ToTable("crm_lead2opportunity_partner_mass_res_users_rel", tb => tb.HasComment("RELATION BETWEEN crm_lead2opportunity_partner_mass AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "CrmLead2opportunityPartnerMassId" }, "crm_lead2opportunity_partner__res_users_id_crm_lead2opportu_idx");
                        j.IndexerProperty<int>("CrmLead2opportunityPartnerMassId").HasColumnName("crm_lead2opportunity_partner_mass_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<CrmLeadLost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_lost_pkey");

            entity.ToTable("crm_lead_lost", tb => tb.HasComment("Get Lost Reason"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LostFeedback)
                .HasComment("Closing Note")
                .HasColumnName("lost_feedback");
            entity.Property(e => e.LostReasonId)
                .HasComment("Lost Reason")
                .HasColumnName("lost_reason_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLeadLostCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lost_create_uid_fkey");

            entity.HasOne(d => d.LostReason).WithMany(p => p.CrmLeadLosts)
                .HasForeignKey(d => d.LostReasonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lost_lost_reason_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLeadLostWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lost_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLeadPlsUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_pls_update_pkey");

            entity.ToTable("crm_lead_pls_update", tb => tb.HasComment("Update the probabilities"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PlsStartDate)
                .HasComment("Pls Start Date")
                .HasColumnName("pls_start_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLeadPlsUpdateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_pls_update_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLeadPlsUpdateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_pls_update_write_uid_fkey");

            entity.HasMany(d => d.CrmLeadScoringFrequencyFields).WithMany(p => p.CrmLeadPlsUpdates)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadPlsUpdateCrmLeadScoringFrequencyFieldRel",
                    r => r.HasOne<CrmLeadScoringFrequencyField>().WithMany()
                        .HasForeignKey("CrmLeadScoringFrequencyFieldId")
                        .HasConstraintName("crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_f_fkey"),
                    l => l.HasOne<CrmLeadPlsUpdate>().WithMany()
                        .HasForeignKey("CrmLeadPlsUpdateId")
                        .HasConstraintName("crm_lead_pls_update_crm_lead_scorin_crm_lead_pls_update_id_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLeadPlsUpdateId", "CrmLeadScoringFrequencyFieldId").HasName("crm_lead_pls_update_crm_lead_scoring_frequency_field_rel_pkey");
                        j.ToTable("crm_lead_pls_update_crm_lead_scoring_frequency_field_rel", tb => tb.HasComment("RELATION BETWEEN crm_lead_pls_update AND crm_lead_scoring_frequency_field"));
                        j.HasIndex(new[] { "CrmLeadScoringFrequencyFieldId", "CrmLeadPlsUpdateId" }, "crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_fi_idx");
                        j.IndexerProperty<int>("CrmLeadPlsUpdateId").HasColumnName("crm_lead_pls_update_id");
                        j.IndexerProperty<int>("CrmLeadScoringFrequencyFieldId").HasColumnName("crm_lead_scoring_frequency_field_id");
                    });
        });

        modelBuilder.Entity<CrmLeadScoringFrequency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_scoring_frequency_pkey");

            entity.ToTable("crm_lead_scoring_frequency", tb => tb.HasComment("Lead Scoring Frequency"));

            entity.HasIndex(e => e.Variable, "crm_lead_scoring_frequency_variable_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LostCount)
                .HasComment("Lost Count")
                .HasColumnName("lost_count");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.Variable)
                .HasComment("Variable")
                .HasColumnType("character varying")
                .HasColumnName("variable");
            entity.Property(e => e.WonCount)
                .HasComment("Won Count")
                .HasColumnName("won_count");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLeadScoringFrequencyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_create_uid_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLeadScoringFrequencies)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crm_lead_scoring_frequency_team_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLeadScoringFrequencyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLeadScoringFrequencyField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_scoring_frequency_field_pkey");

            entity.ToTable("crm_lead_scoring_frequency_field", tb => tb.HasComment("Fields that can be used for predictive lead scoring computation"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FieldId)
                .HasComment("Field")
                .HasColumnName("field_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLeadScoringFrequencyFieldCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_field_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.CrmLeadScoringFrequencyFields)
                .HasForeignKey(d => d.FieldId)
                .HasConstraintName("crm_lead_scoring_frequency_field_field_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLeadScoringFrequencyFieldWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_field_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLostReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lost_reason_pkey");

            entity.ToTable("crm_lost_reason", tb => tb.HasComment("Opp. Lost Reason"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmLostReasonCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lost_reason_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmLostReasonWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lost_reason_write_uid_fkey");
        });

        modelBuilder.Entity<CrmMergeOpportunity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_merge_opportunity_pkey");

            entity.ToTable("crm_merge_opportunity", tb => tb.HasComment("Merge Opportunities"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmMergeOpportunityCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_create_uid_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmMergeOpportunities)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_team_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CrmMergeOpportunityUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmMergeOpportunityWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_write_uid_fkey");

            entity.HasMany(d => d.Opportunities).WithMany(p => p.Merges)
                .UsingEntity<Dictionary<string, object>>(
                    "MergeOpportunityRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("merge_opportunity_rel_opportunity_id_fkey"),
                    l => l.HasOne<CrmMergeOpportunity>().WithMany()
                        .HasForeignKey("MergeId")
                        .HasConstraintName("merge_opportunity_rel_merge_id_fkey"),
                    j =>
                    {
                        j.HasKey("MergeId", "OpportunityId").HasName("merge_opportunity_rel_pkey");
                        j.ToTable("merge_opportunity_rel", tb => tb.HasComment("RELATION BETWEEN crm_merge_opportunity AND crm_lead"));
                        j.HasIndex(new[] { "OpportunityId", "MergeId" }, "merge_opportunity_rel_opportunity_id_merge_id_idx");
                        j.IndexerProperty<int>("MergeId").HasColumnName("merge_id");
                        j.IndexerProperty<int>("OpportunityId").HasColumnName("opportunity_id");
                    });
        });

        modelBuilder.Entity<CrmQuotationPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_quotation_partner_pkey");

            entity.ToTable("crm_quotation_partner", tb => tb.HasComment("Create new or use existing Customer on new Quotation"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasComment("Quotation Customer")
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LeadId)
                .HasComment("Associated Lead")
                .HasColumnName("lead_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmQuotationPartnerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_quotation_partner_create_uid_fkey");

            entity.HasOne(d => d.Lead).WithMany(p => p.CrmQuotationPartners)
                .HasForeignKey(d => d.LeadId)
                .HasConstraintName("crm_quotation_partner_lead_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.CrmQuotationPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_quotation_partner_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmQuotationPartnerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_quotation_partner_write_uid_fkey");
        });

        modelBuilder.Entity<CrmRecurringPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_recurring_plan_pkey");

            entity.ToTable("crm_recurring_plan", tb => tb.HasComment("CRM Recurring revenue plans"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Plan Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NumberOfMonths)
                .HasComment("# Months")
                .HasColumnName("number_of_months");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmRecurringPlanCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_recurring_plan_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmRecurringPlanWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_recurring_plan_write_uid_fkey");
        });

        modelBuilder.Entity<CrmStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_stage_pkey");

            entity.ToTable("crm_stage", tb => tb.HasComment("CRM Stages"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Fold)
                .HasComment("Folded in Pipeline")
                .HasColumnName("fold");
            entity.Property(e => e.IsWon)
                .HasComment("Is Won Stage?")
                .HasColumnName("is_won");
            entity.Property(e => e.Name)
                .HasComment("Stage Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Requirements)
                .HasComment("Requirements")
                .HasColumnName("requirements");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmStageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_stage_create_uid_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmStages)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_stage_team_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmStageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_stage_write_uid_fkey");
        });

        modelBuilder.Entity<CrmTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_tag_pkey");

            entity.ToTable("crm_tag", tb => tb.HasComment("CRM Tag"));

            entity.HasIndex(e => e.Name, "crm_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_tag_write_uid_fkey");
        });

        modelBuilder.Entity<CrmTeam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_team_pkey");

            entity.ToTable("crm_team", tb => tb.HasComment("Sales Team"));

            entity.HasIndex(e => e.CompanyId, "crm_team_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AliasId)
                .HasComment("Alias")
                .HasColumnName("alias_id");
            entity.Property(e => e.AssignmentDomain)
                .HasComment("Assignment Domain")
                .HasColumnType("character varying")
                .HasColumnName("assignment_domain");
            entity.Property(e => e.AssignmentOptout)
                .HasComment("Skip auto assignment")
                .HasColumnName("assignment_optout");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InvoicedTarget)
                .HasComment("Invoicing Target")
                .HasColumnName("invoiced_target");
            entity.Property(e => e.LeadPropertiesDefinition)
                .HasComment("Lead Properties")
                .HasColumnType("jsonb")
                .HasColumnName("lead_properties_definition");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Sales Team")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.UseLeads)
                .HasComment("Leads")
                .HasColumnName("use_leads");
            entity.Property(e => e.UseOpportunities)
                .HasComment("Pipeline")
                .HasColumnName("use_opportunities");
            entity.Property(e => e.UseQuotations)
                .HasComment("Quotations")
                .HasColumnName("use_quotations");
            entity.Property(e => e.UserId)
                .HasComment("Team Leader")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.CrmTeams)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("crm_team_alias_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.CrmTeams)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmTeamCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CrmTeams)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_message_main_attachment_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CrmTeamUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmTeamWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_write_uid_fkey");

            entity.HasMany(d => d.Users).WithMany(p => p.Teams)
                .UsingEntity<Dictionary<string, object>>(
                    "TeamFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("team_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<CrmTeam>().WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("team_favorite_user_rel_team_id_fkey"),
                    j =>
                    {
                        j.HasKey("TeamId", "UserId").HasName("team_favorite_user_rel_pkey");
                        j.ToTable("team_favorite_user_rel", tb => tb.HasComment("RELATION BETWEEN crm_team AND res_users"));
                        j.HasIndex(new[] { "UserId", "TeamId" }, "team_favorite_user_rel_user_id_team_id_idx");
                        j.IndexerProperty<int>("TeamId").HasColumnName("team_id");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                    });
        });

        modelBuilder.Entity<CrmTeamMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_team_member_pkey");

            entity.ToTable("crm_team_member", tb => tb.HasComment("Sales Team Member"));

            entity.HasIndex(e => e.CrmTeamId, "crm_team_member_crm_team_id_index");

            entity.HasIndex(e => e.UserId, "crm_team_member_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AssignmentDomain)
                .HasComment("Assignment Domain")
                .HasColumnType("character varying")
                .HasColumnName("assignment_domain");
            entity.Property(e => e.AssignmentMax)
                .HasComment("Average Leads Capacity (on 30 days)")
                .HasColumnName("assignment_max");
            entity.Property(e => e.AssignmentOptout)
                .HasComment("Skip auto assignment")
                .HasColumnName("assignment_optout");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CrmTeamId)
                .HasComment("Sales Team")
                .HasColumnName("crm_team_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.CrmTeamMemberCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_member_create_uid_fkey");

            entity.HasOne(d => d.CrmTeam).WithMany(p => p.CrmTeamMembers)
                .HasForeignKey(d => d.CrmTeamId)
                .HasConstraintName("crm_team_member_crm_team_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CrmTeamMembers)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_member_message_main_attachment_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.CrmTeamMemberUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("crm_team_member_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.CrmTeamMemberWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_member_write_uid_fkey");
        });

        modelBuilder.Entity<DataRecycleModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("data_recycle_model_pkey");

            entity.ToTable("data_recycle_model", tb => tb.HasComment("Recycling Model"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Domain)
                .HasComment("Filter")
                .HasColumnType("character varying")
                .HasColumnName("domain");
            entity.Property(e => e.IncludeArchived)
                .HasComment("Include Archived")
                .HasColumnName("include_archived");
            entity.Property(e => e.LastNotification)
                .HasComment("Last Notification")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_notification");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NotifyFrequency)
                .HasComment("Notify")
                .HasColumnName("notify_frequency");
            entity.Property(e => e.NotifyFrequencyPeriod)
                .HasComment("Notify Frequency Period")
                .HasColumnType("character varying")
                .HasColumnName("notify_frequency_period");
            entity.Property(e => e.RecycleAction)
                .HasComment("Recycle Action")
                .HasColumnType("character varying")
                .HasColumnName("recycle_action");
            entity.Property(e => e.RecycleMode)
                .HasComment("Recycle Mode")
                .HasColumnType("character varying")
                .HasColumnName("recycle_mode");
            entity.Property(e => e.ResModelId)
                .HasComment("Model")
                .HasColumnName("res_model_id");
            entity.Property(e => e.ResModelName)
                .HasComment("Model Name")
                .HasColumnType("character varying")
                .HasColumnName("res_model_name");
            entity.Property(e => e.TimeFieldDelta)
                .HasComment("Delta")
                .HasColumnName("time_field_delta");
            entity.Property(e => e.TimeFieldDeltaUnit)
                .HasComment("Delta Unit")
                .HasColumnType("character varying")
                .HasColumnName("time_field_delta_unit");
            entity.Property(e => e.TimeFieldId)
                .HasComment("Time Field")
                .HasColumnName("time_field_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.DataRecycleModelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("data_recycle_model_create_uid_fkey");

            entity.HasOne(d => d.ResModel).WithMany(p => p.DataRecycleModels)
                .HasForeignKey(d => d.ResModelId)
                .HasConstraintName("data_recycle_model_res_model_id_fkey");

            entity.HasOne(d => d.TimeField).WithMany(p => p.DataRecycleModels)
                .HasForeignKey(d => d.TimeFieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("data_recycle_model_time_field_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.DataRecycleModelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("data_recycle_model_write_uid_fkey");

            entity.HasMany(d => d.ResUsers).WithMany(p => p.DataRecycleModels)
                .UsingEntity<Dictionary<string, object>>(
                    "DataRecycleModelResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("data_recycle_model_res_users_rel_res_users_id_fkey"),
                    l => l.HasOne<DataRecycleModel>().WithMany()
                        .HasForeignKey("DataRecycleModelId")
                        .HasConstraintName("data_recycle_model_res_users_rel_data_recycle_model_id_fkey"),
                    j =>
                    {
                        j.HasKey("DataRecycleModelId", "ResUsersId").HasName("data_recycle_model_res_users_rel_pkey");
                        j.ToTable("data_recycle_model_res_users_rel", tb => tb.HasComment("RELATION BETWEEN data_recycle_model AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "DataRecycleModelId" }, "data_recycle_model_res_users__res_users_id_data_recycle_mod_idx");
                        j.IndexerProperty<int>("DataRecycleModelId").HasColumnName("data_recycle_model_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<DataRecycleRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("data_recycle_record_pkey");

            entity.ToTable("data_recycle_record", tb => tb.HasComment("Recycling Record"));

            entity.HasIndex(e => e.ResId, "data_recycle_record_res_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.RecycleModelId)
                .HasComment("Recycle Model")
                .HasColumnName("recycle_model_id");
            entity.Property(e => e.ResId)
                .HasComment("Record ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModelId)
                .HasComment("Model")
                .HasColumnName("res_model_id");
            entity.Property(e => e.ResModelName)
                .HasComment("Model Name")
                .HasColumnType("character varying")
                .HasColumnName("res_model_name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.DataRecycleRecords)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("data_recycle_record_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.DataRecycleRecordCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("data_recycle_record_create_uid_fkey");

            entity.HasOne(d => d.RecycleModel).WithMany(p => p.DataRecycleRecords)
                .HasForeignKey(d => d.RecycleModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("data_recycle_record_recycle_model_id_fkey");

            entity.HasOne(d => d.ResModel).WithMany(p => p.DataRecycleRecords)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("data_recycle_record_res_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.DataRecycleRecordWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("data_recycle_record_write_uid_fkey");
        });

        modelBuilder.Entity<DecimalPrecision>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("decimal_precision_pkey");

            entity.ToTable("decimal_precision", tb => tb.HasComment("Decimal Precision"));

            entity.HasIndex(e => e.Name, "decimal_precision_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Digits)
                .HasComment("Digits")
                .HasColumnName("digits");
            entity.Property(e => e.Name)
                .HasComment("Usage")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.DecimalPrecisionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("decimal_precision_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.DecimalPrecisionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("decimal_precision_write_uid_fkey");
        });

        modelBuilder.Entity<DigestDigest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("digest_digest_pkey");

            entity.ToTable("digest_digest", tb => tb.HasComment("Digest"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.KpiAccountTotalRevenue)
                .HasComment("Revenue")
                .HasColumnName("kpi_account_total_revenue");
            entity.Property(e => e.KpiAllSaleTotal)
                .HasComment("All Sales")
                .HasColumnName("kpi_all_sale_total");
            entity.Property(e => e.KpiCrmLeadCreated)
                .HasComment("New Leads")
                .HasColumnName("kpi_crm_lead_created");
            entity.Property(e => e.KpiCrmOpportunitiesWon)
                .HasComment("Opportunities Won")
                .HasColumnName("kpi_crm_opportunities_won");
            entity.Property(e => e.KpiHrRecruitmentNewColleagues)
                .HasComment("New Employees")
                .HasColumnName("kpi_hr_recruitment_new_colleagues");
            entity.Property(e => e.KpiLivechatConversations)
                .HasComment("Conversations handled")
                .HasColumnName("kpi_livechat_conversations");
            entity.Property(e => e.KpiLivechatRating)
                .HasComment("% of Happiness")
                .HasColumnName("kpi_livechat_rating");
            entity.Property(e => e.KpiLivechatResponse)
                .HasComment("Time to answer (sec)")
                .HasColumnName("kpi_livechat_response");
            entity.Property(e => e.KpiMailMessageTotal)
                .HasComment("Messages Sent")
                .HasColumnName("kpi_mail_message_total");
            entity.Property(e => e.KpiPosTotal)
                .HasComment("POS Sales")
                .HasColumnName("kpi_pos_total");
            entity.Property(e => e.KpiProjectTaskOpened)
                .HasComment("Open Tasks")
                .HasColumnName("kpi_project_task_opened");
            entity.Property(e => e.KpiResUsersConnected)
                .HasComment("Connected Users")
                .HasColumnName("kpi_res_users_connected");
            entity.Property(e => e.KpiWebsiteSaleTotal)
                .HasComment("eCommerce Sales")
                .HasColumnName("kpi_website_sale_total");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NextRunDate)
                .HasComment("Next Mailing Date")
                .HasColumnName("next_run_date");
            entity.Property(e => e.Periodicity)
                .HasComment("Periodicity")
                .HasColumnType("character varying")
                .HasColumnName("periodicity");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.DigestDigests)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_digest_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.DigestDigestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_digest_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.DigestDigestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_digest_write_uid_fkey");

            entity.HasMany(d => d.ResUsers).WithMany(p => p.DigestDigests)
                .UsingEntity<Dictionary<string, object>>(
                    "DigestDigestResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("digest_digest_res_users_rel_res_users_id_fkey"),
                    l => l.HasOne<DigestDigest>().WithMany()
                        .HasForeignKey("DigestDigestId")
                        .HasConstraintName("digest_digest_res_users_rel_digest_digest_id_fkey"),
                    j =>
                    {
                        j.HasKey("DigestDigestId", "ResUsersId").HasName("digest_digest_res_users_rel_pkey");
                        j.ToTable("digest_digest_res_users_rel", tb => tb.HasComment("RELATION BETWEEN digest_digest AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "DigestDigestId" }, "digest_digest_res_users_rel_res_users_id_digest_digest_id_idx");
                        j.IndexerProperty<int>("DigestDigestId").HasColumnName("digest_digest_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<DigestTip>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("digest_tip_pkey");

            entity.ToTable("digest_tip", tb => tb.HasComment("Digest Tips"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.GroupId)
                .HasComment("Authorized Group")
                .HasColumnName("group_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TipDescription)
                .HasComment("Tip description")
                .HasColumnType("jsonb")
                .HasColumnName("tip_description");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.DigestTipCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_tip_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.DigestTips)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_tip_group_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.DigestTipWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_tip_write_uid_fkey");

            entity.HasMany(d => d.ResUsers).WithMany(p => p.DigestTips)
                .UsingEntity<Dictionary<string, object>>(
                    "DigestTipResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("digest_tip_res_users_rel_res_users_id_fkey"),
                    l => l.HasOne<DigestTip>().WithMany()
                        .HasForeignKey("DigestTipId")
                        .HasConstraintName("digest_tip_res_users_rel_digest_tip_id_fkey"),
                    j =>
                    {
                        j.HasKey("DigestTipId", "ResUsersId").HasName("digest_tip_res_users_rel_pkey");
                        j.ToTable("digest_tip_res_users_rel", tb => tb.HasComment("RELATION BETWEEN digest_tip AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "DigestTipId" }, "digest_tip_res_users_rel_res_users_id_digest_tip_id_idx");
                        j.IndexerProperty<int>("DigestTipId").HasColumnName("digest_tip_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<EventEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_event_pkey");

            entity.ToTable("event_event", tb => tb.HasComment("Event"));

            entity.HasIndex(e => e.IsPublished, "event_event_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "event_event_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AddressId)
                .HasComment("Venue")
                .HasColumnName("address_id");
            entity.Property(e => e.AutoConfirm)
                .HasComment("Autoconfirmation")
                .HasColumnName("auto_confirm");
            entity.Property(e => e.CommunityMenu)
                .HasComment("Community Menu")
                .HasColumnName("community_menu");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CoverProperties)
                .HasComment("Cover Properties")
                .HasColumnName("cover_properties");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateBegin)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_begin");
            entity.Property(e => e.DateEnd)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateTz)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("date_tz");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.EventTypeId)
                .HasComment("Template")
                .HasColumnName("event_type_id");
            entity.Property(e => e.IntroductionMenu)
                .HasComment("Introduction Menu")
                .HasColumnName("introduction_menu");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.KanbanState)
                .HasComment("Kanban State")
                .HasColumnType("character varying")
                .HasColumnName("kanban_state");
            entity.Property(e => e.KanbanStateLabel)
                .HasComment("Kanban State Label")
                .HasColumnType("character varying")
                .HasColumnName("kanban_state_label");
            entity.Property(e => e.LocationMenu)
                .HasComment("Location Menu")
                .HasColumnName("location_menu");
            entity.Property(e => e.MenuId)
                .HasComment("Event Menu")
                .HasColumnName("menu_id");
            entity.Property(e => e.MenuRegisterCta)
                .HasComment("Extra Register Button")
                .HasColumnName("menu_register_cta");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Event")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.OrganizerId)
                .HasComment("Organizer")
                .HasColumnName("organizer_id");
            entity.Property(e => e.RegisterMenu)
                .HasComment("Register Menu")
                .HasColumnName("register_menu");
            entity.Property(e => e.SeatsLimited)
                .HasComment("Limit Attendees")
                .HasColumnName("seats_limited");
            entity.Property(e => e.SeatsMax)
                .HasComment("Maximum Attendees")
                .HasColumnName("seats_max");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.Subtitle)
                .HasComment("Event Subtitle")
                .HasColumnType("jsonb")
                .HasColumnName("subtitle");
            entity.Property(e => e.TicketInstructions)
                .HasComment("Ticket Instructions")
                .HasColumnType("jsonb")
                .HasColumnName("ticket_instructions");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteMenu)
                .HasComment("Website Menu")
                .HasColumnName("website_menu");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Address).WithMany(p => p.EventEventAddresses)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_address_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.EventEvents)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_company_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.EventEvents)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventEventCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_create_uid_fkey");

            entity.HasOne(d => d.EventType).WithMany(p => p.EventEvents)
                .HasForeignKey(d => d.EventTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_event_type_id_fkey");

            entity.HasOne(d => d.Menu).WithMany(p => p.EventEvents)
                .HasForeignKey(d => d.MenuId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_menu_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.EventEvents)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Organizer).WithMany(p => p.EventEventOrganizers)
                .HasForeignKey(d => d.OrganizerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_organizer_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.EventEvents)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("event_event_stage_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.EventEventUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_user_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.EventEvents)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("event_event_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventEventWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_write_uid_fkey");

            entity.HasMany(d => d.EventTags).WithMany(p => p.EventEvents)
                .UsingEntity<Dictionary<string, object>>(
                    "EventEventEventTagRel",
                    r => r.HasOne<EventTag>().WithMany()
                        .HasForeignKey("EventTagId")
                        .HasConstraintName("event_event_event_tag_rel_event_tag_id_fkey"),
                    l => l.HasOne<EventEvent>().WithMany()
                        .HasForeignKey("EventEventId")
                        .HasConstraintName("event_event_event_tag_rel_event_event_id_fkey"),
                    j =>
                    {
                        j.HasKey("EventEventId", "EventTagId").HasName("event_event_event_tag_rel_pkey");
                        j.ToTable("event_event_event_tag_rel", tb => tb.HasComment("RELATION BETWEEN event_event AND event_tag"));
                        j.HasIndex(new[] { "EventTagId", "EventEventId" }, "event_event_event_tag_rel_event_tag_id_event_event_id_idx");
                        j.IndexerProperty<int>("EventEventId").HasColumnName("event_event_id");
                        j.IndexerProperty<int>("EventTagId").HasColumnName("event_tag_id");
                    });
        });

        modelBuilder.Entity<EventEventConfigurator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_event_configurator_pkey");

            entity.ToTable("event_event_configurator", tb => tb.HasComment("Event Configurator"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.EventTicketId)
                .HasComment("Event Ticket")
                .HasColumnName("event_ticket_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventEventConfiguratorCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_configurator_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.EventEventConfigurators)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_configurator_event_id_fkey");

            entity.HasOne(d => d.EventTicket).WithMany(p => p.EventEventConfigurators)
                .HasForeignKey(d => d.EventTicketId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_configurator_event_ticket_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.EventEventConfigurators)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_configurator_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventEventConfiguratorWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_configurator_write_uid_fkey");
        });

        modelBuilder.Entity<EventEventTicket>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_event_ticket_pkey");

            entity.ToTable("event_event_ticket", tb => tb.HasComment("Event Ticket"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.EndSaleDatetime)
                .HasComment("Registration End")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_sale_datetime");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.EventTypeId)
                .HasComment("Event Category")
                .HasColumnName("event_type_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasComment("Price")
                .HasColumnName("price");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.SeatsLimited)
                .HasComment("Limit Attendees")
                .HasColumnName("seats_limited");
            entity.Property(e => e.SeatsMax)
                .HasComment("Maximum Attendees")
                .HasColumnName("seats_max");
            entity.Property(e => e.StartSaleDatetime)
                .HasComment("Registration Start")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_sale_datetime");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventEventTicketCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_ticket_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.EventEventTickets)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("event_event_ticket_event_id_fkey");

            entity.HasOne(d => d.EventType).WithMany(p => p.EventEventTickets)
                .HasForeignKey(d => d.EventTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_ticket_event_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.EventEventTickets)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("event_event_ticket_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventEventTicketWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_event_ticket_write_uid_fkey");
        });

        modelBuilder.Entity<EventLeadRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_lead_rule_pkey");

            entity.ToTable("event_lead_rule", tb => tb.HasComment("Event Lead Rules"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.EventRegistrationFilter)
                .HasComment("Registrations Domain")
                .HasColumnName("event_registration_filter");
            entity.Property(e => e.LeadCreationBasis)
                .HasComment("Create")
                .HasColumnType("character varying")
                .HasColumnName("lead_creation_basis");
            entity.Property(e => e.LeadCreationTrigger)
                .HasComment("When")
                .HasColumnType("character varying")
                .HasColumnName("lead_creation_trigger");
            entity.Property(e => e.LeadSalesTeamId)
                .HasComment("Sales Team")
                .HasColumnName("lead_sales_team_id");
            entity.Property(e => e.LeadType)
                .HasComment("Lead Type")
                .HasColumnType("character varying")
                .HasColumnName("lead_type");
            entity.Property(e => e.LeadUserId)
                .HasComment("Salesperson")
                .HasColumnName("lead_user_id");
            entity.Property(e => e.Name)
                .HasComment("Rule Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.EventLeadRules)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_lead_rule_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventLeadRuleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_lead_rule_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.EventLeadRules)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_lead_rule_event_id_fkey");

            entity.HasOne(d => d.LeadSalesTeam).WithMany(p => p.EventLeadRules)
                .HasForeignKey(d => d.LeadSalesTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_lead_rule_lead_sales_team_id_fkey");

            entity.HasOne(d => d.LeadUser).WithMany(p => p.EventLeadRuleLeadUsers)
                .HasForeignKey(d => d.LeadUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_lead_rule_lead_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventLeadRuleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_lead_rule_write_uid_fkey");

            entity.HasMany(d => d.CrmTags).WithMany(p => p.EventLeadRules)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmTagEventLeadRuleRel",
                    r => r.HasOne<CrmTag>().WithMany()
                        .HasForeignKey("CrmTagId")
                        .HasConstraintName("crm_tag_event_lead_rule_rel_crm_tag_id_fkey"),
                    l => l.HasOne<EventLeadRule>().WithMany()
                        .HasForeignKey("EventLeadRuleId")
                        .HasConstraintName("crm_tag_event_lead_rule_rel_event_lead_rule_id_fkey"),
                    j =>
                    {
                        j.HasKey("EventLeadRuleId", "CrmTagId").HasName("crm_tag_event_lead_rule_rel_pkey");
                        j.ToTable("crm_tag_event_lead_rule_rel", tb => tb.HasComment("RELATION BETWEEN event_lead_rule AND crm_tag"));
                        j.HasIndex(new[] { "CrmTagId", "EventLeadRuleId" }, "crm_tag_event_lead_rule_rel_crm_tag_id_event_lead_rule_id_idx");
                        j.IndexerProperty<int>("EventLeadRuleId").HasColumnName("event_lead_rule_id");
                        j.IndexerProperty<int>("CrmTagId").HasColumnName("crm_tag_id");
                    });

            entity.HasMany(d => d.EventTypes).WithMany(p => p.EventLeadRules)
                .UsingEntity<Dictionary<string, object>>(
                    "EventLeadRuleEventTypeRel",
                    r => r.HasOne<EventType>().WithMany()
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("event_lead_rule_event_type_rel_event_type_id_fkey"),
                    l => l.HasOne<EventLeadRule>().WithMany()
                        .HasForeignKey("EventLeadRuleId")
                        .HasConstraintName("event_lead_rule_event_type_rel_event_lead_rule_id_fkey"),
                    j =>
                    {
                        j.HasKey("EventLeadRuleId", "EventTypeId").HasName("event_lead_rule_event_type_rel_pkey");
                        j.ToTable("event_lead_rule_event_type_rel", tb => tb.HasComment("RELATION BETWEEN event_lead_rule AND event_type"));
                        j.HasIndex(new[] { "EventTypeId", "EventLeadRuleId" }, "event_lead_rule_event_type_re_event_type_id_event_lead_rule_idx");
                        j.IndexerProperty<int>("EventLeadRuleId").HasColumnName("event_lead_rule_id");
                        j.IndexerProperty<int>("EventTypeId").HasColumnName("event_type_id");
                    });
        });

        modelBuilder.Entity<EventMail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_mail_pkey");

            entity.ToTable("event_mail", tb => tb.HasComment("Event Automated Mailing"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.IntervalNbr)
                .HasComment("Interval")
                .HasColumnName("interval_nbr");
            entity.Property(e => e.IntervalType)
                .HasComment("Trigger ")
                .HasColumnType("character varying")
                .HasColumnName("interval_type");
            entity.Property(e => e.IntervalUnit)
                .HasComment("Unit")
                .HasColumnType("character varying")
                .HasColumnName("interval_unit");
            entity.Property(e => e.MailCountDone)
                .HasComment("# Sent")
                .HasColumnName("mail_count_done");
            entity.Property(e => e.MailDone)
                .HasComment("Sent")
                .HasColumnName("mail_done");
            entity.Property(e => e.NotificationType)
                .HasComment("Send")
                .HasColumnType("character varying")
                .HasColumnName("notification_type");
            entity.Property(e => e.ScheduledDate)
                .HasComment("Schedule Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.Sequence)
                .HasComment("Display order")
                .HasColumnName("sequence");
            entity.Property(e => e.TemplateRef)
                .HasComment("Template")
                .HasColumnType("character varying")
                .HasColumnName("template_ref");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventMailCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_mail_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.EventMails)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("event_mail_event_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventMailWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_mail_write_uid_fkey");
        });

        modelBuilder.Entity<EventMailRegistration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_mail_registration_pkey");

            entity.ToTable("event_mail_registration", tb => tb.HasComment("Registration Mail Scheduler"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailSent)
                .HasComment("Mail Sent")
                .HasColumnName("mail_sent");
            entity.Property(e => e.RegistrationId)
                .HasComment("Attendee")
                .HasColumnName("registration_id");
            entity.Property(e => e.ScheduledDate)
                .HasComment("Scheduled Time")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.SchedulerId)
                .HasComment("Mail Scheduler")
                .HasColumnName("scheduler_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventMailRegistrationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_mail_registration_create_uid_fkey");

            entity.HasOne(d => d.Registration).WithMany(p => p.EventMailRegistrations)
                .HasForeignKey(d => d.RegistrationId)
                .HasConstraintName("event_mail_registration_registration_id_fkey");

            entity.HasOne(d => d.Scheduler).WithMany(p => p.EventMailRegistrations)
                .HasForeignKey(d => d.SchedulerId)
                .HasConstraintName("event_mail_registration_scheduler_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventMailRegistrationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_mail_registration_write_uid_fkey");
        });

        modelBuilder.Entity<EventRegistration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_registration_pkey");

            entity.ToTable("event_registration", tb => tb.HasComment("Event Registration"));

            entity.HasIndex(e => e.Name, "event_registration_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.UtmCampaignId, "event_registration_utm_campaign_id_index");

            entity.HasIndex(e => e.UtmMediumId, "event_registration_utm_medium_id_index");

            entity.HasIndex(e => e.UtmSourceId, "event_registration_utm_source_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateClosed)
                .HasComment("Attended Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_closed");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.EventTicketId)
                .HasComment("Event Ticket")
                .HasColumnName("event_ticket_id");
            entity.Property(e => e.IsPaid)
                .HasComment("Is Paid")
                .HasColumnName("is_paid");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile)
                .HasComment("Mobile")
                .HasColumnType("character varying")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasComment("Attendee Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Booked by")
                .HasColumnName("partner_id");
            entity.Property(e => e.Phone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.SaleOrderId)
                .HasComment("Sales Order")
                .HasColumnName("sale_order_id");
            entity.Property(e => e.SaleOrderLineId)
                .HasComment("Sales Order Line")
                .HasColumnName("sale_order_line_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UtmCampaignId)
                .HasComment("Campaign")
                .HasColumnName("utm_campaign_id");
            entity.Property(e => e.UtmMediumId)
                .HasComment("Medium")
                .HasColumnName("utm_medium_id");
            entity.Property(e => e.UtmSourceId)
                .HasComment("Source")
                .HasColumnName("utm_source_id");
            entity.Property(e => e.VisitorId)
                .HasComment("Visitor")
                .HasColumnName("visitor_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventRegistrationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("event_registration_event_id_fkey");

            entity.HasOne(d => d.EventTicket).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.EventTicketId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("event_registration_event_ticket_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_partner_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("event_registration_sale_order_id_fkey");

            entity.HasOne(d => d.SaleOrderLine).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.SaleOrderLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("event_registration_sale_order_line_id_fkey");

            entity.HasOne(d => d.UtmCampaign).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.UtmCampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_utm_campaign_id_fkey");

            entity.HasOne(d => d.UtmMedium).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.UtmMediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_utm_medium_id_fkey");

            entity.HasOne(d => d.UtmSource).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.UtmSourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_utm_source_id_fkey");

            entity.HasOne(d => d.Visitor).WithMany(p => p.EventRegistrations)
                .HasForeignKey(d => d.VisitorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_visitor_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventRegistrationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_registration_write_uid_fkey");

            entity.HasMany(d => d.CrmLeads).WithMany(p => p.EventRegistrations)
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadEventRegistrationRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_lead_event_registration_rel_crm_lead_id_fkey"),
                    l => l.HasOne<EventRegistration>().WithMany()
                        .HasForeignKey("EventRegistrationId")
                        .HasConstraintName("crm_lead_event_registration_rel_event_registration_id_fkey"),
                    j =>
                    {
                        j.HasKey("EventRegistrationId", "CrmLeadId").HasName("crm_lead_event_registration_rel_pkey");
                        j.ToTable("crm_lead_event_registration_rel", tb => tb.HasComment("RELATION BETWEEN event_registration AND crm_lead"));
                        j.HasIndex(new[] { "CrmLeadId", "EventRegistrationId" }, "crm_lead_event_registration_r_crm_lead_id_event_registratio_idx");
                        j.IndexerProperty<int>("EventRegistrationId").HasColumnName("event_registration_id");
                        j.IndexerProperty<int>("CrmLeadId").HasColumnName("crm_lead_id");
                    });
        });

        modelBuilder.Entity<EventSaleReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("event_sale_report");

            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.EventDateBegin)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("event_date_begin");
            entity.Property(e => e.EventDateEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("event_date_end");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventRegistrationCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("event_registration_create_date");
            entity.Property(e => e.EventRegistrationId).HasColumnName("event_registration_id");
            entity.Property(e => e.EventRegistrationName)
                .HasColumnType("character varying")
                .HasColumnName("event_registration_name");
            entity.Property(e => e.EventRegistrationState)
                .HasColumnType("character varying")
                .HasColumnName("event_registration_state");
            entity.Property(e => e.EventTicketId).HasColumnName("event_ticket_id");
            entity.Property(e => e.EventTicketPrice).HasColumnName("event_ticket_price");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InvoicePartnerId).HasColumnName("invoice_partner_id");
            entity.Property(e => e.IsPaid).HasColumnName("is_paid");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.PaymentStatus).HasColumnName("payment_status");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SaleOrderDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sale_order_date");
            entity.Property(e => e.SaleOrderId).HasColumnName("sale_order_id");
            entity.Property(e => e.SaleOrderLineId).HasColumnName("sale_order_line_id");
            entity.Property(e => e.SaleOrderPartnerId).HasColumnName("sale_order_partner_id");
            entity.Property(e => e.SaleOrderState)
                .HasColumnType("character varying")
                .HasColumnName("sale_order_state");
            entity.Property(e => e.SaleOrderUserId).HasColumnName("sale_order_user_id");
            entity.Property(e => e.SalePrice).HasColumnName("sale_price");
            entity.Property(e => e.SalePriceUntaxed).HasColumnName("sale_price_untaxed");
        });

        modelBuilder.Entity<EventStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_stage_pkey");

            entity.ToTable("event_stage", tb => tb.HasComment("Event Stage"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Stage description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Fold)
                .HasComment("Folded in Kanban")
                .HasColumnName("fold");
            entity.Property(e => e.LegendBlocked)
                .HasComment("Red Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_blocked");
            entity.Property(e => e.LegendDone)
                .HasComment("Green Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_done");
            entity.Property(e => e.LegendNormal)
                .HasComment("Grey Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_normal");
            entity.Property(e => e.Name)
                .HasComment("Stage Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PipeEnd)
                .HasComment("End Stage")
                .HasColumnName("pipe_end");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventStageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_stage_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventStageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_stage_write_uid_fkey");
        });

        modelBuilder.Entity<EventTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_tag_pkey");

            entity.ToTable("event_tag", tb => tb.HasComment("Event Tag"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CategoryId)
                .HasComment("Category")
                .HasColumnName("category_id");
            entity.Property(e => e.CategorySequence)
                .HasComment("Category Sequence")
                .HasColumnName("category_sequence");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.EventTags)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("event_tag_category_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_tag_write_uid_fkey");
        });

        modelBuilder.Entity<EventTagCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_tag_category_pkey");

            entity.ToTable("event_tag_category", tb => tb.HasComment("Event Tag Category"));

            entity.HasIndex(e => e.IsPublished, "event_tag_category_is_published_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventTagCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_tag_category_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventTagCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_tag_category_write_uid_fkey");
        });

        modelBuilder.Entity<EventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_type_pkey");

            entity.ToTable("event_type", tb => tb.HasComment("Event Template"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AutoConfirm)
                .HasComment("Automatically Confirm Registrations")
                .HasColumnName("auto_confirm");
            entity.Property(e => e.CommunityMenu)
                .HasComment("Community Menu")
                .HasColumnName("community_menu");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultTimezone)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("default_timezone");
            entity.Property(e => e.HasSeatsLimitation)
                .HasComment("Limited Seats")
                .HasColumnName("has_seats_limitation");
            entity.Property(e => e.MenuRegisterCta)
                .HasComment("Extra Register Button")
                .HasColumnName("menu_register_cta");
            entity.Property(e => e.Name)
                .HasComment("Event Template")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.SeatsMax)
                .HasComment("Maximum Registrations")
                .HasColumnName("seats_max");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TicketInstructions)
                .HasComment("Ticket Instructions")
                .HasColumnType("jsonb")
                .HasColumnName("ticket_instructions");
            entity.Property(e => e.WebsiteMenu)
                .HasComment("Display a dedicated menu on Website")
                .HasColumnName("website_menu");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_type_write_uid_fkey");

            entity.HasMany(d => d.EventTags).WithMany(p => p.EventTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "EventTagEventTypeRel",
                    r => r.HasOne<EventTag>().WithMany()
                        .HasForeignKey("EventTagId")
                        .HasConstraintName("event_tag_event_type_rel_event_tag_id_fkey"),
                    l => l.HasOne<EventType>().WithMany()
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("event_tag_event_type_rel_event_type_id_fkey"),
                    j =>
                    {
                        j.HasKey("EventTypeId", "EventTagId").HasName("event_tag_event_type_rel_pkey");
                        j.ToTable("event_tag_event_type_rel", tb => tb.HasComment("RELATION BETWEEN event_type AND event_tag"));
                        j.HasIndex(new[] { "EventTagId", "EventTypeId" }, "event_tag_event_type_rel_event_tag_id_event_type_id_idx");
                        j.IndexerProperty<int>("EventTypeId").HasColumnName("event_type_id");
                        j.IndexerProperty<int>("EventTagId").HasColumnName("event_tag_id");
                    });
        });

        modelBuilder.Entity<EventTypeMail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_type_mail_pkey");

            entity.ToTable("event_type_mail", tb => tb.HasComment("Mail Scheduling on Event Category"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EventTypeId)
                .HasComment("Event Type")
                .HasColumnName("event_type_id");
            entity.Property(e => e.IntervalNbr)
                .HasComment("Interval")
                .HasColumnName("interval_nbr");
            entity.Property(e => e.IntervalType)
                .HasComment("Trigger")
                .HasColumnType("character varying")
                .HasColumnName("interval_type");
            entity.Property(e => e.IntervalUnit)
                .HasComment("Unit")
                .HasColumnType("character varying")
                .HasColumnName("interval_unit");
            entity.Property(e => e.NotificationType)
                .HasComment("Send")
                .HasColumnType("character varying")
                .HasColumnName("notification_type");
            entity.Property(e => e.TemplateRef)
                .HasComment("Template")
                .HasColumnType("character varying")
                .HasColumnName("template_ref");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventTypeMailCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_type_mail_create_uid_fkey");

            entity.HasOne(d => d.EventType).WithMany(p => p.EventTypeMails)
                .HasForeignKey(d => d.EventTypeId)
                .HasConstraintName("event_type_mail_event_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventTypeMailWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_type_mail_write_uid_fkey");
        });

        modelBuilder.Entity<EventTypeTicket>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_type_ticket_pkey");

            entity.ToTable("event_type_ticket", tb => tb.HasComment("Event Template Ticket"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.EventTypeId)
                .HasComment("Event Category")
                .HasColumnName("event_type_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasComment("Price")
                .HasColumnName("price");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.SeatsLimited)
                .HasComment("Limit Attendees")
                .HasColumnName("seats_limited");
            entity.Property(e => e.SeatsMax)
                .HasComment("Maximum Attendees")
                .HasColumnName("seats_max");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.EventTypeTicketCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_type_ticket_create_uid_fkey");

            entity.HasOne(d => d.EventType).WithMany(p => p.EventTypeTickets)
                .HasForeignKey(d => d.EventTypeId)
                .HasConstraintName("event_type_ticket_event_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.EventTypeTickets)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("event_type_ticket_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.EventTypeTicketWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("event_type_ticket_write_uid_fkey");
        });

        modelBuilder.Entity<FetchmailServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fetchmail_server_pkey");

            entity.ToTable("fetchmail_server", tb => tb.HasComment("Incoming Mail Server"));

            entity.HasIndex(e => e.ServerType, "fetchmail_server_server_type_index");

            entity.HasIndex(e => e.State, "fetchmail_server_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Attach)
                .HasComment("Keep Attachments")
                .HasColumnName("attach");
            entity.Property(e => e.Configuration)
                .HasComment("Configuration")
                .HasColumnName("configuration");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Last Fetch Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.GoogleGmailAccessToken)
                .HasComment("Access Token")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_access_token");
            entity.Property(e => e.GoogleGmailAccessTokenExpiration)
                .HasComment("Access Token Expiration Timestamp")
                .HasColumnName("google_gmail_access_token_expiration");
            entity.Property(e => e.GoogleGmailAuthorizationCode)
                .HasComment("Authorization Code")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_authorization_code");
            entity.Property(e => e.GoogleGmailRefreshToken)
                .HasComment("Refresh Token")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_refresh_token");
            entity.Property(e => e.IsSsl)
                .HasComment("SSL/TLS")
                .HasColumnName("is_ssl");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId)
                .HasComment("Create a New Record")
                .HasColumnName("object_id");
            entity.Property(e => e.Original)
                .HasComment("Keep Original")
                .HasColumnName("original");
            entity.Property(e => e.Password)
                .HasComment("Password")
                .HasColumnType("character varying")
                .HasColumnName("password");
            entity.Property(e => e.Port)
                .HasComment("Port")
                .HasColumnName("port");
            entity.Property(e => e.Priority)
                .HasComment("Server Priority")
                .HasColumnName("priority");
            entity.Property(e => e.Script)
                .HasComment("Script")
                .HasColumnType("character varying")
                .HasColumnName("script");
            entity.Property(e => e.Server)
                .HasComment("Server Name")
                .HasColumnType("character varying")
                .HasColumnName("server");
            entity.Property(e => e.ServerType)
                .HasComment("Server Type")
                .HasColumnType("character varying")
                .HasColumnName("server_type");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.User)
                .HasComment("Username")
                .HasColumnType("character varying")
                .HasColumnName("user");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FetchmailServerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fetchmail_server_create_uid_fkey");

            entity.HasOne(d => d.Object).WithMany(p => p.FetchmailServers)
                .HasForeignKey(d => d.ObjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fetchmail_server_object_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FetchmailServerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fetchmail_server_write_uid_fkey");
        });

        modelBuilder.Entity<FleetServiceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_service_type_pkey");

            entity.ToTable("fleet_service_type", tb => tb.HasComment("Fleet Service Type"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category)
                .HasComment("Category")
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetServiceTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_service_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetServiceTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_service_type_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_pkey");

            entity.ToTable("fleet_vehicle", tb => tb.HasComment("Vehicle"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AcquisitionDate)
                .HasComment("Registration Date")
                .HasColumnName("acquisition_date");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.BrandId)
                .HasComment("Brand")
                .HasColumnName("brand_id");
            entity.Property(e => e.CarValue)
                .HasComment("Catalog Value (VAT Incl.)")
                .HasColumnName("car_value");
            entity.Property(e => e.CategoryId)
                .HasComment("Category")
                .HasColumnName("category_id");
            entity.Property(e => e.Co2)
                .HasComment("CO2 Emissions")
                .HasColumnName("co2");
            entity.Property(e => e.Co2Standard)
                .HasComment("CO2 Standard")
                .HasColumnType("character varying")
                .HasColumnName("co2_standard");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnType("character varying")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Vehicle Description")
                .HasColumnName("description");
            entity.Property(e => e.Doors)
                .HasComment("Doors Number")
                .HasColumnName("doors");
            entity.Property(e => e.DriverEmployeeId)
                .HasComment("Driver (Employee)")
                .HasColumnName("driver_employee_id");
            entity.Property(e => e.DriverId)
                .HasComment("Driver")
                .HasColumnName("driver_id");
            entity.Property(e => e.ElectricAssistance)
                .HasComment("Electric Assistance")
                .HasColumnName("electric_assistance");
            entity.Property(e => e.FirstContractDate)
                .HasComment("First Contract Date")
                .HasColumnName("first_contract_date");
            entity.Property(e => e.FrameSize)
                .HasComment("Frame Size")
                .HasColumnName("frame_size");
            entity.Property(e => e.FrameType)
                .HasComment("Bike Frame Type")
                .HasColumnType("character varying")
                .HasColumnName("frame_type");
            entity.Property(e => e.FuelType)
                .HasComment("Fuel Type")
                .HasColumnType("character varying")
                .HasColumnName("fuel_type");
            entity.Property(e => e.FutureDriverEmployeeId)
                .HasComment("Future Driver (Employee)")
                .HasColumnName("future_driver_employee_id");
            entity.Property(e => e.FutureDriverId)
                .HasComment("Future Driver")
                .HasColumnName("future_driver_id");
            entity.Property(e => e.Horsepower)
                .HasComment("Horsepower")
                .HasColumnName("horsepower");
            entity.Property(e => e.HorsepowerTax)
                .HasComment("Horsepower Taxation")
                .HasColumnName("horsepower_tax");
            entity.Property(e => e.LicensePlate)
                .HasComment("License Plate")
                .HasColumnType("character varying")
                .HasColumnName("license_plate");
            entity.Property(e => e.Location)
                .HasComment("Location")
                .HasColumnType("character varying")
                .HasColumnName("location");
            entity.Property(e => e.ManagerId)
                .HasComment("Fleet Manager")
                .HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MobilityCard)
                .HasComment("Mobility Card")
                .HasColumnType("character varying")
                .HasColumnName("mobility_card");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.ModelYear)
                .HasComment("Model Year")
                .HasColumnType("character varying")
                .HasColumnName("model_year");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NetCarValue)
                .HasComment("Purchase Value")
                .HasColumnName("net_car_value");
            entity.Property(e => e.NextAssignationDate)
                .HasComment("Assignment Date")
                .HasColumnName("next_assignation_date");
            entity.Property(e => e.OdometerUnit)
                .HasComment("Odometer Unit")
                .HasColumnType("character varying")
                .HasColumnName("odometer_unit");
            entity.Property(e => e.PlanToChangeBike)
                .HasComment("Plan To Change Bike")
                .HasColumnName("plan_to_change_bike");
            entity.Property(e => e.PlanToChangeCar)
                .HasComment("Plan To Change Car")
                .HasColumnName("plan_to_change_car");
            entity.Property(e => e.Power)
                .HasComment("Power")
                .HasColumnName("power");
            entity.Property(e => e.ResidualValue)
                .HasComment("Residual Value")
                .HasColumnName("residual_value");
            entity.Property(e => e.Seats)
                .HasComment("Seats Number")
                .HasColumnName("seats");
            entity.Property(e => e.StateId)
                .HasComment("State")
                .HasColumnName("state_id");
            entity.Property(e => e.TrailerHook)
                .HasComment("Trailer Hitch")
                .HasColumnName("trailer_hook");
            entity.Property(e => e.Transmission)
                .HasComment("Transmission")
                .HasColumnType("character varying")
                .HasColumnName("transmission");
            entity.Property(e => e.VinSn)
                .HasComment("Chassis Number")
                .HasColumnType("character varying")
                .HasColumnName("vin_sn");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteOffDate)
                .HasComment("Cancellation Date")
                .HasColumnName("write_off_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Brand).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_brand_id_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_category_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_create_uid_fkey");

            entity.HasOne(d => d.DriverEmployee).WithMany(p => p.FleetVehicleDriverEmployees)
                .HasForeignKey(d => d.DriverEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_driver_employee_id_fkey");

            entity.HasOne(d => d.Driver).WithMany(p => p.FleetVehicleDrivers)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_driver_id_fkey");

            entity.HasOne(d => d.FutureDriverEmployee).WithMany(p => p.FleetVehicleFutureDriverEmployees)
                .HasForeignKey(d => d.FutureDriverEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_future_driver_employee_id_fkey");

            entity.HasOne(d => d.FutureDriver).WithMany(p => p.FleetVehicleFutureDrivers)
                .HasForeignKey(d => d.FutureDriverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_future_driver_id_fkey");

            entity.HasOne(d => d.Manager).WithMany(p => p.FleetVehicleManagers)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_model_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_state_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_write_uid_fkey");

            entity.HasMany(d => d.Tags).WithMany(p => p.VehicleTags)
                .UsingEntity<Dictionary<string, object>>(
                    "FleetVehicleVehicleTagRel",
                    r => r.HasOne<FleetVehicleTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("fleet_vehicle_vehicle_tag_rel_tag_id_fkey"),
                    l => l.HasOne<FleetVehicle>().WithMany()
                        .HasForeignKey("VehicleTagId")
                        .HasConstraintName("fleet_vehicle_vehicle_tag_rel_vehicle_tag_id_fkey"),
                    j =>
                    {
                        j.HasKey("VehicleTagId", "TagId").HasName("fleet_vehicle_vehicle_tag_rel_pkey");
                        j.ToTable("fleet_vehicle_vehicle_tag_rel", tb => tb.HasComment("RELATION BETWEEN fleet_vehicle AND fleet_vehicle_tag"));
                        j.HasIndex(new[] { "TagId", "VehicleTagId" }, "fleet_vehicle_vehicle_tag_rel_tag_id_vehicle_tag_id_idx");
                        j.IndexerProperty<int>("VehicleTagId").HasColumnName("vehicle_tag_id");
                        j.IndexerProperty<int>("TagId").HasColumnName("tag_id");
                    });
        });

        modelBuilder.Entity<FleetVehicleAssignationLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_assignation_log_pkey");

            entity.ToTable("fleet_vehicle_assignation_log", tb => tb.HasComment("Drivers history on a vehicle"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateEnd)
                .HasComment("End Date")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnName("date_start");
            entity.Property(e => e.DriverEmployeeId)
                .HasComment("Driver (Employee)")
                .HasColumnName("driver_employee_id");
            entity.Property(e => e.DriverId)
                .HasComment("Driver")
                .HasColumnName("driver_id");
            entity.Property(e => e.VehicleId)
                .HasComment("Vehicle")
                .HasColumnName("vehicle_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleAssignationLogCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_assignation_log_create_uid_fkey");

            entity.HasOne(d => d.DriverEmployee).WithMany(p => p.FleetVehicleAssignationLogs)
                .HasForeignKey(d => d.DriverEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_assignation_log_driver_employee_id_fkey");

            entity.HasOne(d => d.Driver).WithMany(p => p.FleetVehicleAssignationLogs)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_assignation_log_driver_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleAssignationLogs)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_assignation_log_vehicle_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleAssignationLogWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_assignation_log_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleCostReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("fleet_vehicle_cost_report");

            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType).HasColumnName("cost_type");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.DriverId).HasColumnName("driver_id");
            entity.Property(e => e.FuelType)
                .HasColumnType("character varying")
                .HasColumnName("fuel_type");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.VehicleType)
                .HasColumnType("character varying")
                .HasColumnName("vehicle_type");
        });

        modelBuilder.Entity<FleetVehicleLogContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_log_contract_pkey");

            entity.ToTable("fleet_vehicle_log_contract", tb => tb.HasComment("Vehicle Contract"));

            entity.HasIndex(e => e.UserId, "fleet_vehicle_log_contract_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Amount)
                .HasComment("Cost")
                .HasColumnName("amount");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CostFrequency)
                .HasComment("Recurring Cost Frequency")
                .HasColumnType("character varying")
                .HasColumnName("cost_frequency");
            entity.Property(e => e.CostGenerated)
                .HasComment("Recurring Cost")
                .HasColumnName("cost_generated");
            entity.Property(e => e.CostSubtypeId)
                .HasComment("Type")
                .HasColumnName("cost_subtype_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.ExpirationDate)
                .HasComment("Contract Expiration Date")
                .HasColumnName("expiration_date");
            entity.Property(e => e.InsRef)
                .HasMaxLength(64)
                .HasComment("Reference")
                .HasColumnName("ins_ref");
            entity.Property(e => e.InsurerId)
                .HasComment("Vendor")
                .HasColumnName("insurer_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Notes)
                .HasComment("Terms and Conditions")
                .HasColumnName("notes");
            entity.Property(e => e.StartDate)
                .HasComment("Contract Start Date")
                .HasColumnName("start_date");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.VehicleId)
                .HasComment("Vehicle")
                .HasColumnName("vehicle_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.FleetVehicleLogContracts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_company_id_fkey");

            entity.HasOne(d => d.CostSubtype).WithMany(p => p.FleetVehicleLogContractsNavigation)
                .HasForeignKey(d => d.CostSubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_cost_subtype_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleLogContractCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_create_uid_fkey");

            entity.HasOne(d => d.Insurer).WithMany(p => p.FleetVehicleLogContracts)
                .HasForeignKey(d => d.InsurerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_insurer_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.FleetVehicleLogContracts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_message_main_attachment_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.FleetVehicleLogContractUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_user_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleLogContracts)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_log_contract_vehicle_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleLogContractWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_write_uid_fkey");

            entity.HasMany(d => d.FleetServiceTypes).WithMany(p => p.FleetVehicleLogContracts)
                .UsingEntity<Dictionary<string, object>>(
                    "FleetServiceTypeFleetVehicleLogContractRel",
                    r => r.HasOne<FleetServiceType>().WithMany()
                        .HasForeignKey("FleetServiceTypeId")
                        .HasConstraintName("fleet_service_type_fleet_vehicle_log_fleet_service_type_id_fkey"),
                    l => l.HasOne<FleetVehicleLogContract>().WithMany()
                        .HasForeignKey("FleetVehicleLogContractId")
                        .HasConstraintName("fleet_service_type_fleet_vehi_fleet_vehicle_log_contract_i_fkey"),
                    j =>
                    {
                        j.HasKey("FleetVehicleLogContractId", "FleetServiceTypeId").HasName("fleet_service_type_fleet_vehicle_log_contract_rel_pkey");
                        j.ToTable("fleet_service_type_fleet_vehicle_log_contract_rel", tb => tb.HasComment("RELATION BETWEEN fleet_vehicle_log_contract AND fleet_service_type"));
                        j.HasIndex(new[] { "FleetServiceTypeId", "FleetVehicleLogContractId" }, "fleet_service_type_fleet_vehi_fleet_service_type_id_fleet_v_idx");
                        j.IndexerProperty<int>("FleetVehicleLogContractId").HasColumnName("fleet_vehicle_log_contract_id");
                        j.IndexerProperty<int>("FleetServiceTypeId").HasColumnName("fleet_service_type_id");
                    });
        });

        modelBuilder.Entity<FleetVehicleLogService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_log_services_pkey");

            entity.ToTable("fleet_vehicle_log_services", tb => tb.HasComment("Services for vehicles"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Amount)
                .HasComment("Cost")
                .HasColumnName("amount");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("description");
            entity.Property(e => e.InvRef)
                .HasComment("Vendor Reference")
                .HasColumnType("character varying")
                .HasColumnName("inv_ref");
            entity.Property(e => e.ManagerId)
                .HasComment("Fleet Manager")
                .HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Notes)
                .HasComment("Notes")
                .HasColumnName("notes");
            entity.Property(e => e.OdometerId)
                .HasComment("Odometer")
                .HasColumnName("odometer_id");
            entity.Property(e => e.PurchaserEmployeeId)
                .HasComment("Driver (Employee)")
                .HasColumnName("purchaser_employee_id");
            entity.Property(e => e.PurchaserId)
                .HasComment("Driver")
                .HasColumnName("purchaser_id");
            entity.Property(e => e.ServiceTypeId)
                .HasComment("Service Type")
                .HasColumnName("service_type_id");
            entity.Property(e => e.State)
                .HasComment("Stage")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.VehicleId)
                .HasComment("Vehicle")
                .HasColumnName("vehicle_id");
            entity.Property(e => e.VendorId)
                .HasComment("Vendor")
                .HasColumnName("vendor_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleLogServiceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_create_uid_fkey");

            entity.HasOne(d => d.Manager).WithMany(p => p.FleetVehicleLogServiceManagers)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Odometer).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.OdometerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_odometer_id_fkey");

            entity.HasOne(d => d.PurchaserEmployee).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.PurchaserEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_purchaser_employee_id_fkey");

            entity.HasOne(d => d.Purchaser).WithMany(p => p.FleetVehicleLogServicePurchasers)
                .HasForeignKey(d => d.PurchaserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_purchaser_id_fkey");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_log_services_service_type_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_log_services_vehicle_id_fkey");

            entity.HasOne(d => d.Vendor).WithMany(p => p.FleetVehicleLogServiceVendors)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_vendor_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleLogServiceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_model_pkey");

            entity.ToTable("fleet_vehicle_model", tb => tb.HasComment("Model of a vehicle"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.BrandId)
                .HasComment("Manufacturer")
                .HasColumnName("brand_id");
            entity.Property(e => e.CategoryId)
                .HasComment("Category")
                .HasColumnName("category_id");
            entity.Property(e => e.Co2Standard)
                .HasComment("Co2 Standard")
                .HasColumnType("character varying")
                .HasColumnName("co2_standard");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnType("character varying")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultCo2)
                .HasComment("CO2 Emissions")
                .HasColumnName("default_co2");
            entity.Property(e => e.DefaultFuelType)
                .HasComment("Fuel Type")
                .HasColumnType("character varying")
                .HasColumnName("default_fuel_type");
            entity.Property(e => e.Doors)
                .HasComment("Doors Number")
                .HasColumnName("doors");
            entity.Property(e => e.ElectricAssistance)
                .HasComment("Electric Assistance")
                .HasColumnName("electric_assistance");
            entity.Property(e => e.Horsepower)
                .HasComment("Horsepower")
                .HasColumnName("horsepower");
            entity.Property(e => e.HorsepowerTax)
                .HasComment("Horsepower Taxation")
                .HasColumnName("horsepower_tax");
            entity.Property(e => e.ModelYear)
                .HasComment("Model Year")
                .HasColumnName("model_year");
            entity.Property(e => e.Name)
                .HasComment("Model name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Power)
                .HasComment("Power")
                .HasColumnName("power");
            entity.Property(e => e.Seats)
                .HasComment("Seats Number")
                .HasColumnName("seats");
            entity.Property(e => e.TrailerHook)
                .HasComment("Trailer Hitch")
                .HasColumnName("trailer_hook");
            entity.Property(e => e.Transmission)
                .HasComment("Transmission")
                .HasColumnType("character varying")
                .HasColumnName("transmission");
            entity.Property(e => e.VehicleType)
                .HasComment("Vehicle Type")
                .HasColumnType("character varying")
                .HasColumnName("vehicle_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Brand).WithMany(p => p.FleetVehicleModels)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_model_brand_id_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.FleetVehicleModels)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_category_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleModelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleModelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_write_uid_fkey");

            entity.HasMany(d => d.Partners).WithMany(p => p.Models)
                .UsingEntity<Dictionary<string, object>>(
                    "FleetVehicleModelVendor",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("fleet_vehicle_model_vendors_partner_id_fkey"),
                    l => l.HasOne<FleetVehicleModel>().WithMany()
                        .HasForeignKey("ModelId")
                        .HasConstraintName("fleet_vehicle_model_vendors_model_id_fkey"),
                    j =>
                    {
                        j.HasKey("ModelId", "PartnerId").HasName("fleet_vehicle_model_vendors_pkey");
                        j.ToTable("fleet_vehicle_model_vendors", tb => tb.HasComment("RELATION BETWEEN fleet_vehicle_model AND res_partner"));
                        j.HasIndex(new[] { "PartnerId", "ModelId" }, "fleet_vehicle_model_vendors_partner_id_model_id_idx");
                        j.IndexerProperty<int>("ModelId").HasColumnName("model_id");
                        j.IndexerProperty<int>("PartnerId").HasColumnName("partner_id");
                    });
        });

        modelBuilder.Entity<FleetVehicleModelBrand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_model_brand_pkey");

            entity.ToTable("fleet_vehicle_model_brand", tb => tb.HasComment("Brand of the vehicle"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ModelCount)
                .HasComment("Model Count")
                .HasColumnName("model_count");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleModelBrandCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_brand_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleModelBrandWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_brand_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleModelCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_model_category_pkey");

            entity.ToTable("fleet_vehicle_model_category", tb => tb.HasComment("Category of the model"));

            entity.HasIndex(e => e.Name, "fleet_vehicle_model_category_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleModelCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_category_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleModelCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_category_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleOdometer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_odometer_pkey");

            entity.ToTable("fleet_vehicle_odometer", tb => tb.HasComment("Odometer log for a vehicle"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Value)
                .HasComment("Odometer Value")
                .HasColumnName("value");
            entity.Property(e => e.VehicleId)
                .HasComment("Vehicle")
                .HasColumnName("vehicle_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleOdometerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_odometer_create_uid_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleOdometers)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_odometer_vehicle_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleOdometerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_odometer_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_state_pkey");

            entity.ToTable("fleet_vehicle_state", tb => tb.HasComment("Vehicle Status"));

            entity.HasIndex(e => e.Name, "fleet_vehicle_state_fleet_state_name_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleStateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_state_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleStateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_state_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_tag_pkey");

            entity.ToTable("fleet_vehicle_tag", tb => tb.HasComment("Vehicle Tag"));

            entity.HasIndex(e => e.Name, "fleet_vehicle_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.FleetVehicleTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.FleetVehicleTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_tag_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationBadge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_badge_pkey");

            entity.ToTable("gamification_badge", tb => tb.HasComment("Gamification Badge"));

            entity.HasIndex(e => e.IsPublished, "gamification_badge_is_published_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Level)
                .HasComment("Forum Badge Level")
                .HasColumnType("character varying")
                .HasColumnName("level");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Badge")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RuleAuth)
                .HasComment("Allowance to Grant")
                .HasColumnType("character varying")
                .HasColumnName("rule_auth");
            entity.Property(e => e.RuleMax)
                .HasComment("Monthly Limited Sending")
                .HasColumnName("rule_max");
            entity.Property(e => e.RuleMaxNumber)
                .HasComment("Limitation Number")
                .HasColumnName("rule_max_number");
            entity.Property(e => e.SurveyId)
                .HasComment("Survey")
                .HasColumnName("survey_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationBadgeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.GamificationBadges)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Survey).WithMany(p => p.GamificationBadges)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_survey_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationBadgeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_write_uid_fkey");

            entity.HasMany(d => d.Badge1s).WithMany(p => p.Badge2s)
                .UsingEntity<Dictionary<string, object>>(
                    "GamificationBadgeRuleBadgeRel",
                    r => r.HasOne<GamificationBadge>().WithMany()
                        .HasForeignKey("Badge1Id")
                        .HasConstraintName("gamification_badge_rule_badge_rel_badge1_id_fkey"),
                    l => l.HasOne<GamificationBadge>().WithMany()
                        .HasForeignKey("Badge2Id")
                        .HasConstraintName("gamification_badge_rule_badge_rel_badge2_id_fkey"),
                    j =>
                    {
                        j.HasKey("Badge1Id", "Badge2Id").HasName("gamification_badge_rule_badge_rel_pkey");
                        j.ToTable("gamification_badge_rule_badge_rel", tb => tb.HasComment("RELATION BETWEEN gamification_badge AND gamification_badge"));
                        j.HasIndex(new[] { "Badge2Id", "Badge1Id" }, "gamification_badge_rule_badge_rel_badge2_id_badge1_id_idx");
                        j.IndexerProperty<int>("Badge1Id").HasColumnName("badge1_id");
                        j.IndexerProperty<int>("Badge2Id").HasColumnName("badge2_id");
                    });

            entity.HasMany(d => d.Badge2s).WithMany(p => p.Badge1s)
                .UsingEntity<Dictionary<string, object>>(
                    "GamificationBadgeRuleBadgeRel",
                    r => r.HasOne<GamificationBadge>().WithMany()
                        .HasForeignKey("Badge2Id")
                        .HasConstraintName("gamification_badge_rule_badge_rel_badge2_id_fkey"),
                    l => l.HasOne<GamificationBadge>().WithMany()
                        .HasForeignKey("Badge1Id")
                        .HasConstraintName("gamification_badge_rule_badge_rel_badge1_id_fkey"),
                    j =>
                    {
                        j.HasKey("Badge1Id", "Badge2Id").HasName("gamification_badge_rule_badge_rel_pkey");
                        j.ToTable("gamification_badge_rule_badge_rel", tb => tb.HasComment("RELATION BETWEEN gamification_badge AND gamification_badge"));
                        j.HasIndex(new[] { "Badge2Id", "Badge1Id" }, "gamification_badge_rule_badge_rel_badge2_id_badge1_id_idx");
                        j.IndexerProperty<int>("Badge1Id").HasColumnName("badge1_id");
                        j.IndexerProperty<int>("Badge2Id").HasColumnName("badge2_id");
                    });

            entity.HasMany(d => d.GamificationGoalDefinitions).WithMany(p => p.GamificationBadges)
                .UsingEntity<Dictionary<string, object>>(
                    "BadgeUnlockedDefinitionRel",
                    r => r.HasOne<GamificationGoalDefinition>().WithMany()
                        .HasForeignKey("GamificationGoalDefinitionId")
                        .HasConstraintName("badge_unlocked_definition_rel_gamification_goal_definition_fkey"),
                    l => l.HasOne<GamificationBadge>().WithMany()
                        .HasForeignKey("GamificationBadgeId")
                        .HasConstraintName("badge_unlocked_definition_rel_gamification_badge_id_fkey"),
                    j =>
                    {
                        j.HasKey("GamificationBadgeId", "GamificationGoalDefinitionId").HasName("badge_unlocked_definition_rel_pkey");
                        j.ToTable("badge_unlocked_definition_rel", tb => tb.HasComment("RELATION BETWEEN gamification_badge AND gamification_goal_definition"));
                        j.HasIndex(new[] { "GamificationGoalDefinitionId", "GamificationBadgeId" }, "badge_unlocked_definition_rel_gamification_goal_definition__idx");
                        j.IndexerProperty<int>("GamificationBadgeId").HasColumnName("gamification_badge_id");
                        j.IndexerProperty<int>("GamificationGoalDefinitionId").HasColumnName("gamification_goal_definition_id");
                    });

            entity.HasMany(d => d.ResUsers).WithMany(p => p.GamificationBadges)
                .UsingEntity<Dictionary<string, object>>(
                    "RelBadgeAuthUser",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("rel_badge_auth_users_res_users_id_fkey"),
                    l => l.HasOne<GamificationBadge>().WithMany()
                        .HasForeignKey("GamificationBadgeId")
                        .HasConstraintName("rel_badge_auth_users_gamification_badge_id_fkey"),
                    j =>
                    {
                        j.HasKey("GamificationBadgeId", "ResUsersId").HasName("rel_badge_auth_users_pkey");
                        j.ToTable("rel_badge_auth_users", tb => tb.HasComment("RELATION BETWEEN gamification_badge AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "GamificationBadgeId" }, "rel_badge_auth_users_res_users_id_gamification_badge_id_idx");
                        j.IndexerProperty<int>("GamificationBadgeId").HasColumnName("gamification_badge_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<GamificationBadgeUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_badge_user_pkey");

            entity.ToTable("gamification_badge_user", tb => tb.HasComment("Gamification User Badge"));

            entity.HasIndex(e => e.BadgeId, "gamification_badge_user_badge_id_index");

            entity.HasIndex(e => e.EmployeeId, "gamification_badge_user_employee_id_index");

            entity.HasIndex(e => e.UserId, "gamification_badge_user_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BadgeId)
                .HasComment("Badge")
                .HasColumnName("badge_id");
            entity.Property(e => e.ChallengeId)
                .HasComment("Challenge")
                .HasColumnName("challenge_id");
            entity.Property(e => e.Comment)
                .HasComment("Comment")
                .HasColumnName("comment");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.Level)
                .HasComment("Badge Level")
                .HasColumnType("character varying")
                .HasColumnName("level");
            entity.Property(e => e.SenderId)
                .HasComment("Sender")
                .HasColumnName("sender_id");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Badge).WithMany(p => p.GamificationBadgeUsers)
                .HasForeignKey(d => d.BadgeId)
                .HasConstraintName("gamification_badge_user_badge_id_fkey");

            entity.HasOne(d => d.Challenge).WithMany(p => p.GamificationBadgeUsers)
                .HasForeignKey(d => d.ChallengeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_user_challenge_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationBadgeUserCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_user_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.GamificationBadgeUsers)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_user_employee_id_fkey");

            entity.HasOne(d => d.Sender).WithMany(p => p.GamificationBadgeUserSenders)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_user_sender_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.GamificationBadgeUserUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("gamification_badge_user_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationBadgeUserWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_user_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationBadgeUserWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_badge_user_wizard_pkey");

            entity.ToTable("gamification_badge_user_wizard", tb => tb.HasComment("Gamification User Badge Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BadgeId)
                .HasComment("Badge")
                .HasColumnName("badge_id");
            entity.Property(e => e.Comment)
                .HasComment("Comment")
                .HasColumnName("comment");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Badge).WithMany(p => p.GamificationBadgeUserWizards)
                .HasForeignKey(d => d.BadgeId)
                .HasConstraintName("gamification_badge_user_wizard_badge_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationBadgeUserWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_user_wizard_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.GamificationBadgeUserWizards)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("gamification_badge_user_wizard_employee_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.GamificationBadgeUserWizardUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("gamification_badge_user_wizard_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationBadgeUserWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_badge_user_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationChallenge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_challenge_pkey");

            entity.ToTable("gamification_challenge", tb => tb.HasComment("Gamification Challenge"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChallengeCategory)
                .HasComment("Appears in")
                .HasColumnType("character varying")
                .HasColumnName("challenge_category");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.EndDate)
                .HasComment("End Date")
                .HasColumnName("end_date");
            entity.Property(e => e.LastReportDate)
                .HasComment("Last Report Date")
                .HasColumnName("last_report_date");
            entity.Property(e => e.ManagerId)
                .HasComment("Responsible")
                .HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Challenge Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NextReportDate)
                .HasComment("Next Report Date")
                .HasColumnName("next_report_date");
            entity.Property(e => e.Period)
                .HasComment("Periodicity")
                .HasColumnType("character varying")
                .HasColumnName("period");
            entity.Property(e => e.RemindUpdateDelay)
                .HasComment("Non-updated manual goals will be reminded after")
                .HasColumnName("remind_update_delay");
            entity.Property(e => e.ReportMessageFrequency)
                .HasComment("Report Frequency")
                .HasColumnType("character varying")
                .HasColumnName("report_message_frequency");
            entity.Property(e => e.ReportMessageGroupId)
                .HasComment("Send a copy to")
                .HasColumnName("report_message_group_id");
            entity.Property(e => e.ReportTemplateId)
                .HasComment("Report Template")
                .HasColumnName("report_template_id");
            entity.Property(e => e.RewardFailure)
                .HasComment("Reward Bests if not Succeeded?")
                .HasColumnName("reward_failure");
            entity.Property(e => e.RewardFirstId)
                .HasComment("For 1st user")
                .HasColumnName("reward_first_id");
            entity.Property(e => e.RewardId)
                .HasComment("For Every Succeeding User")
                .HasColumnName("reward_id");
            entity.Property(e => e.RewardRealtime)
                .HasComment("Reward as soon as every goal is reached")
                .HasColumnName("reward_realtime");
            entity.Property(e => e.RewardSecondId)
                .HasComment("For 2nd user")
                .HasColumnName("reward_second_id");
            entity.Property(e => e.RewardThirdId)
                .HasComment("For 3rd user")
                .HasColumnName("reward_third_id");
            entity.Property(e => e.StartDate)
                .HasComment("Start Date")
                .HasColumnName("start_date");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserDomain)
                .HasComment("User domain")
                .HasColumnType("character varying")
                .HasColumnName("user_domain");
            entity.Property(e => e.VisibilityMode)
                .HasComment("Display Mode")
                .HasColumnType("character varying")
                .HasColumnName("visibility_mode");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationChallengeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_create_uid_fkey");

            entity.HasOne(d => d.Manager).WithMany(p => p.GamificationChallengeManagers)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.GamificationChallenges)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ReportMessageGroup).WithMany(p => p.GamificationChallenges)
                .HasForeignKey(d => d.ReportMessageGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_report_message_group_id_fkey");

            entity.HasOne(d => d.ReportTemplate).WithMany(p => p.GamificationChallenges)
                .HasForeignKey(d => d.ReportTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("gamification_challenge_report_template_id_fkey");

            entity.HasOne(d => d.RewardFirst).WithMany(p => p.GamificationChallengeRewardFirsts)
                .HasForeignKey(d => d.RewardFirstId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_reward_first_id_fkey");

            entity.HasOne(d => d.Reward).WithMany(p => p.GamificationChallengeRewards)
                .HasForeignKey(d => d.RewardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_reward_id_fkey");

            entity.HasOne(d => d.RewardSecond).WithMany(p => p.GamificationChallengeRewardSeconds)
                .HasForeignKey(d => d.RewardSecondId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_reward_second_id_fkey");

            entity.HasOne(d => d.RewardThird).WithMany(p => p.GamificationChallengeRewardThirds)
                .HasForeignKey(d => d.RewardThirdId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_reward_third_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationChallengeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_write_uid_fkey");

            entity.HasMany(d => d.ResUsers).WithMany(p => p.GamificationChallenges)
                .UsingEntity<Dictionary<string, object>>(
                    "GamificationChallengeUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("gamification_challenge_users_rel_res_users_id_fkey"),
                    l => l.HasOne<GamificationChallenge>().WithMany()
                        .HasForeignKey("GamificationChallengeId")
                        .HasConstraintName("gamification_challenge_users_rel_gamification_challenge_id_fkey"),
                    j =>
                    {
                        j.HasKey("GamificationChallengeId", "ResUsersId").HasName("gamification_challenge_users_rel_pkey");
                        j.ToTable("gamification_challenge_users_rel", tb => tb.HasComment("RELATION BETWEEN gamification_challenge AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "GamificationChallengeId" }, "gamification_challenge_users__res_users_id_gamification_cha_idx");
                        j.IndexerProperty<int>("GamificationChallengeId").HasColumnName("gamification_challenge_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });

            entity.HasMany(d => d.ResUsersNavigation).WithMany(p => p.GamificationChallengesNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "GamificationInvitedUserIdsRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("gamification_invited_user_ids_rel_res_users_id_fkey"),
                    l => l.HasOne<GamificationChallenge>().WithMany()
                        .HasForeignKey("GamificationChallengeId")
                        .HasConstraintName("gamification_invited_user_ids_re_gamification_challenge_id_fkey"),
                    j =>
                    {
                        j.HasKey("GamificationChallengeId", "ResUsersId").HasName("gamification_invited_user_ids_rel_pkey");
                        j.ToTable("gamification_invited_user_ids_rel", tb => tb.HasComment("RELATION BETWEEN gamification_challenge AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "GamificationChallengeId" }, "gamification_invited_user_ids_res_users_id_gamification_cha_idx");
                        j.IndexerProperty<int>("GamificationChallengeId").HasColumnName("gamification_challenge_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<GamificationChallengeLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_challenge_line_pkey");

            entity.ToTable("gamification_challenge_line", tb => tb.HasComment("Gamification generic goal for challenge"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChallengeId)
                .HasComment("Challenge")
                .HasColumnName("challenge_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefinitionId)
                .HasComment("Goal Definition")
                .HasColumnName("definition_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TargetGoal)
                .HasComment("Target Value to Reach")
                .HasColumnName("target_goal");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Challenge).WithMany(p => p.GamificationChallengeLines)
                .HasForeignKey(d => d.ChallengeId)
                .HasConstraintName("gamification_challenge_line_challenge_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationChallengeLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_line_create_uid_fkey");

            entity.HasOne(d => d.Definition).WithMany(p => p.GamificationChallengeLines)
                .HasForeignKey(d => d.DefinitionId)
                .HasConstraintName("gamification_challenge_line_definition_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationChallengeLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_challenge_line_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationGoal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_goal_pkey");

            entity.ToTable("gamification_goal", tb => tb.HasComment("Gamification Goal"));

            entity.HasIndex(e => e.ChallengeId, "gamification_goal_challenge_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChallengeId)
                .HasComment("Challenge")
                .HasColumnName("challenge_id");
            entity.Property(e => e.Closed)
                .HasComment("Closed goal")
                .HasColumnName("closed");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Current)
                .HasComment("Current Value")
                .HasColumnName("current");
            entity.Property(e => e.DefinitionId)
                .HasComment("Goal Definition")
                .HasColumnName("definition_id");
            entity.Property(e => e.EndDate)
                .HasComment("End Date")
                .HasColumnName("end_date");
            entity.Property(e => e.LastUpdate)
                .HasComment("Last Update")
                .HasColumnName("last_update");
            entity.Property(e => e.LineId)
                .HasComment("Challenge Line")
                .HasColumnName("line_id");
            entity.Property(e => e.RemindUpdateDelay)
                .HasComment("Remind delay")
                .HasColumnName("remind_update_delay");
            entity.Property(e => e.StartDate)
                .HasComment("Start Date")
                .HasColumnName("start_date");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TargetGoal)
                .HasComment("To Reach")
                .HasColumnName("target_goal");
            entity.Property(e => e.ToUpdate)
                .HasComment("To update")
                .HasColumnName("to_update");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Challenge).WithMany(p => p.GamificationGoals)
                .HasForeignKey(d => d.ChallengeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_challenge_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationGoalCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_create_uid_fkey");

            entity.HasOne(d => d.Definition).WithMany(p => p.GamificationGoals)
                .HasForeignKey(d => d.DefinitionId)
                .HasConstraintName("gamification_goal_definition_id_fkey");

            entity.HasOne(d => d.Line).WithMany(p => p.GamificationGoals)
                .HasForeignKey(d => d.LineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("gamification_goal_line_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.GamificationGoalUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("gamification_goal_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationGoalWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationGoalDefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_goal_definition_pkey");

            entity.ToTable("gamification_goal_definition", tb => tb.HasComment("Gamification Goal Definition"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionId)
                .HasComment("Action")
                .HasColumnName("action_id");
            entity.Property(e => e.BatchDistinctiveField)
                .HasComment("Distinctive field for batch user")
                .HasColumnName("batch_distinctive_field");
            entity.Property(e => e.BatchMode)
                .HasComment("Batch Mode")
                .HasColumnName("batch_mode");
            entity.Property(e => e.BatchUserExpression)
                .HasComment("Evaluated expression for batch mode")
                .HasColumnType("character varying")
                .HasColumnName("batch_user_expression");
            entity.Property(e => e.ComputationMode)
                .HasComment("Computation Mode")
                .HasColumnType("character varying")
                .HasColumnName("computation_mode");
            entity.Property(e => e.ComputeCode)
                .HasComment("Python Code")
                .HasColumnName("compute_code");
            entity.Property(e => e.Condition)
                .HasComment("Goal Performance")
                .HasColumnType("character varying")
                .HasColumnName("condition");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Goal Description")
                .HasColumnName("description");
            entity.Property(e => e.DisplayMode)
                .HasComment("Displayed as")
                .HasColumnType("character varying")
                .HasColumnName("display_mode");
            entity.Property(e => e.Domain)
                .HasComment("Filter Domain")
                .HasColumnType("character varying")
                .HasColumnName("domain");
            entity.Property(e => e.FieldDateId)
                .HasComment("Date Field")
                .HasColumnName("field_date_id");
            entity.Property(e => e.FieldId)
                .HasComment("Field to Sum")
                .HasColumnName("field_id");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.Monetary)
                .HasComment("Monetary Value")
                .HasColumnName("monetary");
            entity.Property(e => e.Name)
                .HasComment("Goal Definition")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ResIdField)
                .HasComment("ID Field of user")
                .HasColumnType("character varying")
                .HasColumnName("res_id_field");
            entity.Property(e => e.Suffix)
                .HasComment("Suffix")
                .HasColumnType("jsonb")
                .HasColumnName("suffix");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Action).WithMany(p => p.GamificationGoalDefinitions)
                .HasForeignKey(d => d.ActionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_definition_action_id_fkey");

            entity.HasOne(d => d.BatchDistinctiveFieldNavigation).WithMany(p => p.GamificationGoalDefinitionBatchDistinctiveFieldNavigations)
                .HasForeignKey(d => d.BatchDistinctiveField)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_definition_batch_distinctive_field_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationGoalDefinitionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_definition_create_uid_fkey");

            entity.HasOne(d => d.FieldDate).WithMany(p => p.GamificationGoalDefinitionFieldDates)
                .HasForeignKey(d => d.FieldDateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_definition_field_date_id_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.GamificationGoalDefinitionFields)
                .HasForeignKey(d => d.FieldId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_definition_field_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.GamificationGoalDefinitions)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_definition_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationGoalDefinitionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_definition_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationGoalWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_goal_wizard_pkey");

            entity.ToTable("gamification_goal_wizard", tb => tb.HasComment("Gamification Goal Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Current)
                .HasComment("Current")
                .HasColumnName("current");
            entity.Property(e => e.GoalId)
                .HasComment("Goal")
                .HasColumnName("goal_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationGoalWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_wizard_create_uid_fkey");

            entity.HasOne(d => d.Goal).WithMany(p => p.GamificationGoalWizards)
                .HasForeignKey(d => d.GoalId)
                .HasConstraintName("gamification_goal_wizard_goal_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationGoalWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_goal_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationKarmaRank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_karma_rank_pkey");

            entity.ToTable("gamification_karma_rank", tb => tb.HasComment("Rank based on karma"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.DescriptionMotivational)
                .HasComment("Motivational")
                .HasColumnType("jsonb")
                .HasColumnName("description_motivational");
            entity.Property(e => e.KarmaMin)
                .HasComment("Required Karma")
                .HasColumnName("karma_min");
            entity.Property(e => e.Name)
                .HasComment("Rank Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationKarmaRankCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_karma_rank_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationKarmaRankWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_karma_rank_write_uid_fkey");
        });

        modelBuilder.Entity<GamificationKarmaTracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("gamification_karma_tracking_pkey");

            entity.ToTable("gamification_karma_tracking", tb => tb.HasComment("Track Karma Changes"));

            entity.HasIndex(e => e.UserId, "gamification_karma_tracking_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Consolidated)
                .HasComment("Consolidated")
                .HasColumnName("consolidated");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.NewValue)
                .HasComment("New Karma Value")
                .HasColumnName("new_value");
            entity.Property(e => e.OldValue)
                .HasComment("Old Karma Value")
                .HasColumnName("old_value");
            entity.Property(e => e.TrackingDate)
                .HasComment("Tracking Date")
                .HasColumnName("tracking_date");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.GamificationKarmaTrackingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_karma_tracking_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.GamificationKarmaTrackingUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("gamification_karma_tracking_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.GamificationKarmaTrackingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("gamification_karma_tracking_write_uid_fkey");
        });

        modelBuilder.Entity<HrApplicant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_pkey");

            entity.ToTable("hr_applicant", tb => tb.HasComment("Applicant"));

            entity.HasIndex(e => e.DateLastStageUpdate, "hr_applicant_date_last_stage_update_index");

            entity.HasIndex(e => e.JobId, "hr_applicant_job_id_index");

            entity.HasIndex(e => e.Name, "hr_applicant_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.StageId, "hr_applicant_stage_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Availability)
                .HasComment("Availability")
                .HasColumnName("availability");
            entity.Property(e => e.CampaignId)
                .HasComment("Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Creation Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateClosed)
                .HasComment("Hire Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_closed");
            entity.Property(e => e.DateLastStageUpdate)
                .HasComment("Last Stage Update")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_stage_update");
            entity.Property(e => e.DateOpen)
                .HasComment("Assigned")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_open");
            entity.Property(e => e.DelayClose)
                .HasComment("Delay to Close")
                .HasColumnName("delay_close");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.EmailCc)
                .HasComment("Email cc")
                .HasColumnType("character varying")
                .HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom)
                .HasMaxLength(128)
                .HasComment("Email")
                .HasColumnName("email_from");
            entity.Property(e => e.EmpId)
                .HasComment("Employee")
                .HasColumnName("emp_id");
            entity.Property(e => e.JobId)
                .HasComment("Applied Job")
                .HasColumnName("job_id");
            entity.Property(e => e.KanbanState)
                .HasComment("Kanban State")
                .HasColumnType("character varying")
                .HasColumnName("kanban_state");
            entity.Property(e => e.LastStageId)
                .HasComment("Last Stage")
                .HasColumnName("last_stage_id");
            entity.Property(e => e.LinkedinProfile)
                .HasComment("LinkedIn Profile")
                .HasColumnType("character varying")
                .HasColumnName("linkedin_profile");
            entity.Property(e => e.MediumId)
                .HasComment("Medium")
                .HasColumnName("medium_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Subject / Application")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Contact")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerMobile)
                .HasMaxLength(32)
                .HasComment("Mobile")
                .HasColumnName("partner_mobile");
            entity.Property(e => e.PartnerName)
                .HasComment("Applicant's Name")
                .HasColumnType("character varying")
                .HasColumnName("partner_name");
            entity.Property(e => e.PartnerPhone)
                .HasMaxLength(32)
                .HasComment("Phone")
                .HasColumnName("partner_phone");
            entity.Property(e => e.Priority)
                .HasComment("Evaluation")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.Probability)
                .HasComment("Probability")
                .HasColumnName("probability");
            entity.Property(e => e.RefuseReasonId)
                .HasComment("Refuse Reason")
                .HasColumnName("refuse_reason_id");
            entity.Property(e => e.SalaryExpected)
                .HasComment("Expected Salary")
                .HasColumnName("salary_expected");
            entity.Property(e => e.SalaryExpectedExtra)
                .HasComment("Expected Salary Extra")
                .HasColumnType("character varying")
                .HasColumnName("salary_expected_extra");
            entity.Property(e => e.SalaryProposed)
                .HasComment("Proposed Salary")
                .HasColumnName("salary_proposed");
            entity.Property(e => e.SalaryProposedExtra)
                .HasComment("Proposed Salary Extra")
                .HasColumnType("character varying")
                .HasColumnName("salary_proposed_extra");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.TypeId)
                .HasComment("Degree")
                .HasColumnName("type_id");
            entity.Property(e => e.UserId)
                .HasComment("Recruiter")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Campaign).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_campaign_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrApplicantCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_department_id_fkey");

            entity.HasOne(d => d.Emp).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_emp_id_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_job_id_fkey");

            entity.HasOne(d => d.LastStage).WithMany(p => p.HrApplicantLastStages)
                .HasForeignKey(d => d.LastStageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_last_stage_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_partner_id_fkey");

            entity.HasOne(d => d.RefuseReason).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.RefuseReasonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_source_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.HrApplicantStages)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_stage_id_fkey");

            entity.HasOne(d => d.Type).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_type_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.HrApplicantUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrApplicantWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_write_uid_fkey");

            entity.HasMany(d => d.HrApplicantCategories).WithMany(p => p.HrApplicants)
                .UsingEntity<Dictionary<string, object>>(
                    "HrApplicantHrApplicantCategoryRel",
                    r => r.HasOne<HrApplicantCategory>().WithMany()
                        .HasForeignKey("HrApplicantCategoryId")
                        .HasConstraintName("hr_applicant_hr_applicant_categor_hr_applicant_category_id_fkey"),
                    l => l.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("hr_applicant_hr_applicant_category_rel_hr_applicant_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrApplicantId", "HrApplicantCategoryId").HasName("hr_applicant_hr_applicant_category_rel_pkey");
                        j.ToTable("hr_applicant_hr_applicant_category_rel", tb => tb.HasComment("RELATION BETWEEN hr_applicant AND hr_applicant_category"));
                        j.HasIndex(new[] { "HrApplicantCategoryId", "HrApplicantId" }, "hr_applicant_hr_applicant_cat_hr_applicant_category_id_hr_a_idx");
                        j.IndexerProperty<int>("HrApplicantId").HasColumnName("hr_applicant_id");
                        j.IndexerProperty<int>("HrApplicantCategoryId").HasColumnName("hr_applicant_category_id");
                    });

            entity.HasMany(d => d.HrSkills).WithMany(p => p.HrApplicants)
                .UsingEntity<Dictionary<string, object>>(
                    "HrApplicantHrSkillRel",
                    r => r.HasOne<HrSkill>().WithMany()
                        .HasForeignKey("HrSkillId")
                        .HasConstraintName("hr_applicant_hr_skill_rel_hr_skill_id_fkey"),
                    l => l.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("hr_applicant_hr_skill_rel_hr_applicant_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrApplicantId", "HrSkillId").HasName("hr_applicant_hr_skill_rel_pkey");
                        j.ToTable("hr_applicant_hr_skill_rel", tb => tb.HasComment("RELATION BETWEEN hr_applicant AND hr_skill"));
                        j.HasIndex(new[] { "HrSkillId", "HrApplicantId" }, "hr_applicant_hr_skill_rel_hr_skill_id_hr_applicant_id_idx");
                        j.IndexerProperty<int>("HrApplicantId").HasColumnName("hr_applicant_id");
                        j.IndexerProperty<int>("HrSkillId").HasColumnName("hr_skill_id");
                    });

            entity.HasMany(d => d.ResUsers).WithMany(p => p.HrApplicants)
                .UsingEntity<Dictionary<string, object>>(
                    "HrApplicantResUsersInterviewersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("hr_applicant_res_users_interviewers_rel_res_users_id_fkey"),
                    l => l.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("hr_applicant_res_users_interviewers_rel_hr_applicant_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrApplicantId", "ResUsersId").HasName("hr_applicant_res_users_interviewers_rel_pkey");
                        j.ToTable("hr_applicant_res_users_interviewers_rel", tb => tb.HasComment("RELATION BETWEEN hr_applicant AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "HrApplicantId" }, "hr_applicant_res_users_intervi_res_users_id_hr_applicant_id_idx");
                        j.IndexerProperty<int>("HrApplicantId").HasColumnName("hr_applicant_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<HrApplicantCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_category_pkey");

            entity.ToTable("hr_applicant_category", tb => tb.HasComment("Category of applicant"));

            entity.HasIndex(e => e.Name, "hr_applicant_category_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrApplicantCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_category_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrApplicantCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_category_write_uid_fkey");
        });

        modelBuilder.Entity<HrApplicantRefuseReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_refuse_reason_pkey");

            entity.ToTable("hr_applicant_refuse_reason", tb => tb.HasComment("Refuse Reason of Applicant"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.TemplateId)
                .HasComment("Email Template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrApplicantRefuseReasonCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.HrApplicantRefuseReasons)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrApplicantRefuseReasonWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_write_uid_fkey");
        });

        modelBuilder.Entity<HrApplicantSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_skill_pkey");

            entity.ToTable("hr_applicant_skill", tb => tb.HasComment("Skill level for an applicant"));

            entity.HasIndex(e => new { e.ApplicantId, e.SkillId }, "hr_applicant_skill__unique_skill").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApplicantId)
                .HasComment("Applicant")
                .HasColumnName("applicant_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.SkillId)
                .HasComment("Skill")
                .HasColumnName("skill_id");
            entity.Property(e => e.SkillLevelId)
                .HasComment("Skill Level")
                .HasColumnName("skill_level_id");
            entity.Property(e => e.SkillTypeId)
                .HasComment("Skill Type")
                .HasColumnName("skill_type_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Applicant).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.ApplicantId)
                .HasConstraintName("hr_applicant_skill_applicant_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrApplicantSkillCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_skill_create_uid_fkey");

            entity.HasOne(d => d.Skill).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.SkillId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_skill_skill_id_fkey");

            entity.HasOne(d => d.SkillLevel).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.SkillLevelId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_skill_skill_level_id_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_skill_skill_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrApplicantSkillWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_skill_write_uid_fkey");
        });

        modelBuilder.Entity<HrAttendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_attendance_pkey");

            entity.ToTable("hr_attendance", tb => tb.HasComment("Attendance"));

            entity.HasIndex(e => e.EmployeeId, "hr_attendance_employee_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CheckIn)
                .HasComment("Check In")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("check_in");
            entity.Property(e => e.CheckOut)
                .HasComment("Check Out")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("check_out");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.WorkedHours)
                .HasComment("Worked Hours")
                .HasColumnName("worked_hours");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrAttendanceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrAttendances)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("hr_attendance_employee_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrAttendanceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_write_uid_fkey");
        });

        modelBuilder.Entity<HrAttendanceOvertime>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_attendance_overtime_pkey");

            entity.ToTable("hr_attendance_overtime", tb => tb.HasComment("Attendance Overtime"));

            entity.HasIndex(e => e.EmployeeId, "hr_attendance_overtime_employee_id_index");

            entity.HasIndex(e => new { e.EmployeeId, e.Date }, "hr_attendance_overtime_unique_employee_per_day")
                .IsUnique()
                .HasFilter("(adjustment IS FALSE)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Adjustment)
                .HasComment("Adjustment")
                .HasColumnName("adjustment");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Day")
                .HasColumnName("date");
            entity.Property(e => e.Duration)
                .HasComment("Extra Hours")
                .HasColumnName("duration");
            entity.Property(e => e.DurationReal)
                .HasComment("Extra Hours (Real)")
                .HasColumnName("duration_real");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrAttendanceOvertimeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_overtime_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrAttendanceOvertimes)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("hr_attendance_overtime_employee_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrAttendanceOvertimeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_overtime_write_uid_fkey");
        });

        modelBuilder.Entity<HrAttendanceReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hr_attendance_report");

            entity.Property(e => e.CheckIn).HasColumnName("check_in");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.OvertimeHours).HasColumnName("overtime_hours");
            entity.Property(e => e.WorkedHours).HasColumnName("worked_hours");
        });

        modelBuilder.Entity<HrContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_contract_pkey");

            entity.ToTable("hr_contract", tb => tb.HasComment("Contract"));

            entity.HasIndex(e => e.DateStart, "hr_contract_date_start_index");

            entity.HasIndex(e => e.ResourceCalendarId, "hr_contract_resource_calendar_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.ContractTypeId)
                .HasComment("Contract Type")
                .HasColumnName("contract_type_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateEnd)
                .HasComment("End Date")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnName("date_start");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.HrResponsibleId)
                .HasComment("HR Responsible")
                .HasColumnName("hr_responsible_id");
            entity.Property(e => e.JobId)
                .HasComment("Job Position")
                .HasColumnName("job_id");
            entity.Property(e => e.KanbanState)
                .HasComment("Kanban State")
                .HasColumnType("character varying")
                .HasColumnName("kanban_state");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Contract Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Notes)
                .HasComment("Notes")
                .HasColumnName("notes");
            entity.Property(e => e.ResourceCalendarId)
                .HasComment("Working Schedule")
                .HasColumnName("resource_calendar_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.StructureTypeId)
                .HasComment("Salary Structure Type")
                .HasColumnName("structure_type_id");
            entity.Property(e => e.TrialDateEnd)
                .HasComment("End of Trial Period")
                .HasColumnName("trial_date_end");
            entity.Property(e => e.Wage)
                .HasComment("Wage")
                .HasColumnName("wage");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_contract_company_id_fkey");

            entity.HasOne(d => d.ContractType).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.ContractTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_contract_type_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrContractCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_employee_id_fkey");

            entity.HasOne(d => d.HrResponsible).WithMany(p => p.HrContractHrResponsibles)
                .HasForeignKey(d => d.HrResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_hr_responsible_id_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_job_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_resource_calendar_id_fkey");

            entity.HasOne(d => d.StructureType).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.StructureTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_structure_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrContractWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_write_uid_fkey");
        });

        modelBuilder.Entity<HrContractHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hr_contract_history");

            entity.Property(e => e.ActiveEmployee).HasColumnName("active_employee");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.DateHired).HasColumnName("date_hired");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.HrResponsibleId).HasColumnName("hr_responsible_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsUnderContract).HasColumnName("is_under_contract");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceCalendarId).HasColumnName("resource_calendar_id");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.StructureTypeId).HasColumnName("structure_type_id");
            entity.Property(e => e.Wage).HasColumnName("wage");
        });

        modelBuilder.Entity<HrContractType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_contract_type_pkey");

            entity.ToTable("hr_contract_type", tb => tb.HasComment("Contract Type"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrContractTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrContractTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrDepartment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_department_pkey");

            entity.ToTable("hr_department", tb => tb.HasComment("Department"));

            entity.HasIndex(e => e.CompanyId, "hr_department_company_id_index");

            entity.HasIndex(e => e.ParentId, "hr_department_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "hr_department_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CompleteName)
                .HasComment("Complete Name")
                .HasColumnType("character varying")
                .HasColumnName("complete_name");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ManagerId)
                .HasComment("Manager")
                .HasColumnName("manager_id");
            entity.Property(e => e.MasterDepartmentId)
                .HasComment("Master Department")
                .HasColumnName("master_department_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Department Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Department")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.HrDepartments)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrDepartmentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_create_uid_fkey");

            entity.HasOne(d => d.Manager).WithMany(p => p.HrDepartments)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_manager_id_fkey");

            entity.HasOne(d => d.MasterDepartment).WithMany(p => p.InverseMasterDepartment)
                .HasForeignKey(d => d.MasterDepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_master_department_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrDepartments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrDepartmentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_write_uid_fkey");
        });

        modelBuilder.Entity<HrDepartureReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_departure_reason_pkey");

            entity.ToTable("hr_departure_reason", tb => tb.HasComment("Departure Reason"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Reason")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrDepartureReasonCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_reason_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrDepartureReasonWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_reason_write_uid_fkey");
        });

        modelBuilder.Entity<HrDepartureWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_departure_wizard_pkey");

            entity.ToTable("hr_departure_wizard", tb => tb.HasComment("Departure Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArchiveAllocation)
                .HasComment("Archive Employee Allocations")
                .HasColumnName("archive_allocation");
            entity.Property(e => e.ArchivePrivateAddress)
                .HasComment("Archive Private Address")
                .HasColumnName("archive_private_address");
            entity.Property(e => e.CancelLeaves)
                .HasComment("Cancel Future Leaves")
                .HasColumnName("cancel_leaves");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DepartureDate)
                .HasComment("Departure Date")
                .HasColumnName("departure_date");
            entity.Property(e => e.DepartureDescription)
                .HasComment("Additional Information")
                .HasColumnName("departure_description");
            entity.Property(e => e.DepartureReasonId)
                .HasComment("Departure Reason")
                .HasColumnName("departure_reason_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.ReleaseCampanyCar)
                .HasComment("Release Company Car")
                .HasColumnName("release_campany_car");
            entity.Property(e => e.SetDateEnd)
                .HasComment("Set Contract End Date")
                .HasColumnName("set_date_end");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrDepartureWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_wizard_create_uid_fkey");

            entity.HasOne(d => d.DepartureReason).WithMany(p => p.HrDepartureWizards)
                .HasForeignKey(d => d.DepartureReasonId)
                .HasConstraintName("hr_departure_wizard_departure_reason_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrDepartureWizards)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("hr_departure_wizard_employee_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrDepartureWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<HrEmployee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_pkey");

            entity.ToTable("hr_employee", tb => tb.HasComment("Employee"));

            entity.HasIndex(e => e.Barcode, "hr_employee_barcode_uniq").IsUnique();

            entity.HasIndex(e => e.CompanyId, "hr_employee_company_id_index");

            entity.HasIndex(e => e.ResourceCalendarId, "hr_employee_resource_calendar_id_index");

            entity.HasIndex(e => e.ResourceId, "hr_employee_resource_id_index");

            entity.HasIndex(e => new { e.UserId, e.CompanyId }, "hr_employee_user_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AdditionalNote)
                .HasComment("Additional Note")
                .HasColumnName("additional_note");
            entity.Property(e => e.AddressHomeId)
                .HasComment("Address")
                .HasColumnName("address_home_id");
            entity.Property(e => e.AddressId)
                .HasComment("Work Address")
                .HasColumnName("address_id");
            entity.Property(e => e.BankAccountId)
                .HasComment("Bank Account Number")
                .HasColumnName("bank_account_id");
            entity.Property(e => e.Barcode)
                .HasComment("Badge ID")
                .HasColumnType("character varying")
                .HasColumnName("barcode");
            entity.Property(e => e.Birthday)
                .HasComment("Date of Birth")
                .HasColumnName("birthday");
            entity.Property(e => e.Certificate)
                .HasComment("Certificate Level")
                .HasColumnType("character varying")
                .HasColumnName("certificate");
            entity.Property(e => e.Children)
                .HasComment("Number of Dependent Children")
                .HasColumnName("children");
            entity.Property(e => e.CoachId)
                .HasComment("Coach")
                .HasColumnName("coach_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.ContractId)
                .HasComment("Current Contract")
                .HasColumnName("contract_id");
            entity.Property(e => e.ContractWarning)
                .HasComment("Contract Warning")
                .HasColumnName("contract_warning");
            entity.Property(e => e.CountryId)
                .HasComment("Nationality (Country)")
                .HasColumnName("country_id");
            entity.Property(e => e.CountryOfBirth)
                .HasComment("Country of Birth")
                .HasColumnName("country_of_birth");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.DepartureDate)
                .HasComment("Departure Date")
                .HasColumnName("departure_date");
            entity.Property(e => e.DepartureDescription)
                .HasComment("Additional Information")
                .HasColumnName("departure_description");
            entity.Property(e => e.DepartureReasonId)
                .HasComment("Departure Reason")
                .HasColumnName("departure_reason_id");
            entity.Property(e => e.EmergencyContact)
                .HasComment("Contact Name")
                .HasColumnType("character varying")
                .HasColumnName("emergency_contact");
            entity.Property(e => e.EmergencyPhone)
                .HasComment("Contact Phone")
                .HasColumnType("character varying")
                .HasColumnName("emergency_phone");
            entity.Property(e => e.EmployeeType)
                .HasComment("Employee Type")
                .HasColumnType("character varying")
                .HasColumnName("employee_type");
            entity.Property(e => e.ExpenseManagerId)
                .HasComment("Expense")
                .HasColumnName("expense_manager_id");
            entity.Property(e => e.FirstContractDate)
                .HasComment("First Contract Date")
                .HasColumnName("first_contract_date");
            entity.Property(e => e.Gender)
                .HasComment("Gender")
                .HasColumnType("character varying")
                .HasColumnName("gender");
            entity.Property(e => e.IdentificationId)
                .HasComment("Identification No")
                .HasColumnType("character varying")
                .HasColumnName("identification_id");
            entity.Property(e => e.JobId)
                .HasComment("Job Position")
                .HasColumnName("job_id");
            entity.Property(e => e.JobTitle)
                .HasComment("Job Title")
                .HasColumnType("character varying")
                .HasColumnName("job_title");
            entity.Property(e => e.KmHomeWork)
                .HasComment("Home-Work Distance")
                .HasColumnName("km_home_work");
            entity.Property(e => e.LastAttendanceId)
                .HasComment("Last Attendance")
                .HasColumnName("last_attendance_id");
            entity.Property(e => e.LastCheckIn)
                .HasComment("Check In")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_check_in");
            entity.Property(e => e.LastCheckOut)
                .HasComment("Check Out")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_check_out");
            entity.Property(e => e.LeaveManagerId)
                .HasComment("Time Off")
                .HasColumnName("leave_manager_id");
            entity.Property(e => e.Marital)
                .HasComment("Marital Status")
                .HasColumnType("character varying")
                .HasColumnName("marital");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MobilePhone)
                .HasComment("Work Mobile")
                .HasColumnType("character varying")
                .HasColumnName("mobile_phone");
            entity.Property(e => e.MobilityCard)
                .HasComment("Mobility Card")
                .HasColumnType("character varying")
                .HasColumnName("mobility_card");
            entity.Property(e => e.Name)
                .HasComment("Employee Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Notes)
                .HasComment("Notes")
                .HasColumnName("notes");
            entity.Property(e => e.ParentId)
                .HasComment("Manager")
                .HasColumnName("parent_id");
            entity.Property(e => e.PassportId)
                .HasComment("Passport No")
                .HasColumnType("character varying")
                .HasColumnName("passport_id");
            entity.Property(e => e.PermitNo)
                .HasComment("Work Permit No")
                .HasColumnType("character varying")
                .HasColumnName("permit_no");
            entity.Property(e => e.Pin)
                .HasComment("PIN")
                .HasColumnType("character varying")
                .HasColumnName("pin");
            entity.Property(e => e.PlaceOfBirth)
                .HasComment("Place of Birth")
                .HasColumnType("character varying")
                .HasColumnName("place_of_birth");
            entity.Property(e => e.ResourceCalendarId)
                .HasComment("Working Hours")
                .HasColumnName("resource_calendar_id");
            entity.Property(e => e.ResourceId)
                .HasComment("Resource")
                .HasColumnName("resource_id");
            entity.Property(e => e.Sinid)
                .HasComment("SIN No")
                .HasColumnType("character varying")
                .HasColumnName("sinid");
            entity.Property(e => e.SpouseBirthdate)
                .HasComment("Spouse Birthdate")
                .HasColumnName("spouse_birthdate");
            entity.Property(e => e.SpouseCompleteName)
                .HasComment("Spouse Complete Name")
                .HasColumnType("character varying")
                .HasColumnName("spouse_complete_name");
            entity.Property(e => e.Ssnid)
                .HasComment("SSN No")
                .HasColumnType("character varying")
                .HasColumnName("ssnid");
            entity.Property(e => e.StudyField)
                .HasComment("Field of Study")
                .HasColumnType("character varying")
                .HasColumnName("study_field");
            entity.Property(e => e.StudySchool)
                .HasComment("School")
                .HasColumnType("character varying")
                .HasColumnName("study_school");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.Vehicle)
                .HasComment("Company Vehicle")
                .HasColumnType("character varying")
                .HasColumnName("vehicle");
            entity.Property(e => e.VisaExpire)
                .HasComment("Visa Expire Date")
                .HasColumnName("visa_expire");
            entity.Property(e => e.VisaNo)
                .HasComment("Visa No")
                .HasColumnType("character varying")
                .HasColumnName("visa_no");
            entity.Property(e => e.WorkContactId)
                .HasComment("Work Contact")
                .HasColumnName("work_contact_id");
            entity.Property(e => e.WorkEmail)
                .HasComment("Work Email")
                .HasColumnType("character varying")
                .HasColumnName("work_email");
            entity.Property(e => e.WorkLocationId)
                .HasComment("Work Location")
                .HasColumnName("work_location_id");
            entity.Property(e => e.WorkPermitExpirationDate)
                .HasComment("Work Permit Expiration Date")
                .HasColumnName("work_permit_expiration_date");
            entity.Property(e => e.WorkPermitScheduledActivity)
                .HasComment("Work Permit Scheduled Activity")
                .HasColumnName("work_permit_scheduled_activity");
            entity.Property(e => e.WorkPhone)
                .HasComment("Work Phone")
                .HasColumnType("character varying")
                .HasColumnName("work_phone");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AddressHome).WithMany(p => p.HrEmployeeAddressHomes)
                .HasForeignKey(d => d.AddressHomeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_address_home_id_fkey");

            entity.HasOne(d => d.Address).WithMany(p => p.HrEmployeeAddresses)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_address_id_fkey");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.BankAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_bank_account_id_fkey");

            entity.HasOne(d => d.Coach).WithMany(p => p.InverseCoach)
                .HasForeignKey(d => d.CoachId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_coach_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_company_id_fkey");

            entity.HasOne(d => d.Contract).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_contract_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.HrEmployeeCountries)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_country_id_fkey");

            entity.HasOne(d => d.CountryOfBirthNavigation).WithMany(p => p.HrEmployeeCountryOfBirthNavigations)
                .HasForeignKey(d => d.CountryOfBirth)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_country_of_birth_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrEmployeeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_department_id_fkey");

            entity.HasOne(d => d.DepartureReason).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.DepartureReasonId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_departure_reason_id_fkey");

            entity.HasOne(d => d.ExpenseManager).WithMany(p => p.HrEmployeeExpenseManagers)
                .HasForeignKey(d => d.ExpenseManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_expense_manager_id_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_job_id_fkey");

            entity.HasOne(d => d.LastAttendance).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.LastAttendanceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_last_attendance_id_fkey");

            entity.HasOne(d => d.LeaveManager).WithMany(p => p.HrEmployeeLeaveManagers)
                .HasForeignKey(d => d.LeaveManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_leave_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_parent_id_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_resource_calendar_id_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_resource_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.HrEmployeeUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_user_id_fkey");

            entity.HasOne(d => d.WorkContact).WithMany(p => p.HrEmployeeWorkContacts)
                .HasForeignKey(d => d.WorkContactId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_work_contact_id_fkey");

            entity.HasOne(d => d.WorkLocation).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.WorkLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_work_location_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrEmployeeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_write_uid_fkey");

            entity.HasMany(d => d.Categories).WithMany(p => p.Emps)
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeeCategoryRel",
                    r => r.HasOne<HrEmployeeCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("employee_category_rel_category_id_fkey"),
                    l => l.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("EmpId")
                        .HasConstraintName("employee_category_rel_emp_id_fkey"),
                    j =>
                    {
                        j.HasKey("EmpId", "CategoryId").HasName("employee_category_rel_pkey");
                        j.ToTable("employee_category_rel", tb => tb.HasComment("RELATION BETWEEN hr_employee AND hr_employee_category"));
                        j.HasIndex(new[] { "CategoryId", "EmpId" }, "employee_category_rel_category_id_emp_id_idx");
                        j.IndexerProperty<int>("EmpId").HasColumnName("emp_id");
                        j.IndexerProperty<int>("CategoryId").HasColumnName("category_id");
                    });

            entity.HasMany(d => d.HrSkills).WithMany(p => p.HrEmployees)
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrSkillRel",
                    r => r.HasOne<HrSkill>().WithMany()
                        .HasForeignKey("HrSkillId")
                        .HasConstraintName("hr_employee_hr_skill_rel_hr_skill_id_fkey"),
                    l => l.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_hr_skill_rel_hr_employee_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrEmployeeId", "HrSkillId").HasName("hr_employee_hr_skill_rel_pkey");
                        j.ToTable("hr_employee_hr_skill_rel", tb => tb.HasComment("RELATION BETWEEN hr_employee AND hr_skill"));
                        j.HasIndex(new[] { "HrSkillId", "HrEmployeeId" }, "hr_employee_hr_skill_rel_hr_skill_id_hr_employee_id_idx");
                        j.IndexerProperty<int>("HrEmployeeId").HasColumnName("hr_employee_id");
                        j.IndexerProperty<int>("HrSkillId").HasColumnName("hr_skill_id");
                    });
        });

        modelBuilder.Entity<HrEmployeeCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_category_pkey");

            entity.ToTable("hr_employee_category", tb => tb.HasComment("Employee Category"));

            entity.HasIndex(e => e.Name, "hr_employee_category_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrEmployeeCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_category_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrEmployeeCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_category_write_uid_fkey");
        });

        modelBuilder.Entity<HrEmployeePublic>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hr_employee_public");

            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.CoachId).HasColumnName("coach_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeType)
                .HasColumnType("character varying")
                .HasColumnName("employee_type");
            entity.Property(e => e.ExpenseManagerId).HasColumnName("expense_manager_id");
            entity.Property(e => e.FirstContractDate).HasColumnName("first_contract_date");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.JobTitle)
                .HasColumnType("character varying")
                .HasColumnName("job_title");
            entity.Property(e => e.LeaveManagerId).HasColumnName("leave_manager_id");
            entity.Property(e => e.MobilePhone)
                .HasColumnType("character varying")
                .HasColumnName("mobile_phone");
            entity.Property(e => e.MobilityCard)
                .HasColumnType("character varying")
                .HasColumnName("mobility_card");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ResourceCalendarId).HasColumnName("resource_calendar_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.WorkContactId).HasColumnName("work_contact_id");
            entity.Property(e => e.WorkEmail)
                .HasColumnType("character varying")
                .HasColumnName("work_email");
            entity.Property(e => e.WorkLocationId).HasColumnName("work_location_id");
            entity.Property(e => e.WorkPhone)
                .HasColumnType("character varying")
                .HasColumnName("work_phone");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");
        });

        modelBuilder.Entity<HrEmployeeSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_skill_pkey");

            entity.ToTable("hr_employee_skill", tb => tb.HasComment("Skill level for an employee"));

            entity.HasIndex(e => new { e.EmployeeId, e.SkillId }, "hr_employee_skill__unique_skill").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.SkillId)
                .HasComment("Skill")
                .HasColumnName("skill_id");
            entity.Property(e => e.SkillLevelId)
                .HasComment("Skill Level")
                .HasColumnName("skill_level_id");
            entity.Property(e => e.SkillTypeId)
                .HasComment("Skill Type")
                .HasColumnName("skill_type_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrEmployeeSkillCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("hr_employee_skill_employee_id_fkey");

            entity.HasOne(d => d.Skill).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.SkillId)
                .HasConstraintName("hr_employee_skill_skill_id_fkey");

            entity.HasOne(d => d.SkillLevel).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.SkillLevelId)
                .HasConstraintName("hr_employee_skill_skill_level_id_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.SkillTypeId)
                .HasConstraintName("hr_employee_skill_skill_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrEmployeeSkillWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_write_uid_fkey");
        });

        modelBuilder.Entity<HrEmployeeSkillLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_skill_log_pkey");

            entity.ToTable("hr_employee_skill_log", tb => tb.HasComment("Skills History"));

            entity.HasIndex(e => new { e.EmployeeId, e.DepartmentId, e.SkillId, e.Date }, "hr_employee_skill_log__unique_skill_log").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.LevelProgress)
                .HasComment("Progress")
                .HasColumnName("level_progress");
            entity.Property(e => e.SkillId)
                .HasComment("Skill")
                .HasColumnName("skill_id");
            entity.Property(e => e.SkillLevelId)
                .HasComment("Skill Level")
                .HasColumnName("skill_level_id");
            entity.Property(e => e.SkillTypeId)
                .HasComment("Skill Type")
                .HasColumnName("skill_type_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrEmployeeSkillLogCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_log_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_log_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("hr_employee_skill_log_employee_id_fkey");

            entity.HasOne(d => d.Skill).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.SkillId)
                .HasConstraintName("hr_employee_skill_log_skill_id_fkey");

            entity.HasOne(d => d.SkillLevel).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.SkillLevelId)
                .HasConstraintName("hr_employee_skill_log_skill_level_id_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.SkillTypeId)
                .HasConstraintName("hr_employee_skill_log_skill_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrEmployeeSkillLogWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_log_write_uid_fkey");
        });

        modelBuilder.Entity<HrEmployeeSkillReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hr_employee_skill_report");

            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LevelProgress).HasColumnName("level_progress");
            entity.Property(e => e.SkillId).HasColumnName("skill_id");
            entity.Property(e => e.SkillLevel)
                .HasColumnType("character varying")
                .HasColumnName("skill_level");
            entity.Property(e => e.SkillTypeId).HasColumnName("skill_type_id");
        });

        modelBuilder.Entity<HrExpense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_pkey");

            entity.ToTable("hr_expense", tb => tb.HasComment("Expense"));

            entity.HasIndex(e => e.AnalyticDistribution, "hr_expense_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.State, "hr_expense_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Account")
                .HasColumnName("account_id");
            entity.Property(e => e.AccountingDate)
                .HasComment("Accounting Date")
                .HasColumnName("accounting_date");
            entity.Property(e => e.AmountTax)
                .HasComment("Tax amount in Currency")
                .HasColumnName("amount_tax");
            entity.Property(e => e.AmountTaxCompany)
                .HasComment("Tax amount")
                .HasColumnName("amount_tax_company");
            entity.Property(e => e.AnalyticDistribution)
                .HasComment("Analytic")
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Date)
                .HasComment("Expense Date")
                .HasColumnName("date");
            entity.Property(e => e.Description)
                .HasComment("Internal Notes")
                .HasColumnName("description");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.IsRefused)
                .HasComment("Explicitly Refused by manager or accountant")
                .HasColumnName("is_refused");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PaymentMode)
                .HasComment("Paid By")
                .HasColumnType("character varying")
                .HasColumnName("payment_mode");
            entity.Property(e => e.ProductId)
                .HasComment("Category")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.Reference)
                .HasComment("Bill Reference")
                .HasColumnType("character varying")
                .HasColumnName("reference");
            entity.Property(e => e.SaleOrderId)
                .HasComment("Customer to Reinvoice")
                .HasColumnName("sale_order_id");
            entity.Property(e => e.Sample)
                .HasComment("Sample")
                .HasColumnName("sample");
            entity.Property(e => e.SheetId)
                .HasComment("Expense Report")
                .HasColumnName("sheet_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TotalAmount)
                .HasComment("Total In Currency")
                .HasColumnName("total_amount");
            entity.Property(e => e.TotalAmountCompany)
                .HasComment("Total")
                .HasColumnName("total_amount_company");
            entity.Property(e => e.UnitAmount)
                .HasComment("Unit Price")
                .HasColumnName("unit_amount");
            entity.Property(e => e.UntaxedAmount)
                .HasComment("Total Untaxed Amount In Currency")
                .HasColumnName("untaxed_amount");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrExpenseCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_currency_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_employee_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_product_uom_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sale_order_id_fkey");

            entity.HasOne(d => d.Sheet).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrExpenseWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_write_uid_fkey");

            entity.HasMany(d => d.Taxes).WithMany(p => p.Expenses)
                .UsingEntity<Dictionary<string, object>>(
                    "ExpenseTax",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("expense_tax_tax_id_fkey"),
                    l => l.HasOne<HrExpense>().WithMany()
                        .HasForeignKey("ExpenseId")
                        .HasConstraintName("expense_tax_expense_id_fkey"),
                    j =>
                    {
                        j.HasKey("ExpenseId", "TaxId").HasName("expense_tax_pkey");
                        j.ToTable("expense_tax", tb => tb.HasComment("RELATION BETWEEN hr_expense AND account_tax"));
                        j.HasIndex(new[] { "TaxId", "ExpenseId" }, "expense_tax_tax_id_expense_id_idx");
                        j.IndexerProperty<int>("ExpenseId").HasColumnName("expense_id");
                        j.IndexerProperty<int>("TaxId").HasColumnName("tax_id");
                    });
        });

        modelBuilder.Entity<HrExpenseApproveDuplicate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_approve_duplicate_pkey");

            entity.ToTable("hr_expense_approve_duplicate", tb => tb.HasComment("Expense Approve Duplicate"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrExpenseApproveDuplicateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_approve_duplicate_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrExpenseApproveDuplicateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_approve_duplicate_write_uid_fkey");

            entity.HasMany(d => d.HrExpenseSheets).WithMany(p => p.HrExpenseApproveDuplicates)
                .UsingEntity<Dictionary<string, object>>(
                    "HrExpenseApproveDuplicateHrExpenseSheetRel",
                    r => r.HasOne<HrExpenseSheet>().WithMany()
                        .HasForeignKey("HrExpenseSheetId")
                        .HasConstraintName("hr_expense_approve_duplicate_hr_expens_hr_expense_sheet_id_fkey"),
                    l => l.HasOne<HrExpenseApproveDuplicate>().WithMany()
                        .HasForeignKey("HrExpenseApproveDuplicateId")
                        .HasConstraintName("hr_expense_approve_duplicate__hr_expense_approve_duplicate_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseApproveDuplicateId", "HrExpenseSheetId").HasName("hr_expense_approve_duplicate_hr_expense_sheet_rel_pkey");
                        j.ToTable("hr_expense_approve_duplicate_hr_expense_sheet_rel", tb => tb.HasComment("RELATION BETWEEN hr_expense_approve_duplicate AND hr_expense_sheet"));
                        j.HasIndex(new[] { "HrExpenseSheetId", "HrExpenseApproveDuplicateId" }, "hr_expense_approve_duplicate__hr_expense_sheet_id_hr_expens_idx");
                        j.IndexerProperty<int>("HrExpenseApproveDuplicateId").HasColumnName("hr_expense_approve_duplicate_id");
                        j.IndexerProperty<int>("HrExpenseSheetId").HasColumnName("hr_expense_sheet_id");
                    });

            entity.HasMany(d => d.HrExpenses).WithMany(p => p.HrExpenseApproveDuplicates)
                .UsingEntity<Dictionary<string, object>>(
                    "HrExpenseHrExpenseApproveDuplicateRel",
                    r => r.HasOne<HrExpense>().WithMany()
                        .HasForeignKey("HrExpenseId")
                        .HasConstraintName("hr_expense_hr_expense_approve_duplicate_rel_hr_expense_id_fkey"),
                    l => l.HasOne<HrExpenseApproveDuplicate>().WithMany()
                        .HasForeignKey("HrExpenseApproveDuplicateId")
                        .HasConstraintName("hr_expense_hr_expense_approve_hr_expense_approve_duplicate_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseApproveDuplicateId", "HrExpenseId").HasName("hr_expense_hr_expense_approve_duplicate_rel_pkey");
                        j.ToTable("hr_expense_hr_expense_approve_duplicate_rel", tb => tb.HasComment("RELATION BETWEEN hr_expense_approve_duplicate AND hr_expense"));
                        j.HasIndex(new[] { "HrExpenseId", "HrExpenseApproveDuplicateId" }, "hr_expense_hr_expense_approve_hr_expense_id_hr_expense_appr_idx");
                        j.IndexerProperty<int>("HrExpenseApproveDuplicateId").HasColumnName("hr_expense_approve_duplicate_id");
                        j.IndexerProperty<int>("HrExpenseId").HasColumnName("hr_expense_id");
                    });
        });

        modelBuilder.Entity<HrExpenseRefuseWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_refuse_wizard_pkey");

            entity.ToTable("hr_expense_refuse_wizard", tb => tb.HasComment("Expense Refuse Reason Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.HrExpenseSheetId)
                .HasComment("Hr Expense Sheet")
                .HasColumnName("hr_expense_sheet_id");
            entity.Property(e => e.Reason)
                .HasComment("Reason")
                .HasColumnType("character varying")
                .HasColumnName("reason");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrExpenseRefuseWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_refuse_wizard_create_uid_fkey");

            entity.HasOne(d => d.HrExpenseSheet).WithMany(p => p.HrExpenseRefuseWizards)
                .HasForeignKey(d => d.HrExpenseSheetId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_refuse_wizard_hr_expense_sheet_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrExpenseRefuseWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_refuse_wizard_write_uid_fkey");

            entity.HasMany(d => d.HrExpenses).WithMany(p => p.HrExpenseRefuseWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "HrExpenseHrExpenseRefuseWizardRel",
                    r => r.HasOne<HrExpense>().WithMany()
                        .HasForeignKey("HrExpenseId")
                        .HasConstraintName("hr_expense_hr_expense_refuse_wizard_rel_hr_expense_id_fkey"),
                    l => l.HasOne<HrExpenseRefuseWizard>().WithMany()
                        .HasForeignKey("HrExpenseRefuseWizardId")
                        .HasConstraintName("hr_expense_hr_expense_refuse_w_hr_expense_refuse_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseRefuseWizardId", "HrExpenseId").HasName("hr_expense_hr_expense_refuse_wizard_rel_pkey");
                        j.ToTable("hr_expense_hr_expense_refuse_wizard_rel", tb => tb.HasComment("RELATION BETWEEN hr_expense_refuse_wizard AND hr_expense"));
                        j.HasIndex(new[] { "HrExpenseId", "HrExpenseRefuseWizardId" }, "hr_expense_hr_expense_refuse__hr_expense_id_hr_expense_refu_idx");
                        j.IndexerProperty<int>("HrExpenseRefuseWizardId").HasColumnName("hr_expense_refuse_wizard_id");
                        j.IndexerProperty<int>("HrExpenseId").HasColumnName("hr_expense_id");
                    });
        });

        modelBuilder.Entity<HrExpenseSheet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_sheet_pkey");

            entity.ToTable("hr_expense_sheet", tb => tb.HasComment("Expense Report"));

            entity.HasIndex(e => e.State, "hr_expense_sheet_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountMoveId)
                .HasComment("Journal Entry")
                .HasColumnName("account_move_id");
            entity.Property(e => e.AccountingDate)
                .HasComment("Accounting Date")
                .HasColumnName("accounting_date");
            entity.Property(e => e.AddressId)
                .HasComment("Employee Home Address")
                .HasColumnName("address_id");
            entity.Property(e => e.AmountResidual)
                .HasComment("Amount Due")
                .HasColumnName("amount_residual");
            entity.Property(e => e.ApprovalDate)
                .HasComment("Approval Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("approval_date");
            entity.Property(e => e.BankJournalId)
                .HasComment("Bank Journal")
                .HasColumnName("bank_journal_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.JournalId)
                .HasComment("Expense Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Expense Report Summary")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PaymentState)
                .HasComment("Payment Status")
                .HasColumnType("character varying")
                .HasColumnName("payment_state");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TotalAmount)
                .HasComment("Total Amount")
                .HasColumnName("total_amount");
            entity.Property(e => e.TotalAmountTaxes)
                .HasComment("Taxes")
                .HasColumnName("total_amount_taxes");
            entity.Property(e => e.UntaxedAmount)
                .HasComment("Untaxed Amount")
                .HasColumnName("untaxed_amount");
            entity.Property(e => e.UserId)
                .HasComment("Manager")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMove).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.AccountMoveId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_sheet_account_move_id_fkey");

            entity.HasOne(d => d.Address).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_address_id_fkey");

            entity.HasOne(d => d.BankJournal).WithMany(p => p.HrExpenseSheetBankJournals)
                .HasForeignKey(d => d.BankJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_bank_journal_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_sheet_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrExpenseSheetCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_currency_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_sheet_employee_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.HrExpenseSheetJournals)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_journal_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_message_main_attachment_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.HrExpenseSheetUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrExpenseSheetWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_write_uid_fkey");
        });

        modelBuilder.Entity<HrExpenseSplit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_split_pkey");

            entity.ToTable("hr_expense_split", tb => tb.HasComment("Expense Split"));

            entity.HasIndex(e => e.AnalyticDistribution, "hr_expense_split_analytic_distribution_gin_index").HasMethod("gin");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnalyticDistribution)
                .HasComment("Analytic")
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.ExpenseId)
                .HasComment("Expense")
                .HasColumnName("expense_id");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ProductHasCost)
                .HasComment("Is product with non zero cost selected")
                .HasColumnName("product_has_cost");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.SaleOrderId)
                .HasComment("Customer to Reinvoice")
                .HasColumnName("sale_order_id");
            entity.Property(e => e.TotalAmount)
                .HasComment("Total In Currency")
                .HasColumnName("total_amount");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrExpenseSplitCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_currency_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("hr_expense_split_employee_id_fkey");

            entity.HasOne(d => d.Expense).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.ExpenseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_expense_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("hr_expense_split_product_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_sale_order_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrExpenseSplitWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_write_uid_fkey");

            entity.HasMany(d => d.AccountTaxes).WithMany(p => p.HrExpenseSplits)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxHrExpenseSplitRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_hr_expense_split_rel_account_tax_id_fkey"),
                    l => l.HasOne<HrExpenseSplit>().WithMany()
                        .HasForeignKey("HrExpenseSplitId")
                        .HasConstraintName("account_tax_hr_expense_split_rel_hr_expense_split_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseSplitId", "AccountTaxId").HasName("account_tax_hr_expense_split_rel_pkey");
                        j.ToTable("account_tax_hr_expense_split_rel", tb => tb.HasComment("RELATION BETWEEN hr_expense_split AND account_tax"));
                        j.HasIndex(new[] { "AccountTaxId", "HrExpenseSplitId" }, "account_tax_hr_expense_split__account_tax_id_hr_expense_spl_idx");
                        j.IndexerProperty<int>("HrExpenseSplitId").HasColumnName("hr_expense_split_id");
                        j.IndexerProperty<int>("AccountTaxId").HasColumnName("account_tax_id");
                    });
        });

        modelBuilder.Entity<HrExpenseSplitWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_split_wizard_pkey");

            entity.ToTable("hr_expense_split_wizard", tb => tb.HasComment("Expense Split Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ExpenseId)
                .HasComment("Expense")
                .HasColumnName("expense_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrExpenseSplitWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_wizard_create_uid_fkey");

            entity.HasOne(d => d.Expense).WithMany(p => p.HrExpenseSplitWizards)
                .HasForeignKey(d => d.ExpenseId)
                .HasConstraintName("hr_expense_split_wizard_expense_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrExpenseSplitWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<HrHolidaysCancelLeave>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_holidays_cancel_leave_pkey");

            entity.ToTable("hr_holidays_cancel_leave", tb => tb.HasComment("Cancel Leave Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LeaveId)
                .HasComment("Leave")
                .HasColumnName("leave_id");
            entity.Property(e => e.Reason)
                .HasComment("Reason")
                .HasColumnName("reason");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrHolidaysCancelLeaveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_cancel_leave_create_uid_fkey");

            entity.HasOne(d => d.Leave).WithMany(p => p.HrHolidaysCancelLeaves)
                .HasForeignKey(d => d.LeaveId)
                .HasConstraintName("hr_holidays_cancel_leave_leave_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrHolidaysCancelLeaveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_cancel_leave_write_uid_fkey");
        });

        modelBuilder.Entity<HrHolidaysSummaryEmployee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_holidays_summary_employee_pkey");

            entity.ToTable("hr_holidays_summary_employee", tb => tb.HasComment("HR Time Off Summary Report By Employee"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasComment("From")
                .HasColumnName("date_from");
            entity.Property(e => e.HolidayType)
                .HasComment("Select Time Off Type")
                .HasColumnType("character varying")
                .HasColumnName("holiday_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrHolidaysSummaryEmployeeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_summary_employee_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrHolidaysSummaryEmployeeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_summary_employee_write_uid_fkey");

            entity.HasMany(d => d.Emps).WithMany(p => p.Sums)
                .UsingEntity<Dictionary<string, object>>(
                    "SummaryEmpRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("EmpId")
                        .HasConstraintName("summary_emp_rel_emp_id_fkey"),
                    l => l.HasOne<HrHolidaysSummaryEmployee>().WithMany()
                        .HasForeignKey("SumId")
                        .HasConstraintName("summary_emp_rel_sum_id_fkey"),
                    j =>
                    {
                        j.HasKey("SumId", "EmpId").HasName("summary_emp_rel_pkey");
                        j.ToTable("summary_emp_rel", tb => tb.HasComment("RELATION BETWEEN hr_holidays_summary_employee AND hr_employee"));
                        j.HasIndex(new[] { "EmpId", "SumId" }, "summary_emp_rel_emp_id_sum_id_idx");
                        j.IndexerProperty<int>("SumId").HasColumnName("sum_id");
                        j.IndexerProperty<int>("EmpId").HasColumnName("emp_id");
                    });
        });

        modelBuilder.Entity<HrJob>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_job_pkey");

            entity.ToTable("hr_job", tb => tb.HasComment("Job Position"));

            entity.HasIndex(e => e.IsPublished, "hr_job_is_published_index");

            entity.HasIndex(e => new { e.Name, e.CompanyId, e.DepartmentId }, "hr_job_name_company_uniq").IsUnique();

            entity.HasIndex(e => e.WebsiteId, "hr_job_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AddressId)
                .HasComment("Job Location")
                .HasColumnName("address_id");
            entity.Property(e => e.AliasId)
                .HasComment("Alias")
                .HasColumnName("alias_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.ContractTypeId)
                .HasComment("Employment Type")
                .HasColumnName("contract_type_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.Description)
                .HasComment("Job Description")
                .HasColumnName("description");
            entity.Property(e => e.ExpectedEmployees)
                .HasComment("Total Forecasted Employees")
                .HasColumnName("expected_employees");
            entity.Property(e => e.HrResponsibleId)
                .HasComment("HR Responsible")
                .HasColumnName("hr_responsible_id");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.JobDetails)
                .HasComment("Process Details")
                .HasColumnType("jsonb")
                .HasColumnName("job_details");
            entity.Property(e => e.ManagerId)
                .HasComment("Department Manager")
                .HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Job Position")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NoOfEmployee)
                .HasComment("Current Number of Employees")
                .HasColumnName("no_of_employee");
            entity.Property(e => e.NoOfHiredEmployee)
                .HasComment("Hired Employees")
                .HasColumnName("no_of_hired_employee");
            entity.Property(e => e.NoOfRecruitment)
                .HasComment("Target")
                .HasColumnName("no_of_recruitment");
            entity.Property(e => e.Requirements)
                .HasComment("Requirements")
                .HasColumnName("requirements");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.UserId)
                .HasComment("Recruiter")
                .HasColumnName("user_id");
            entity.Property(e => e.WebsiteDescription)
                .HasComment("Website description")
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Address).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_address_id_fkey");

            entity.HasOne(d => d.Alias).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_job_alias_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_company_id_fkey");

            entity.HasOne(d => d.ContractType).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.ContractTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_contract_type_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrJobCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_department_id_fkey");

            entity.HasOne(d => d.HrResponsible).WithMany(p => p.HrJobHrResponsibles)
                .HasForeignKey(d => d.HrResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_hr_responsible_id_fkey");

            entity.HasOne(d => d.Manager).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_message_main_attachment_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.HrJobUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_user_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_job_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrJobWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_write_uid_fkey");

            entity.HasMany(d => d.ResUsers).WithMany(p => p.HrJobs)
                .UsingEntity<Dictionary<string, object>>(
                    "HrJobExtendedInterviewerResUser",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("hr_job_extended_interviewer_res_users_res_users_id_fkey"),
                    l => l.HasOne<HrJob>().WithMany()
                        .HasForeignKey("HrJobId")
                        .HasConstraintName("hr_job_extended_interviewer_res_users_hr_job_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrJobId", "ResUsersId").HasName("hr_job_extended_interviewer_res_users_pkey");
                        j.ToTable("hr_job_extended_interviewer_res_users", tb => tb.HasComment("RELATION BETWEEN hr_job AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "HrJobId" }, "hr_job_extended_interviewer_res_user_res_users_id_hr_job_id_idx");
                        j.IndexerProperty<int>("HrJobId").HasColumnName("hr_job_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });

            entity.HasMany(d => d.ResUsersNavigation).WithMany(p => p.HrJobsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "HrJobResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("hr_job_res_users_rel_res_users_id_fkey"),
                    l => l.HasOne<HrJob>().WithMany()
                        .HasForeignKey("HrJobId")
                        .HasConstraintName("hr_job_res_users_rel_hr_job_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrJobId", "ResUsersId").HasName("hr_job_res_users_rel_pkey");
                        j.ToTable("hr_job_res_users_rel", tb => tb.HasComment("RELATION BETWEEN hr_job AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "HrJobId" }, "hr_job_res_users_rel_res_users_id_hr_job_id_idx");
                        j.IndexerProperty<int>("HrJobId").HasColumnName("hr_job_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });

            entity.HasMany(d => d.Users).WithMany(p => p.Jobs)
                .UsingEntity<Dictionary<string, object>>(
                    "JobFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("job_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<HrJob>().WithMany()
                        .HasForeignKey("JobId")
                        .HasConstraintName("job_favorite_user_rel_job_id_fkey"),
                    j =>
                    {
                        j.HasKey("JobId", "UserId").HasName("job_favorite_user_rel_pkey");
                        j.ToTable("job_favorite_user_rel", tb => tb.HasComment("RELATION BETWEEN hr_job AND res_users"));
                        j.HasIndex(new[] { "UserId", "JobId" }, "job_favorite_user_rel_user_id_job_id_idx");
                        j.IndexerProperty<int>("JobId").HasColumnName("job_id");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                    });
        });

        modelBuilder.Entity<HrLeave>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_pkey");

            entity.ToTable("hr_leave", tb => tb.HasComment("Time Off"));

            entity.HasIndex(e => e.DateFrom, "hr_leave_date_from_index");

            entity.HasIndex(e => new { e.DateTo, e.DateFrom }, "hr_leave_date_to_date_from_index");

            entity.HasIndex(e => e.EmployeeId, "hr_leave_employee_id_index");

            entity.HasIndex(e => e.UserId, "hr_leave_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CategoryId)
                .HasComment("Employee Tag")
                .HasColumnName("category_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_to");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.DurationDisplay)
                .HasComment("Requested (Days/Hours)")
                .HasColumnType("character varying")
                .HasColumnName("duration_display");
            entity.Property(e => e.EmployeeCompanyId)
                .HasComment("Company")
                .HasColumnName("employee_company_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.FirstApproverId)
                .HasComment("First Approval")
                .HasColumnName("first_approver_id");
            entity.Property(e => e.HolidayAllocationId)
                .HasComment("Allocation")
                .HasColumnName("holiday_allocation_id");
            entity.Property(e => e.HolidayStatusId)
                .HasComment("Time Off Type")
                .HasColumnName("holiday_status_id");
            entity.Property(e => e.HolidayType)
                .HasComment("Allocation Mode")
                .HasColumnType("character varying")
                .HasColumnName("holiday_type");
            entity.Property(e => e.ManagerId)
                .HasComment("Manager")
                .HasColumnName("manager_id");
            entity.Property(e => e.MeetingId)
                .HasComment("Meeting")
                .HasColumnName("meeting_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.ModeCompanyId)
                .HasComment("Company Mode")
                .HasColumnName("mode_company_id");
            entity.Property(e => e.MultiEmployee)
                .HasComment("Multi Employee")
                .HasColumnName("multi_employee");
            entity.Property(e => e.Notes)
                .HasComment("Reasons")
                .HasColumnName("notes");
            entity.Property(e => e.NumberOfDays)
                .HasComment("Duration (Days)")
                .HasColumnName("number_of_days");
            entity.Property(e => e.OvertimeId)
                .HasComment("Extra Hours")
                .HasColumnName("overtime_id");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.PrivateName)
                .HasComment("Time Off Description")
                .HasColumnType("character varying")
                .HasColumnName("private_name");
            entity.Property(e => e.ReportNote)
                .HasComment("HR Comments")
                .HasColumnName("report_note");
            entity.Property(e => e.RequestDateFrom)
                .HasComment("Request Start Date")
                .HasColumnName("request_date_from");
            entity.Property(e => e.RequestDateFromPeriod)
                .HasComment("Date Period Start")
                .HasColumnType("character varying")
                .HasColumnName("request_date_from_period");
            entity.Property(e => e.RequestDateTo)
                .HasComment("Request End Date")
                .HasColumnName("request_date_to");
            entity.Property(e => e.RequestHourFrom)
                .HasComment("Hour from")
                .HasColumnType("character varying")
                .HasColumnName("request_hour_from");
            entity.Property(e => e.RequestHourTo)
                .HasComment("Hour to")
                .HasColumnType("character varying")
                .HasColumnName("request_hour_to");
            entity.Property(e => e.RequestUnitHalf)
                .HasComment("Half Day")
                .HasColumnName("request_unit_half");
            entity.Property(e => e.RequestUnitHours)
                .HasComment("Custom Hours")
                .HasColumnName("request_unit_hours");
            entity.Property(e => e.SecondApproverId)
                .HasComment("Second Approval")
                .HasColumnName("second_approver_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_category_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrLeaveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_department_id_fkey");

            entity.HasOne(d => d.EmployeeCompany).WithMany(p => p.HrLeaveEmployeeCompanies)
                .HasForeignKey(d => d.EmployeeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_employee_company_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrLeaveEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_employee_id_fkey");

            entity.HasOne(d => d.FirstApprover).WithMany(p => p.HrLeaveFirstApprovers)
                .HasForeignKey(d => d.FirstApproverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_first_approver_id_fkey");

            entity.HasOne(d => d.HolidayAllocation).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.HolidayAllocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_holiday_allocation_id_fkey");

            entity.HasOne(d => d.HolidayStatus).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.HolidayStatusId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_holiday_status_id_fkey");

            entity.HasOne(d => d.Manager).WithMany(p => p.HrLeaveManagers)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_manager_id_fkey");

            entity.HasOne(d => d.Meeting).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.MeetingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_meeting_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ModeCompany).WithMany(p => p.HrLeaveModeCompanies)
                .HasForeignKey(d => d.ModeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_mode_company_id_fkey");

            entity.HasOne(d => d.Overtime).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.OvertimeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_overtime_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_parent_id_fkey");

            entity.HasOne(d => d.SecondApprover).WithMany(p => p.HrLeaveSecondApprovers)
                .HasForeignKey(d => d.SecondApproverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_second_approver_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.HrLeaveUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrLeaveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_write_uid_fkey");

            entity.HasMany(d => d.HrEmployees).WithMany(p => p.HrLeaves)
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrLeaveRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_hr_leave_rel_hr_employee_id_fkey"),
                    l => l.HasOne<HrLeave>().WithMany()
                        .HasForeignKey("HrLeaveId")
                        .HasConstraintName("hr_employee_hr_leave_rel_hr_leave_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrLeaveId", "HrEmployeeId").HasName("hr_employee_hr_leave_rel_pkey");
                        j.ToTable("hr_employee_hr_leave_rel", tb => tb.HasComment("RELATION BETWEEN hr_leave AND hr_employee"));
                        j.HasIndex(new[] { "HrEmployeeId", "HrLeaveId" }, "hr_employee_hr_leave_rel_hr_employee_id_hr_leave_id_idx");
                        j.IndexerProperty<int>("HrLeaveId").HasColumnName("hr_leave_id");
                        j.IndexerProperty<int>("HrEmployeeId").HasColumnName("hr_employee_id");
                    });
        });

        modelBuilder.Entity<HrLeaveAccrualLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_accrual_level_pkey");

            entity.ToTable("hr_leave_accrual_level", tb => tb.HasComment("Accrual Plan Level"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccrualPlanId)
                .HasComment("Accrual Plan")
                .HasColumnName("accrual_plan_id");
            entity.Property(e => e.ActionWithUnusedAccruals)
                .HasComment("At the end of the calendar year, unused accruals will be")
                .HasColumnType("character varying")
                .HasColumnName("action_with_unused_accruals");
            entity.Property(e => e.AddedValue)
                .HasComment("Rate")
                .HasColumnName("added_value");
            entity.Property(e => e.AddedValueType)
                .HasComment("Added Value Type")
                .HasColumnType("character varying")
                .HasColumnName("added_value_type");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FirstDay)
                .HasComment("First Day")
                .HasColumnName("first_day");
            entity.Property(e => e.FirstMonth)
                .HasComment("First Month")
                .HasColumnType("character varying")
                .HasColumnName("first_month");
            entity.Property(e => e.FirstMonthDay)
                .HasComment("First Month Day")
                .HasColumnName("first_month_day");
            entity.Property(e => e.Frequency)
                .HasComment("Frequency")
                .HasColumnType("character varying")
                .HasColumnName("frequency");
            entity.Property(e => e.IsBasedOnWorkedTime)
                .HasComment("Based on worked time")
                .HasColumnName("is_based_on_worked_time");
            entity.Property(e => e.MaximumLeave)
                .HasComment("Limit to")
                .HasColumnName("maximum_leave");
            entity.Property(e => e.ParentId)
                .HasComment("Previous Level")
                .HasColumnName("parent_id");
            entity.Property(e => e.PostponeMaxDays)
                .HasComment("Maximum amount of accruals to transfer")
                .HasColumnName("postpone_max_days");
            entity.Property(e => e.SecondDay)
                .HasComment("Second Day")
                .HasColumnName("second_day");
            entity.Property(e => e.SecondMonth)
                .HasComment("Second Month")
                .HasColumnType("character varying")
                .HasColumnName("second_month");
            entity.Property(e => e.SecondMonthDay)
                .HasComment("Second Month Day")
                .HasColumnName("second_month_day");
            entity.Property(e => e.Sequence)
                .HasComment("sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.StartCount)
                .HasComment("Start after")
                .HasColumnName("start_count");
            entity.Property(e => e.StartType)
                .HasComment(" ")
                .HasColumnType("character varying")
                .HasColumnName("start_type");
            entity.Property(e => e.WeekDay)
                .HasComment("Allocation on")
                .HasColumnType("character varying")
                .HasColumnName("week_day");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.YearlyDay)
                .HasComment("Yearly Day")
                .HasColumnName("yearly_day");
            entity.Property(e => e.YearlyMonth)
                .HasComment("Yearly Month")
                .HasColumnType("character varying")
                .HasColumnName("yearly_month");

            entity.HasOne(d => d.AccrualPlan).WithMany(p => p.HrLeaveAccrualLevels)
                .HasForeignKey(d => d.AccrualPlanId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_accrual_level_accrual_plan_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrLeaveAccrualLevelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_level_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_level_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrLeaveAccrualLevelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_level_write_uid_fkey");
        });

        modelBuilder.Entity<HrLeaveAccrualPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_accrual_plan_pkey");

            entity.ToTable("hr_leave_accrual_plan", tb => tb.HasComment("Accrual Plan"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TimeOffTypeId)
                .HasComment("Time Off Type")
                .HasColumnName("time_off_type_id");
            entity.Property(e => e.TransitionMode)
                .HasComment("Level Transition")
                .HasColumnType("character varying")
                .HasColumnName("transition_mode");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrLeaveAccrualPlanCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_plan_create_uid_fkey");

            entity.HasOne(d => d.TimeOffType).WithMany(p => p.HrLeaveAccrualPlans)
                .HasForeignKey(d => d.TimeOffTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_plan_time_off_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrLeaveAccrualPlanWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_plan_write_uid_fkey");
        });

        modelBuilder.Entity<HrLeaveAllocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_allocation_pkey");

            entity.ToTable("hr_leave_allocation", tb => tb.HasComment("Time Off Allocation"));

            entity.HasIndex(e => e.DateFrom, "hr_leave_allocation_date_from_index");

            entity.HasIndex(e => e.EmployeeId, "hr_leave_allocation_employee_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccrualPlanId)
                .HasComment("Accrual Plan")
                .HasColumnName("accrual_plan_id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AllocationType)
                .HasComment("Allocation Type")
                .HasColumnType("character varying")
                .HasColumnName("allocation_type");
            entity.Property(e => e.ApproverId)
                .HasComment("First Approval")
                .HasColumnName("approver_id");
            entity.Property(e => e.CategoryId)
                .HasComment("Employee Tag")
                .HasColumnName("category_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasComment("Start Date")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasComment("End Date")
                .HasColumnName("date_to");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.EmployeeCompanyId)
                .HasComment("Company")
                .HasColumnName("employee_company_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.HolidayStatusId)
                .HasComment("Time Off Type")
                .HasColumnName("holiday_status_id");
            entity.Property(e => e.HolidayType)
                .HasComment("Allocation Mode")
                .HasColumnType("character varying")
                .HasColumnName("holiday_type");
            entity.Property(e => e.Lastcall)
                .HasComment("Date of the last accrual allocation")
                .HasColumnName("lastcall");
            entity.Property(e => e.ManagerId)
                .HasComment("Manager")
                .HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.ModeCompanyId)
                .HasComment("Company Mode")
                .HasColumnName("mode_company_id");
            entity.Property(e => e.MultiEmployee)
                .HasComment("Multi Employee")
                .HasColumnName("multi_employee");
            entity.Property(e => e.Nextcall)
                .HasComment("Date of the next accrual allocation")
                .HasColumnName("nextcall");
            entity.Property(e => e.Notes)
                .HasComment("Reasons")
                .HasColumnName("notes");
            entity.Property(e => e.NumberOfDays)
                .HasComment("Number of Days")
                .HasColumnName("number_of_days");
            entity.Property(e => e.OvertimeId)
                .HasComment("Extra Hours")
                .HasColumnName("overtime_id");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.PrivateName)
                .HasComment("Allocation Description")
                .HasColumnType("character varying")
                .HasColumnName("private_name");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccrualPlan).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.AccrualPlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_accrual_plan_id_fkey");

            entity.HasOne(d => d.Approver).WithMany(p => p.HrLeaveAllocationApprovers)
                .HasForeignKey(d => d.ApproverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_approver_id_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_category_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrLeaveAllocationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_department_id_fkey");

            entity.HasOne(d => d.EmployeeCompany).WithMany(p => p.HrLeaveAllocationEmployeeCompanies)
                .HasForeignKey(d => d.EmployeeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_employee_company_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrLeaveAllocationEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_allocation_employee_id_fkey");

            entity.HasOne(d => d.HolidayStatus).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.HolidayStatusId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_allocation_holiday_status_id_fkey");

            entity.HasOne(d => d.Manager).WithMany(p => p.HrLeaveAllocationManagers)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ModeCompany).WithMany(p => p.HrLeaveAllocationModeCompanies)
                .HasForeignKey(d => d.ModeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_mode_company_id_fkey");

            entity.HasOne(d => d.Overtime).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.OvertimeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_overtime_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrLeaveAllocationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_write_uid_fkey");

            entity.HasMany(d => d.HrEmployees).WithMany(p => p.HrLeaveAllocations)
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrLeaveAllocationRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_hr_leave_allocation_rel_hr_employee_id_fkey"),
                    l => l.HasOne<HrLeaveAllocation>().WithMany()
                        .HasForeignKey("HrLeaveAllocationId")
                        .HasConstraintName("hr_employee_hr_leave_allocation_rel_hr_leave_allocation_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrLeaveAllocationId", "HrEmployeeId").HasName("hr_employee_hr_leave_allocation_rel_pkey");
                        j.ToTable("hr_employee_hr_leave_allocation_rel", tb => tb.HasComment("RELATION BETWEEN hr_leave_allocation AND hr_employee"));
                        j.HasIndex(new[] { "HrEmployeeId", "HrLeaveAllocationId" }, "hr_employee_hr_leave_allocati_hr_employee_id_hr_leave_alloc_idx");
                        j.IndexerProperty<int>("HrLeaveAllocationId").HasColumnName("hr_leave_allocation_id");
                        j.IndexerProperty<int>("HrEmployeeId").HasColumnName("hr_employee_id");
                    });
        });

        modelBuilder.Entity<HrLeaveEmployeeTypeReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hr_leave_employee_type_report");

            entity.Property(e => e.ActiveEmployee).HasColumnName("active_employee");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.DateFrom)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_to");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.HolidayStatus).HasColumnName("holiday_status");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LeaveType).HasColumnName("leave_type");
            entity.Property(e => e.NumberOfDays).HasColumnName("number_of_days");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
        });

        modelBuilder.Entity<HrLeaveReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hr_leave_report");

            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.ActiveEmployee).HasColumnName("active_employee");
            entity.Property(e => e.AllocationId).HasColumnName("allocation_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.DateFrom)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_to");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.HolidayStatusId).HasColumnName("holiday_status_id");
            entity.Property(e => e.HolidayType)
                .HasColumnType("character varying")
                .HasColumnName("holiday_type");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LeaveId).HasColumnName("leave_id");
            entity.Property(e => e.LeaveType).HasColumnName("leave_type");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NumberOfDays).HasColumnName("number_of_days");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
        });

        modelBuilder.Entity<HrLeaveReportCalendar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hr_leave_report_calendar");

            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsHatched).HasColumnName("is_hatched");
            entity.Property(e => e.IsStriked).HasColumnName("is_striked");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.StartDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_datetime");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.StopDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("stop_datetime");
            entity.Property(e => e.Tz)
                .HasColumnType("character varying")
                .HasColumnName("tz");
        });

        modelBuilder.Entity<HrLeaveStressDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_stress_day_pkey");

            entity.ToTable("hr_leave_stress_day", tb => tb.HasComment("Stress Day"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EndDate)
                .HasComment("End Date")
                .HasColumnName("end_date");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceCalendarId)
                .HasComment("Working Hours")
                .HasColumnName("resource_calendar_id");
            entity.Property(e => e.StartDate)
                .HasComment("Start Date")
                .HasColumnName("start_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.HrLeaveStressDays)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_stress_day_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrLeaveStressDayCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_stress_day_create_uid_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.HrLeaveStressDays)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_stress_day_resource_calendar_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrLeaveStressDayWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_stress_day_write_uid_fkey");

            entity.HasMany(d => d.HrDepartments).WithMany(p => p.HrLeaveStressDays)
                .UsingEntity<Dictionary<string, object>>(
                    "HrDepartmentHrLeaveStressDayRel",
                    r => r.HasOne<HrDepartment>().WithMany()
                        .HasForeignKey("HrDepartmentId")
                        .HasConstraintName("hr_department_hr_leave_stress_day_rel_hr_department_id_fkey"),
                    l => l.HasOne<HrLeaveStressDay>().WithMany()
                        .HasForeignKey("HrLeaveStressDayId")
                        .HasConstraintName("hr_department_hr_leave_stress_day_r_hr_leave_stress_day_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrLeaveStressDayId", "HrDepartmentId").HasName("hr_department_hr_leave_stress_day_rel_pkey");
                        j.ToTable("hr_department_hr_leave_stress_day_rel", tb => tb.HasComment("RELATION BETWEEN hr_leave_stress_day AND hr_department"));
                        j.HasIndex(new[] { "HrDepartmentId", "HrLeaveStressDayId" }, "hr_department_hr_leave_stress_hr_department_id_hr_leave_str_idx");
                        j.IndexerProperty<int>("HrLeaveStressDayId").HasColumnName("hr_leave_stress_day_id");
                        j.IndexerProperty<int>("HrDepartmentId").HasColumnName("hr_department_id");
                    });
        });

        modelBuilder.Entity<HrLeaveType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_type_pkey");

            entity.ToTable("hr_leave_type", tb => tb.HasComment("Time Off Type"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AllocationNotifSubtypeId)
                .HasComment("Allocation Notification Subtype")
                .HasColumnName("allocation_notif_subtype_id");
            entity.Property(e => e.AllocationValidationType)
                .HasComment("Approval")
                .HasColumnType("character varying")
                .HasColumnName("allocation_validation_type");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.ColorName)
                .HasComment("Color in Report")
                .HasColumnType("character varying")
                .HasColumnName("color_name");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateCalendarMeeting)
                .HasComment("Display Time Off in Calendar")
                .HasColumnName("create_calendar_meeting");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmployeeRequests)
                .HasComment("Employee Requests")
                .HasColumnType("character varying")
                .HasColumnName("employee_requests");
            entity.Property(e => e.IconId)
                .HasComment("Cover Image")
                .HasColumnName("icon_id");
            entity.Property(e => e.LeaveNotifSubtypeId)
                .HasComment("Time Off Notification Subtype")
                .HasColumnName("leave_notif_subtype_id");
            entity.Property(e => e.LeaveValidationType)
                .HasComment("Leave Validation")
                .HasColumnType("character varying")
                .HasColumnName("leave_validation_type");
            entity.Property(e => e.Name)
                .HasComment("Time Off Type")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OvertimeDeductible)
                .HasComment("Deduct Extra Hours")
                .HasColumnName("overtime_deductible");
            entity.Property(e => e.RequestUnit)
                .HasComment("Take Time Off in")
                .HasColumnType("character varying")
                .HasColumnName("request_unit");
            entity.Property(e => e.RequiresAllocation)
                .HasComment("Requires allocation")
                .HasColumnType("character varying")
                .HasColumnName("requires_allocation");
            entity.Property(e => e.ResponsibleId)
                .HasComment("Responsible Time Off Officer")
                .HasColumnName("responsible_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SupportDocument)
                .HasComment("Supporting Document")
                .HasColumnName("support_document");
            entity.Property(e => e.TimeType)
                .HasComment("Kind of Time Off")
                .HasColumnType("character varying")
                .HasColumnName("time_type");
            entity.Property(e => e.Unpaid)
                .HasComment("Is Unpaid")
                .HasColumnName("unpaid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AllocationNotifSubtype).WithMany(p => p.HrLeaveTypeAllocationNotifSubtypes)
                .HasForeignKey(d => d.AllocationNotifSubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_allocation_notif_subtype_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrLeaveTypes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrLeaveTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_create_uid_fkey");

            entity.HasOne(d => d.Icon).WithMany(p => p.HrLeaveTypes)
                .HasForeignKey(d => d.IconId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_icon_id_fkey");

            entity.HasOne(d => d.LeaveNotifSubtype).WithMany(p => p.HrLeaveTypeLeaveNotifSubtypes)
                .HasForeignKey(d => d.LeaveNotifSubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_leave_notif_subtype_id_fkey");

            entity.HasOne(d => d.Responsible).WithMany(p => p.HrLeaveTypeResponsibles)
                .HasForeignKey(d => d.ResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_responsible_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrLeaveTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrPayrollStructureType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_payroll_structure_type_pkey");

            entity.ToTable("hr_payroll_structure_type", tb => tb.HasComment("Salary Structure Type"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultResourceCalendarId)
                .HasComment("Default Working Hours")
                .HasColumnName("default_resource_calendar_id");
            entity.Property(e => e.Name)
                .HasComment("Salary Structure Type")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Country).WithMany(p => p.HrPayrollStructureTypes)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrPayrollStructureTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_create_uid_fkey");

            entity.HasOne(d => d.DefaultResourceCalendar).WithMany(p => p.HrPayrollStructureTypes)
                .HasForeignKey(d => d.DefaultResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_default_resource_calendar_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrPayrollStructureTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_plan_pkey");

            entity.ToTable("hr_plan", tb => tb.HasComment("plan"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId)
                .HasComment("Department")
                .HasColumnName("department_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.HrPlans)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrPlanCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrPlans)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_department_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrPlanWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_write_uid_fkey");
        });

        modelBuilder.Entity<HrPlanActivityType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_plan_activity_type_pkey");

            entity.ToTable("hr_plan_activity_type", tb => tb.HasComment("Plan activity type"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActivityTypeId)
                .HasComment("Activity Type")
                .HasColumnName("activity_type_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.PlanId)
                .HasComment("Plan")
                .HasColumnName("plan_id");
            entity.Property(e => e.Responsible)
                .HasComment("Responsible")
                .HasColumnType("character varying")
                .HasColumnName("responsible");
            entity.Property(e => e.ResponsibleId)
                .HasComment("Other Responsible")
                .HasColumnName("responsible_id");
            entity.Property(e => e.Summary)
                .HasComment("Summary")
                .HasColumnType("character varying")
                .HasColumnName("summary");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ActivityType).WithMany(p => p.HrPlanActivityTypes)
                .HasForeignKey(d => d.ActivityTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_plan_activity_type_activity_type_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrPlanActivityTypes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrPlanActivityTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_create_uid_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.HrPlanActivityTypes)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_plan_id_fkey");

            entity.HasOne(d => d.ResponsibleNavigation).WithMany(p => p.HrPlanActivityTypeResponsibleNavigations)
                .HasForeignKey(d => d.ResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_responsible_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrPlanActivityTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrPlanWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_plan_wizard_pkey");

            entity.ToTable("hr_plan_wizard", tb => tb.HasComment("Plan Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PlanId)
                .HasComment("Plan")
                .HasColumnName("plan_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrPlanWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_wizard_create_uid_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.HrPlanWizards)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_wizard_plan_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrPlanWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_wizard_write_uid_fkey");

            entity.HasMany(d => d.PlanWizards).WithMany(p => p.Employees)
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrPlanWizardRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("PlanWizardId")
                        .HasConstraintName("hr_employee_hr_plan_wizard_rel_plan_wizard_id_fkey"),
                    l => l.HasOne<HrPlanWizard>().WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("hr_employee_hr_plan_wizard_rel_employee_id_fkey"),
                    j =>
                    {
                        j.HasKey("EmployeeId", "PlanWizardId").HasName("hr_employee_hr_plan_wizard_rel_pkey");
                        j.ToTable("hr_employee_hr_plan_wizard_rel", tb => tb.HasComment("RELATION BETWEEN hr_plan_wizard AND hr_employee"));
                        j.HasIndex(new[] { "PlanWizardId", "EmployeeId" }, "hr_employee_hr_plan_wizard_rel_plan_wizard_id_employee_id_idx");
                        j.IndexerProperty<int>("EmployeeId").HasColumnName("employee_id");
                        j.IndexerProperty<int>("PlanWizardId").HasColumnName("plan_wizard_id");
                    });
        });

        modelBuilder.Entity<HrRecruitmentDegree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_recruitment_degree_pkey");

            entity.ToTable("hr_recruitment_degree", tb => tb.HasComment("Applicant Degree"));

            entity.HasIndex(e => e.Name, "hr_recruitment_degree_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Degree Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrRecruitmentDegreeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_degree_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrRecruitmentDegreeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_degree_write_uid_fkey");
        });

        modelBuilder.Entity<HrRecruitmentSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_recruitment_source_pkey");

            entity.ToTable("hr_recruitment_source", tb => tb.HasComment("Source of Applicants"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AliasId)
                .HasComment("Alias ID")
                .HasColumnName("alias_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.JobId)
                .HasComment("Job")
                .HasColumnName("job_id");
            entity.Property(e => e.MediumId)
                .HasComment("Medium")
                .HasColumnName("medium_id");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_alias_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrRecruitmentSourceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_create_uid_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_recruitment_source_job_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_medium_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_recruitment_source_source_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrRecruitmentSourceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_write_uid_fkey");
        });

        modelBuilder.Entity<HrRecruitmentStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_recruitment_stage_pkey");

            entity.ToTable("hr_recruitment_stage", tb => tb.HasComment("Recruitment Stages"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Fold)
                .HasComment("Folded in Kanban")
                .HasColumnName("fold");
            entity.Property(e => e.HiredStage)
                .HasComment("Hired Stage")
                .HasColumnName("hired_stage");
            entity.Property(e => e.LegendBlocked)
                .HasComment("Red Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_blocked");
            entity.Property(e => e.LegendDone)
                .HasComment("Green Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_done");
            entity.Property(e => e.LegendNormal)
                .HasComment("Grey Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_normal");
            entity.Property(e => e.Name)
                .HasComment("Stage Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Requirements)
                .HasComment("Requirements")
                .HasColumnName("requirements");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TemplateId)
                .HasComment("Email Template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrRecruitmentStageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_stage_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.HrRecruitmentStages)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_stage_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrRecruitmentStageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_stage_write_uid_fkey");

            entity.HasMany(d => d.HrJobs).WithMany(p => p.HrRecruitmentStages)
                .UsingEntity<Dictionary<string, object>>(
                    "HrJobHrRecruitmentStageRel",
                    r => r.HasOne<HrJob>().WithMany()
                        .HasForeignKey("HrJobId")
                        .HasConstraintName("hr_job_hr_recruitment_stage_rel_hr_job_id_fkey"),
                    l => l.HasOne<HrRecruitmentStage>().WithMany()
                        .HasForeignKey("HrRecruitmentStageId")
                        .HasConstraintName("hr_job_hr_recruitment_stage_rel_hr_recruitment_stage_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrRecruitmentStageId", "HrJobId").HasName("hr_job_hr_recruitment_stage_rel_pkey");
                        j.ToTable("hr_job_hr_recruitment_stage_rel", tb => tb.HasComment("RELATION BETWEEN hr_recruitment_stage AND hr_job"));
                        j.HasIndex(new[] { "HrJobId", "HrRecruitmentStageId" }, "hr_job_hr_recruitment_stage_r_hr_job_id_hr_recruitment_stag_idx");
                        j.IndexerProperty<int>("HrRecruitmentStageId").HasColumnName("hr_recruitment_stage_id");
                        j.IndexerProperty<int>("HrJobId").HasColumnName("hr_job_id");
                    });
        });

        modelBuilder.Entity<HrResumeLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_resume_line_pkey");

            entity.ToTable("hr_resume_line", tb => tb.HasComment("Resume line of an employee"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChannelId)
                .HasComment("Course")
                .HasColumnName("channel_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateEnd)
                .HasComment("Date End")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasComment("Date Start")
                .HasColumnName("date_start");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.DisplayType)
                .HasComment("Display Type")
                .HasColumnType("character varying")
                .HasColumnName("display_type");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.LineTypeId)
                .HasComment("Type")
                .HasColumnName("line_type_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.SurveyId)
                .HasComment("Certification")
                .HasColumnName("survey_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.HrResumeLines)
                .HasForeignKey(d => d.ChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_channel_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrResumeLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrResumeLines)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("hr_resume_line_employee_id_fkey");

            entity.HasOne(d => d.LineType).WithMany(p => p.HrResumeLines)
                .HasForeignKey(d => d.LineTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_line_type_id_fkey");

            entity.HasOne(d => d.Survey).WithMany(p => p.HrResumeLines)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_survey_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrResumeLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_write_uid_fkey");
        });

        modelBuilder.Entity<HrResumeLineType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_resume_line_type_pkey");

            entity.ToTable("hr_resume_line_type", tb => tb.HasComment("Type of a resume line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrResumeLineTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrResumeLineTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_skill_pkey");

            entity.ToTable("hr_skill", tb => tb.HasComment("Skill"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SkillTypeId)
                .HasComment("Skill Type")
                .HasColumnName("skill_type_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrSkillCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_create_uid_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrSkills)
                .HasForeignKey(d => d.SkillTypeId)
                .HasConstraintName("hr_skill_skill_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrSkillWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_write_uid_fkey");
        });

        modelBuilder.Entity<HrSkillLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_skill_level_pkey");

            entity.ToTable("hr_skill_level", tb => tb.HasComment("Skill Level"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultLevel)
                .HasComment("Default Level")
                .HasColumnName("default_level");
            entity.Property(e => e.LevelProgress)
                .HasComment("Progress")
                .HasColumnName("level_progress");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.SkillTypeId)
                .HasComment("Skill Type")
                .HasColumnName("skill_type_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrSkillLevelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_level_create_uid_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrSkillLevels)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_skill_level_skill_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrSkillLevelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_level_write_uid_fkey");
        });

        modelBuilder.Entity<HrSkillType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_skill_type_pkey");

            entity.ToTable("hr_skill_type", tb => tb.HasComment("Skill Type"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrSkillTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrSkillTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrWorkLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_work_location_pkey");

            entity.ToTable("hr_work_location", tb => tb.HasComment("Work Location"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AddressId)
                .HasComment("Work Address")
                .HasColumnName("address_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationNumber)
                .HasComment("Location Number")
                .HasColumnType("character varying")
                .HasColumnName("location_number");
            entity.Property(e => e.Name)
                .HasComment("Work Location")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Address).WithMany(p => p.HrWorkLocations)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_work_location_address_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.HrWorkLocations)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_work_location_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.HrWorkLocationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_work_location_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.HrWorkLocationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_work_location_write_uid_fkey");
        });

        modelBuilder.Entity<IapAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("iap_account_pkey");

            entity.ToTable("iap_account", tb => tb.HasComment("IAP Account"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountToken)
                .HasComment("Account Token")
                .HasColumnType("character varying")
                .HasColumnName("account_token");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ServiceName)
                .HasComment("Service Name")
                .HasColumnType("character varying")
                .HasColumnName("service_name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IapAccountCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("iap_account_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IapAccountWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("iap_account_write_uid_fkey");

            entity.HasMany(d => d.ResCompanies).WithMany(p => p.IapAccounts)
                .UsingEntity<Dictionary<string, object>>(
                    "IapAccountResCompanyRel",
                    r => r.HasOne<ResCompany>().WithMany()
                        .HasForeignKey("ResCompanyId")
                        .HasConstraintName("iap_account_res_company_rel_res_company_id_fkey"),
                    l => l.HasOne<IapAccount>().WithMany()
                        .HasForeignKey("IapAccountId")
                        .HasConstraintName("iap_account_res_company_rel_iap_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("IapAccountId", "ResCompanyId").HasName("iap_account_res_company_rel_pkey");
                        j.ToTable("iap_account_res_company_rel", tb => tb.HasComment("RELATION BETWEEN iap_account AND res_company"));
                        j.HasIndex(new[] { "ResCompanyId", "IapAccountId" }, "iap_account_res_company_rel_res_company_id_iap_account_id_idx");
                        j.IndexerProperty<int>("IapAccountId").HasColumnName("iap_account_id");
                        j.IndexerProperty<int>("ResCompanyId").HasColumnName("res_company_id");
                    });
        });

        modelBuilder.Entity<ImLivechatChannel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("im_livechat_channel_pkey");

            entity.ToTable("im_livechat_channel", tb => tb.HasComment("Livechat Channel"));

            entity.HasIndex(e => e.IsPublished, "im_livechat_channel_is_published_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ButtonBackgroundColor)
                .HasComment("Button Background Color")
                .HasColumnType("character varying")
                .HasColumnName("button_background_color");
            entity.Property(e => e.ButtonText)
                .HasComment("Text of the Button")
                .HasColumnType("character varying")
                .HasColumnName("button_text");
            entity.Property(e => e.ButtonTextColor)
                .HasComment("Button Text Color")
                .HasColumnType("character varying")
                .HasColumnName("button_text_color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultMessage)
                .HasComment("Welcome Message")
                .HasColumnType("character varying")
                .HasColumnName("default_message");
            entity.Property(e => e.HeaderBackgroundColor)
                .HasComment("Header Background Color")
                .HasColumnType("character varying")
                .HasColumnName("header_background_color");
            entity.Property(e => e.InputPlaceholder)
                .HasComment("Chat Input Placeholder")
                .HasColumnType("character varying")
                .HasColumnName("input_placeholder");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Name)
                .HasComment("Channel Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TitleColor)
                .HasComment("Title Color")
                .HasColumnType("character varying")
                .HasColumnName("title_color");
            entity.Property(e => e.WebsiteDescription)
                .HasComment("Website description")
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ImLivechatChannelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("im_livechat_channel_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ImLivechatChannelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("im_livechat_channel_write_uid_fkey");

            entity.HasMany(d => d.Users).WithMany(p => p.Channels)
                .UsingEntity<Dictionary<string, object>>(
                    "ImLivechatChannelImUser",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("im_livechat_channel_im_user_user_id_fkey"),
                    l => l.HasOne<ImLivechatChannel>().WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("im_livechat_channel_im_user_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("ChannelId", "UserId").HasName("im_livechat_channel_im_user_pkey");
                        j.ToTable("im_livechat_channel_im_user", tb => tb.HasComment("RELATION BETWEEN im_livechat_channel AND res_users"));
                        j.HasIndex(new[] { "UserId", "ChannelId" }, "im_livechat_channel_im_user_user_id_channel_id_idx");
                        j.IndexerProperty<int>("ChannelId").HasColumnName("channel_id");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                    });
        });

        modelBuilder.Entity<ImLivechatChannelRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("im_livechat_channel_rule_pkey");

            entity.ToTable("im_livechat_channel_rule", tb => tb.HasComment("Livechat Channel Rules"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasComment("Live Chat Button")
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.AutoPopupTimer)
                .HasComment("Open automatically timer")
                .HasColumnName("auto_popup_timer");
            entity.Property(e => e.ChannelId)
                .HasComment("Channel")
                .HasColumnName("channel_id");
            entity.Property(e => e.ChatbotOnlyIfNoOperator)
                .HasComment("Enabled only if no operator")
                .HasColumnName("chatbot_only_if_no_operator");
            entity.Property(e => e.ChatbotScriptId)
                .HasComment("Chatbot")
                .HasColumnName("chatbot_script_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.RegexUrl)
                .HasComment("URL Regex")
                .HasColumnType("character varying")
                .HasColumnName("regex_url");
            entity.Property(e => e.Sequence)
                .HasComment("Matching order")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.ImLivechatChannelRules)
                .HasForeignKey(d => d.ChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("im_livechat_channel_rule_channel_id_fkey");

            entity.HasOne(d => d.ChatbotScript).WithMany(p => p.ImLivechatChannelRules)
                .HasForeignKey(d => d.ChatbotScriptId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("im_livechat_channel_rule_chatbot_script_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ImLivechatChannelRuleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("im_livechat_channel_rule_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ImLivechatChannelRuleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("im_livechat_channel_rule_write_uid_fkey");

            entity.HasMany(d => d.Countries).WithMany(p => p.Channels)
                .UsingEntity<Dictionary<string, object>>(
                    "ImLivechatChannelCountryRel",
                    r => r.HasOne<ResCountry>().WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("im_livechat_channel_country_rel_country_id_fkey"),
                    l => l.HasOne<ImLivechatChannelRule>().WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("im_livechat_channel_country_rel_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("ChannelId", "CountryId").HasName("im_livechat_channel_country_rel_pkey");
                        j.ToTable("im_livechat_channel_country_rel", tb => tb.HasComment("RELATION BETWEEN im_livechat_channel_rule AND res_country"));
                        j.HasIndex(new[] { "CountryId", "ChannelId" }, "im_livechat_channel_country_rel_country_id_channel_id_idx");
                        j.IndexerProperty<int>("ChannelId").HasColumnName("channel_id");
                        j.IndexerProperty<int>("CountryId").HasColumnName("country_id");
                    });
        });

        modelBuilder.Entity<ImLivechatReportChannel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("im_livechat_report_channel");

            entity.Property(e => e.ChannelId).HasColumnName("channel_id");
            entity.Property(e => e.ChannelName)
                .HasColumnType("character varying")
                .HasColumnName("channel_name");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.DayNumber).HasColumnName("day_number");
            entity.Property(e => e.DaysOfActivity).HasColumnName("days_of_activity");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsAnonymous).HasColumnName("is_anonymous");
            entity.Property(e => e.IsHappy).HasColumnName("is_happy");
            entity.Property(e => e.IsUnrated).HasColumnName("is_unrated");
            entity.Property(e => e.IsWithoutAnswer).HasColumnName("is_without_answer");
            entity.Property(e => e.LivechatChannelId).HasColumnName("livechat_channel_id");
            entity.Property(e => e.NbrMessage).HasColumnName("nbr_message");
            entity.Property(e => e.NbrSpeaker).HasColumnName("nbr_speaker");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.RatingText).HasColumnName("rating_text");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StartDateHour).HasColumnName("start_date_hour");
            entity.Property(e => e.StartHour).HasColumnName("start_hour");
            entity.Property(e => e.TechnicalName).HasColumnName("technical_name");
            entity.Property(e => e.TimeToAnswer).HasColumnName("time_to_answer");
            entity.Property(e => e.Uuid)
                .HasMaxLength(50)
                .HasColumnName("uuid");
        });

        modelBuilder.Entity<ImLivechatReportOperator>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("im_livechat_report_operator");

            entity.Property(e => e.ChannelId).HasColumnName("channel_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LivechatChannelId).HasColumnName("livechat_channel_id");
            entity.Property(e => e.NbrChannel).HasColumnName("nbr_channel");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.TimeToAnswer).HasColumnName("time_to_answer");
        });

        modelBuilder.Entity<IrActClient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_client_pkey");

            entity.ToTable("ir_act_client");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ir_actions_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType)
                .HasColumnType("character varying")
                .HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes)
                .HasColumnType("character varying")
                .HasColumnName("binding_view_types");
            entity.Property(e => e.Context)
                .HasComment("Context Value")
                .HasColumnType("character varying")
                .HasColumnName("context");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParamsStore)
                .HasComment("Params storage")
                .HasColumnName("params_store");
            entity.Property(e => e.ResModel)
                .HasComment("Destination Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.Tag)
                .HasComment("Client action tag")
                .HasColumnType("character varying")
                .HasColumnName("tag");
            entity.Property(e => e.Target)
                .HasComment("Target Window")
                .HasColumnType("character varying")
                .HasColumnName("target");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActClients)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_client_binding_model_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActClientCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_client_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActClientWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_client_write_uid_fkey");
        });

        modelBuilder.Entity<IrActReportXml>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_report_xml_pkey");

            entity.ToTable("ir_act_report_xml");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ir_actions_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.Attachment)
                .HasComment("Save as Attachment Prefix")
                .HasColumnType("character varying")
                .HasColumnName("attachment");
            entity.Property(e => e.AttachmentUse)
                .HasComment("Reload from Attachment")
                .HasColumnName("attachment_use");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType)
                .HasColumnType("character varying")
                .HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes)
                .HasColumnType("character varying")
                .HasColumnName("binding_view_types");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Model)
                .HasComment("Model Name")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.Multi)
                .HasComment("On Multiple Doc.")
                .HasColumnName("multi");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PaperformatId)
                .HasComment("Paper Format")
                .HasColumnName("paperformat_id");
            entity.Property(e => e.PrintReportName)
                .HasComment("Printed Report Name")
                .HasColumnType("jsonb")
                .HasColumnName("print_report_name");
            entity.Property(e => e.ReportFile)
                .HasComment("Report File")
                .HasColumnType("character varying")
                .HasColumnName("report_file");
            entity.Property(e => e.ReportName)
                .HasComment("Template Name")
                .HasColumnType("character varying")
                .HasColumnName("report_name");
            entity.Property(e => e.ReportType)
                .HasComment("Report Type")
                .HasColumnType("character varying")
                .HasColumnName("report_type");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActReportXmls)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_report_xml_binding_model_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActReportXmlCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_report_xml_create_uid_fkey");

            entity.HasOne(d => d.Paperformat).WithMany(p => p.IrActReportXmls)
                .HasForeignKey(d => d.PaperformatId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_report_xml_paperformat_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActReportXmlWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_report_xml_write_uid_fkey");

            entity.HasMany(d => d.Gids).WithMany(p => p.Uids)
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsReportRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_report_rel_gid_fkey"),
                    l => l.HasOne<IrActReportXml>().WithMany()
                        .HasForeignKey("Uid")
                        .HasConstraintName("res_groups_report_rel_uid_fkey"),
                    j =>
                    {
                        j.HasKey("Uid", "Gid").HasName("res_groups_report_rel_pkey");
                        j.ToTable("res_groups_report_rel", tb => tb.HasComment("RELATION BETWEEN ir_act_report_xml AND res_groups"));
                        j.HasIndex(new[] { "Gid", "Uid" }, "res_groups_report_rel_gid_uid_idx");
                        j.IndexerProperty<int>("Uid").HasColumnName("uid");
                        j.IndexerProperty<int>("Gid").HasColumnName("gid");
                    });
        });

        modelBuilder.Entity<IrActServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_server_pkey");

            entity.ToTable("ir_act_server");

            entity.HasIndex(e => e.ModelId, "ir_act_server_model_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ir_actions_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.ActivityDateDeadlineRange)
                .HasComment("Due Date In")
                .HasColumnName("activity_date_deadline_range");
            entity.Property(e => e.ActivityDateDeadlineRangeType)
                .HasComment("Due type")
                .HasColumnType("character varying")
                .HasColumnName("activity_date_deadline_range_type");
            entity.Property(e => e.ActivityNote)
                .HasComment("Note")
                .HasColumnName("activity_note");
            entity.Property(e => e.ActivitySummary)
                .HasComment("Summary")
                .HasColumnType("character varying")
                .HasColumnName("activity_summary");
            entity.Property(e => e.ActivityTypeId)
                .HasComment("Activity")
                .HasColumnName("activity_type_id");
            entity.Property(e => e.ActivityUserFieldName)
                .HasComment("User field name")
                .HasColumnType("character varying")
                .HasColumnName("activity_user_field_name");
            entity.Property(e => e.ActivityUserId)
                .HasComment("Responsible")
                .HasColumnName("activity_user_id");
            entity.Property(e => e.ActivityUserType)
                .HasComment("Activity User Type")
                .HasColumnType("character varying")
                .HasColumnName("activity_user_type");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType)
                .HasColumnType("character varying")
                .HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes)
                .HasColumnType("character varying")
                .HasColumnName("binding_view_types");
            entity.Property(e => e.Code)
                .HasComment("Python Code")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.CrudModelId)
                .HasComment("Target Model")
                .HasColumnName("crud_model_id");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.LinkFieldId)
                .HasComment("Link Field")
                .HasColumnName("link_field_id");
            entity.Property(e => e.MailPostAutofollow)
                .HasComment("Subscribe Recipients")
                .HasColumnName("mail_post_autofollow");
            entity.Property(e => e.MailPostMethod)
                .HasComment("Send as")
                .HasColumnType("character varying")
                .HasColumnName("mail_post_method");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.ModelName)
                .HasComment("Model Name")
                .HasColumnType("character varying")
                .HasColumnName("model_name");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SmsMethod)
                .HasComment("Send as (SMS)")
                .HasColumnType("character varying")
                .HasColumnName("sms_method");
            entity.Property(e => e.SmsTemplateId)
                .HasComment("SMS Template")
                .HasColumnName("sms_template_id");
            entity.Property(e => e.State)
                .HasComment("Action To Do")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TemplateId)
                .HasComment("Email Template")
                .HasColumnName("template_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Usage)
                .HasComment("Usage")
                .HasColumnType("character varying")
                .HasColumnName("usage");
            entity.Property(e => e.WebsitePath)
                .HasComment("Website Path")
                .HasColumnType("character varying")
                .HasColumnName("website_path");
            entity.Property(e => e.WebsitePublished)
                .HasComment("Available on the Website")
                .HasColumnName("website_published");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.ActivityType).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.ActivityTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_act_server_activity_type_id_fkey");

            entity.HasOne(d => d.ActivityUser).WithMany(p => p.IrActServerActivityUsers)
                .HasForeignKey(d => d.ActivityUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_activity_user_id_fkey");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActServerBindingModels)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_server_binding_model_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActServerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_create_uid_fkey");

            entity.HasOne(d => d.CrudModel).WithMany(p => p.IrActServerCrudModels)
                .HasForeignKey(d => d.CrudModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_crud_model_id_fkey");

            entity.HasOne(d => d.LinkField).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.LinkFieldId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_link_field_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.IrActServerModels)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("ir_act_server_model_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_sms_template_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActServerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_write_uid_fkey");

            entity.HasMany(d => d.Actions).WithMany(p => p.Servers)
                .UsingEntity<Dictionary<string, object>>(
                    "RelServerAction",
                    r => r.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ActionId")
                        .HasConstraintName("rel_server_actions_action_id_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ServerId")
                        .HasConstraintName("rel_server_actions_server_id_fkey"),
                    j =>
                    {
                        j.HasKey("ServerId", "ActionId").HasName("rel_server_actions_pkey");
                        j.ToTable("rel_server_actions", tb => tb.HasComment("RELATION BETWEEN ir_act_server AND ir_act_server"));
                        j.HasIndex(new[] { "ActionId", "ServerId" }, "rel_server_actions_action_id_server_id_idx");
                        j.IndexerProperty<int>("ServerId").HasColumnName("server_id");
                        j.IndexerProperty<int>("ActionId").HasColumnName("action_id");
                    });

            entity.HasMany(d => d.Gids).WithMany(p => p.Acts)
                .UsingEntity<Dictionary<string, object>>(
                    "IrActServerGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("ir_act_server_group_rel_gid_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ActId")
                        .HasConstraintName("ir_act_server_group_rel_act_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActId", "Gid").HasName("ir_act_server_group_rel_pkey");
                        j.ToTable("ir_act_server_group_rel", tb => tb.HasComment("RELATION BETWEEN ir_act_server AND res_groups"));
                        j.HasIndex(new[] { "Gid", "ActId" }, "ir_act_server_group_rel_gid_act_id_idx");
                        j.IndexerProperty<int>("ActId").HasColumnName("act_id");
                        j.IndexerProperty<int>("Gid").HasColumnName("gid");
                    });

            entity.HasMany(d => d.ResPartners).WithMany(p => p.IrActServers)
                .UsingEntity<Dictionary<string, object>>(
                    "IrActServerResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("ir_act_server_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("IrActServerId")
                        .HasConstraintName("ir_act_server_res_partner_rel_ir_act_server_id_fkey"),
                    j =>
                    {
                        j.HasKey("IrActServerId", "ResPartnerId").HasName("ir_act_server_res_partner_rel_pkey");
                        j.ToTable("ir_act_server_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN ir_act_server AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "IrActServerId" }, "ir_act_server_res_partner_rel_res_partner_id_ir_act_server__idx");
                        j.IndexerProperty<int>("IrActServerId").HasColumnName("ir_act_server_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });

            entity.HasMany(d => d.Servers).WithMany(p => p.Actions)
                .UsingEntity<Dictionary<string, object>>(
                    "RelServerAction",
                    r => r.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ServerId")
                        .HasConstraintName("rel_server_actions_server_id_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ActionId")
                        .HasConstraintName("rel_server_actions_action_id_fkey"),
                    j =>
                    {
                        j.HasKey("ServerId", "ActionId").HasName("rel_server_actions_pkey");
                        j.ToTable("rel_server_actions", tb => tb.HasComment("RELATION BETWEEN ir_act_server AND ir_act_server"));
                        j.HasIndex(new[] { "ActionId", "ServerId" }, "rel_server_actions_action_id_server_id_idx");
                        j.IndexerProperty<int>("ServerId").HasColumnName("server_id");
                        j.IndexerProperty<int>("ActionId").HasColumnName("action_id");
                    });
        });

        modelBuilder.Entity<IrActUrl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_url_pkey");

            entity.ToTable("ir_act_url");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ir_actions_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType)
                .HasColumnType("character varying")
                .HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes)
                .HasColumnType("character varying")
                .HasColumnName("binding_view_types");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Target)
                .HasComment("Action Target")
                .HasColumnType("character varying")
                .HasColumnName("target");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Url)
                .HasComment("Action URL")
                .HasColumnName("url");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActUrls)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_url_binding_model_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActUrlCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_url_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActUrlWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_url_write_uid_fkey");
        });

        modelBuilder.Entity<IrActWindow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_window_pkey");

            entity.ToTable("ir_act_window");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ir_actions_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType)
                .HasColumnType("character varying")
                .HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes)
                .HasColumnType("character varying")
                .HasColumnName("binding_view_types");
            entity.Property(e => e.Context)
                .HasComment("Context Value")
                .HasColumnType("character varying")
                .HasColumnName("context");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.Domain)
                .HasComment("Domain Value")
                .HasColumnType("character varying")
                .HasColumnName("domain");
            entity.Property(e => e.Filter)
                .HasComment("Filter")
                .HasColumnName("filter");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Limit)
                .HasComment("Limit")
                .HasColumnName("limit");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ResId)
                .HasComment("Record ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Destination Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.SearchViewId)
                .HasComment("Search View Ref.")
                .HasColumnName("search_view_id");
            entity.Property(e => e.Target)
                .HasComment("Target Window")
                .HasColumnType("character varying")
                .HasColumnName("target");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Usage)
                .HasComment("Action Usage")
                .HasColumnType("character varying")
                .HasColumnName("usage");
            entity.Property(e => e.ViewId)
                .HasComment("View Ref.")
                .HasColumnName("view_id");
            entity.Property(e => e.ViewMode)
                .HasComment("View Mode")
                .HasColumnType("character varying")
                .HasColumnName("view_mode");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActWindows)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_window_binding_model_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActWindowCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_create_uid_fkey");

            entity.HasOne(d => d.SearchView).WithMany(p => p.IrActWindowSearchViews)
                .HasForeignKey(d => d.SearchViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_search_view_id_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.IrActWindowViews)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActWindowWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_write_uid_fkey");

            entity.HasMany(d => d.Gids).WithMany(p => p.ActsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "IrActWindowGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("ir_act_window_group_rel_gid_fkey"),
                    l => l.HasOne<IrActWindow>().WithMany()
                        .HasForeignKey("ActId")
                        .HasConstraintName("ir_act_window_group_rel_act_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActId", "Gid").HasName("ir_act_window_group_rel_pkey");
                        j.ToTable("ir_act_window_group_rel", tb => tb.HasComment("RELATION BETWEEN ir_act_window AND res_groups"));
                        j.HasIndex(new[] { "Gid", "ActId" }, "ir_act_window_group_rel_gid_act_id_idx");
                        j.IndexerProperty<int>("ActId").HasColumnName("act_id");
                        j.IndexerProperty<int>("Gid").HasColumnName("gid");
                    });
        });

        modelBuilder.Entity<IrActWindowView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_window_view_pkey");

            entity.ToTable("ir_act_window_view", tb => tb.HasComment("Action Window View"));

            entity.HasIndex(e => new { e.ActWindowId, e.ViewMode }, "act_window_view_unique_mode_per_action").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActWindowId)
                .HasComment("Action")
                .HasColumnName("act_window_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Multi)
                .HasComment("On Multiple Doc.")
                .HasColumnName("multi");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ViewId)
                .HasComment("View")
                .HasColumnName("view_id");
            entity.Property(e => e.ViewMode)
                .HasComment("View Type")
                .HasColumnType("character varying")
                .HasColumnName("view_mode");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ActWindow).WithMany(p => p.IrActWindowViews)
                .HasForeignKey(d => d.ActWindowId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_window_view_act_window_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActWindowViewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.IrActWindowViewsNavigation)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_view_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActWindowViewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_write_uid_fkey");
        });

        modelBuilder.Entity<IrAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_actions_pkey");

            entity.ToTable("ir_actions");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BindingModelId)
                .HasComment("Binding Model")
                .HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType)
                .HasComment("Binding Type")
                .HasColumnType("character varying")
                .HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes)
                .HasComment("Binding View Types")
                .HasColumnType("character varying")
                .HasColumnName("binding_view_types");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasComment("Action Description")
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Name)
                .HasComment("Action Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasComment("Action Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActions)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_actions_binding_model_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_write_uid_fkey");
        });

        modelBuilder.Entity<IrActionsTodo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_actions_todo_pkey");

            entity.ToTable("ir_actions_todo", tb => tb.HasComment("Configuration Wizards"));

            entity.HasIndex(e => e.ActionId, "ir_actions_todo_action_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionId)
                .HasComment("Action")
                .HasColumnName("action_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrActionsTodoCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_todo_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrActionsTodoWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_todo_write_uid_fkey");
        });

        modelBuilder.Entity<IrAsset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_asset_pkey");

            entity.ToTable("ir_asset", tb => tb.HasComment("Asset"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("active")
                .HasColumnName("active");
            entity.Property(e => e.Bundle)
                .HasComment("Bundle name")
                .HasColumnType("character varying")
                .HasColumnName("bundle");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Directive)
                .HasComment("Directive")
                .HasColumnType("character varying")
                .HasColumnName("directive");
            entity.Property(e => e.Key)
                .HasComment("Key")
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Path)
                .HasComment("Path (or glob pattern)")
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Target)
                .HasComment("Target")
                .HasColumnType("character varying")
                .HasColumnName("target");
            entity.Property(e => e.ThemeTemplateId)
                .HasComment("Theme Template")
                .HasColumnName("theme_template_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrAssetCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_asset_create_uid_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.IrAssets)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_asset_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.IrAssets)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_asset_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrAssetWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_asset_write_uid_fkey");
        });

        modelBuilder.Entity<IrAttachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_attachment_pkey");

            entity.ToTable("ir_attachment", tb => tb.HasComment("Attachment"));

            entity.HasIndex(e => e.Checksum, "ir_attachment_checksum_index");

            entity.HasIndex(e => new { e.ResModel, e.ResId }, "ir_attachment_res_idx");

            entity.HasIndex(e => e.StoreFname, "ir_attachment_store_fname_index");

            entity.HasIndex(e => e.Url, "ir_attachment_url_index").HasFilter("(url IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Access Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Checksum)
                .HasMaxLength(40)
                .HasComment("Checksum/SHA1")
                .HasColumnName("checksum");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DbDatas)
                .HasComment("Database Data")
                .HasColumnName("db_datas");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.FileSize)
                .HasComment("File Size")
                .HasColumnName("file_size");
            entity.Property(e => e.IndexContent)
                .HasComment("Indexed Content")
                .HasColumnName("index_content");
            entity.Property(e => e.Key)
                .HasComment("Key")
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Mimetype)
                .HasComment("Mime Type")
                .HasColumnType("character varying")
                .HasColumnName("mimetype");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OriginalId)
                .HasComment("Original (unoptimized, unresized) attachment")
                .HasColumnName("original_id");
            entity.Property(e => e.Public)
                .HasComment("Is public document")
                .HasColumnName("public");
            entity.Property(e => e.ResField)
                .HasComment("Resource Field")
                .HasColumnType("character varying")
                .HasColumnName("res_field");
            entity.Property(e => e.ResId)
                .HasComment("Resource ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Resource Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.StoreFname)
                .HasComment("Stored Filename")
                .HasColumnType("character varying")
                .HasColumnName("store_fname");
            entity.Property(e => e.ThemeTemplateId)
                .HasComment("Theme Template")
                .HasColumnName("theme_template_id");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Url)
                .HasMaxLength(1024)
                .HasComment("Url")
                .HasColumnName("url");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.IrAttachments)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrAttachmentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_create_uid_fkey");

            entity.HasOne(d => d.Original).WithMany(p => p.InverseOriginal)
                .HasForeignKey(d => d.OriginalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_original_id_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.IrAttachments)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.IrAttachments)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrAttachmentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_write_uid_fkey");
        });

        modelBuilder.Entity<IrConfigParameter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_config_parameter_pkey");

            entity.ToTable("ir_config_parameter", tb => tb.HasComment("System Parameter"));

            entity.HasIndex(e => e.Key, "ir_config_parameter_key_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Key)
                .HasComment("Key")
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrConfigParameterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_config_parameter_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrConfigParameterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_config_parameter_write_uid_fkey");
        });

        modelBuilder.Entity<IrCron>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_cron_pkey");

            entity.ToTable("ir_cron", tb => tb.HasComment("Scheduled Actions"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CronName)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("cron_name");
            entity.Property(e => e.Doall)
                .HasComment("Repeat Missed")
                .HasColumnName("doall");
            entity.Property(e => e.IntervalNumber)
                .HasComment("Interval Number")
                .HasColumnName("interval_number");
            entity.Property(e => e.IntervalType)
                .HasComment("Interval Unit")
                .HasColumnType("character varying")
                .HasColumnName("interval_type");
            entity.Property(e => e.IrActionsServerId)
                .HasComment("Server action")
                .HasColumnName("ir_actions_server_id");
            entity.Property(e => e.Lastcall)
                .HasComment("Last Execution Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("lastcall");
            entity.Property(e => e.Nextcall)
                .HasComment("Next Execution Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("nextcall");
            entity.Property(e => e.Numbercall)
                .HasComment("Number of Calls")
                .HasColumnName("numbercall");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnName("priority");
            entity.Property(e => e.UserId)
                .HasComment("Scheduler User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrCronCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_create_uid_fkey");

            entity.HasOne(d => d.IrActionsServer).WithMany(p => p.IrCrons)
                .HasForeignKey(d => d.IrActionsServerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_cron_ir_actions_server_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.IrCronUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_cron_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrCronWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_write_uid_fkey");
        });

        modelBuilder.Entity<IrCronTrigger>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_cron_trigger_pkey");

            entity.ToTable("ir_cron_trigger", tb => tb.HasComment("Triggered actions"));

            entity.HasIndex(e => e.CronId, "ir_cron_trigger_cron_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CallAt)
                .HasComment("Call At")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("call_at");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CronId)
                .HasComment("Cron")
                .HasColumnName("cron_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrCronTriggerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_trigger_create_uid_fkey");

            entity.HasOne(d => d.Cron).WithMany(p => p.IrCronTriggers)
                .HasForeignKey(d => d.CronId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_trigger_cron_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrCronTriggerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_trigger_write_uid_fkey");
        });

        modelBuilder.Entity<IrDefault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_default_pkey");

            entity.ToTable("ir_default", tb => tb.HasComment("Default Values"));

            entity.HasIndex(e => e.CompanyId, "ir_default_company_id_index");

            entity.HasIndex(e => e.FieldId, "ir_default_field_id_index");

            entity.HasIndex(e => e.UserId, "ir_default_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.Condition)
                .HasComment("Condition")
                .HasColumnType("character varying")
                .HasColumnName("condition");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FieldId)
                .HasComment("Field")
                .HasColumnName("field_id");
            entity.Property(e => e.JsonValue)
                .HasComment("Default Value (JSON format)")
                .HasColumnType("character varying")
                .HasColumnName("json_value");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.IrDefaults)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_default_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrDefaultCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_default_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.IrDefaults)
                .HasForeignKey(d => d.FieldId)
                .HasConstraintName("ir_default_field_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.IrDefaultUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_default_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrDefaultWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_default_write_uid_fkey");
        });

        modelBuilder.Entity<IrDemo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_demo_pkey");

            entity.ToTable("ir_demo", tb => tb.HasComment("Demo"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrDemoCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrDemoWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_write_uid_fkey");
        });

        modelBuilder.Entity<IrDemoFailure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_demo_failure_pkey");

            entity.ToTable("ir_demo_failure", tb => tb.HasComment("Demo failure"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Error)
                .HasComment("Error")
                .HasColumnType("character varying")
                .HasColumnName("error");
            entity.Property(e => e.ModuleId)
                .HasComment("Module")
                .HasColumnName("module_id");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrDemoFailureCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.IrDemoFailures)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("ir_demo_failure_module_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.IrDemoFailures)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrDemoFailureWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_write_uid_fkey");
        });

        modelBuilder.Entity<IrDemoFailureWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_demo_failure_wizard_pkey");

            entity.ToTable("ir_demo_failure_wizard", tb => tb.HasComment("Demo Failure wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrDemoFailureWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrDemoFailureWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<IrExport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_exports_pkey");

            entity.ToTable("ir_exports", tb => tb.HasComment("Exports"));

            entity.HasIndex(e => e.Resource, "ir_exports_resource_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Export Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Resource)
                .HasComment("Resource")
                .HasColumnType("character varying")
                .HasColumnName("resource");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrExportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrExportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_write_uid_fkey");
        });

        modelBuilder.Entity<IrExportsLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_exports_line_pkey");

            entity.ToTable("ir_exports_line", tb => tb.HasComment("Exports Line"));

            entity.HasIndex(e => e.ExportId, "ir_exports_line_export_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ExportId)
                .HasComment("Export")
                .HasColumnName("export_id");
            entity.Property(e => e.Name)
                .HasComment("Field Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrExportsLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_line_create_uid_fkey");

            entity.HasOne(d => d.Export).WithMany(p => p.IrExportsLines)
                .HasForeignKey(d => d.ExportId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_exports_line_export_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrExportsLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_line_write_uid_fkey");
        });

        modelBuilder.Entity<IrFilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_filters_pkey");

            entity.ToTable("ir_filters", tb => tb.HasComment("Filters"));

            entity.HasIndex(e => new { e.ModelId, e.UserId, e.ActionId, e.Name }, "ir_filters_name_model_uid_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionId)
                .HasComment("Action")
                .HasColumnName("action_id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Context)
                .HasComment("Context")
                .HasColumnName("context");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Domain)
                .HasComment("Domain")
                .HasColumnName("domain");
            entity.Property(e => e.IsDefault)
                .HasComment("Default Filter")
                .HasColumnName("is_default");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasComment("Filter Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sort)
                .HasComment("Sort")
                .HasColumnName("sort");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrFilterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_filters_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.IrFilterUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_filters_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrFilterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_filters_write_uid_fkey");
        });

        modelBuilder.Entity<IrLogging>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_logging_pkey");

            entity.ToTable("ir_logging", tb => tb.HasComment("Logging"));

            entity.HasIndex(e => e.Dbname, "ir_logging_dbname_index");

            entity.HasIndex(e => e.Level, "ir_logging_level_index");

            entity.HasIndex(e => e.Type, "ir_logging_type_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Dbname)
                .HasComment("Database Name")
                .HasColumnType("character varying")
                .HasColumnName("dbname");
            entity.Property(e => e.Func)
                .HasComment("Function")
                .HasColumnType("character varying")
                .HasColumnName("func");
            entity.Property(e => e.Level)
                .HasComment("Level")
                .HasColumnType("character varying")
                .HasColumnName("level");
            entity.Property(e => e.Line)
                .HasComment("Line")
                .HasColumnType("character varying")
                .HasColumnName("line");
            entity.Property(e => e.Message)
                .HasComment("Message")
                .HasColumnName("message");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Path)
                .HasComment("Path")
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
        });

        modelBuilder.Entity<IrMailServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_mail_server_pkey");

            entity.ToTable("ir_mail_server", tb => tb.HasComment("Mail Server"));

            entity.HasIndex(e => e.Name, "ir_mail_server_name_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FromFilter)
                .HasComment("FROM Filtering")
                .HasColumnType("character varying")
                .HasColumnName("from_filter");
            entity.Property(e => e.GoogleGmailAccessToken)
                .HasComment("Access Token")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_access_token");
            entity.Property(e => e.GoogleGmailAccessTokenExpiration)
                .HasComment("Access Token Expiration Timestamp")
                .HasColumnName("google_gmail_access_token_expiration");
            entity.Property(e => e.GoogleGmailAuthorizationCode)
                .HasComment("Authorization Code")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_authorization_code");
            entity.Property(e => e.GoogleGmailRefreshToken)
                .HasComment("Refresh Token")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_refresh_token");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Priority")
                .HasColumnName("sequence");
            entity.Property(e => e.SmtpAuthentication)
                .HasComment("Authenticate with")
                .HasColumnType("character varying")
                .HasColumnName("smtp_authentication");
            entity.Property(e => e.SmtpDebug)
                .HasComment("Debugging")
                .HasColumnName("smtp_debug");
            entity.Property(e => e.SmtpEncryption)
                .HasComment("Connection Encryption")
                .HasColumnType("character varying")
                .HasColumnName("smtp_encryption");
            entity.Property(e => e.SmtpHost)
                .HasComment("SMTP Server")
                .HasColumnType("character varying")
                .HasColumnName("smtp_host");
            entity.Property(e => e.SmtpPass)
                .HasComment("Password")
                .HasColumnType("character varying")
                .HasColumnName("smtp_pass");
            entity.Property(e => e.SmtpPort)
                .HasComment("SMTP Port")
                .HasColumnName("smtp_port");
            entity.Property(e => e.SmtpSslCertificate)
                .HasComment("SSL Certificate")
                .HasColumnName("smtp_ssl_certificate");
            entity.Property(e => e.SmtpSslPrivateKey)
                .HasComment("SSL Private Key")
                .HasColumnName("smtp_ssl_private_key");
            entity.Property(e => e.SmtpUser)
                .HasComment("Username")
                .HasColumnType("character varying")
                .HasColumnName("smtp_user");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrMailServerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_mail_server_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrMailServerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_mail_server_write_uid_fkey");
        });

        modelBuilder.Entity<IrModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_pkey");

            entity.ToTable("ir_model", tb => tb.HasComment("Models"));

            entity.HasIndex(e => e.Model, "ir_model_obj_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Info)
                .HasComment("Information")
                .HasColumnName("info");
            entity.Property(e => e.IsMailActivity)
                .HasComment("Has Mail Activity")
                .HasColumnName("is_mail_activity");
            entity.Property(e => e.IsMailBlacklist)
                .HasComment("Has Mail Blacklist")
                .HasColumnName("is_mail_blacklist");
            entity.Property(e => e.IsMailThread)
                .HasComment("Has Mail Thread")
                .HasColumnName("is_mail_thread");
            entity.Property(e => e.Model)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.Name)
                .HasComment("Model Description")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Order)
                .HasComment("Order")
                .HasColumnType("character varying")
                .HasColumnName("order");
            entity.Property(e => e.State)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.Transient)
                .HasComment("Transient Model")
                .HasColumnName("transient");
            entity.Property(e => e.WebsiteFormAccess)
                .HasComment("Allowed to use in forms")
                .HasColumnName("website_form_access");
            entity.Property(e => e.WebsiteFormDefaultFieldId)
                .HasComment("Field for custom form data")
                .HasColumnName("website_form_default_field_id");
            entity.Property(e => e.WebsiteFormKey)
                .HasComment("Website Form Key")
                .HasColumnType("character varying")
                .HasColumnName("website_form_key");
            entity.Property(e => e.WebsiteFormLabel)
                .HasComment("Label for form action")
                .HasColumnType("character varying")
                .HasColumnName("website_form_label");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_create_uid_fkey");

            entity.HasOne(d => d.WebsiteFormDefaultField).WithMany(p => p.IrModels)
                .HasForeignKey(d => d.WebsiteFormDefaultFieldId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_website_form_default_field_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelAccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_access_pkey");

            entity.ToTable("ir_model_access", tb => tb.HasComment("Model Access"));

            entity.HasIndex(e => e.GroupId, "ir_model_access_group_id_index");

            entity.HasIndex(e => e.ModelId, "ir_model_access_model_id_index");

            entity.HasIndex(e => e.Name, "ir_model_access_name_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.GroupId)
                .HasComment("Group")
                .HasColumnName("group_id");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PermCreate)
                .HasComment("Create Access")
                .HasColumnName("perm_create");
            entity.Property(e => e.PermRead)
                .HasComment("Read Access")
                .HasColumnName("perm_read");
            entity.Property(e => e.PermUnlink)
                .HasComment("Delete Access")
                .HasColumnName("perm_unlink");
            entity.Property(e => e.PermWrite)
                .HasComment("Write Access")
                .HasColumnName("perm_write");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModelAccessCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_access_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.IrModelAccesses)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_model_access_group_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.IrModelAccesses)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("ir_model_access_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModelAccessWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_access_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelConstraint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_constraint_pkey");

            entity.ToTable("ir_model_constraint", tb => tb.HasComment("Model Constraint"));

            entity.HasIndex(e => e.Model, "ir_model_constraint_model_index");

            entity.HasIndex(e => e.Module, "ir_model_constraint_module_index");

            entity.HasIndex(e => new { e.Name, e.Module }, "ir_model_constraint_module_name_uniq").IsUnique();

            entity.HasIndex(e => e.Name, "ir_model_constraint_name_index");

            entity.HasIndex(e => e.Type, "ir_model_constraint_type_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Create Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Definition)
                .HasComment("Definition")
                .HasColumnType("character varying")
                .HasColumnName("definition");
            entity.Property(e => e.Message)
                .HasComment("Message")
                .HasColumnType("jsonb")
                .HasColumnName("message");
            entity.Property(e => e.Model)
                .HasComment("Model")
                .HasColumnName("model");
            entity.Property(e => e.Module)
                .HasComment("Module")
                .HasColumnName("module");
            entity.Property(e => e.Name)
                .HasComment("Constraint")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasComment("Constraint Type")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Write Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModelConstraintCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_constraint_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.IrModelConstraints)
                .HasForeignKey(d => d.Model)
                .HasConstraintName("ir_model_constraint_model_fkey");

            entity.HasOne(d => d.ModuleNavigation).WithMany(p => p.IrModelConstraints)
                .HasForeignKey(d => d.Module)
                .HasConstraintName("ir_model_constraint_module_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModelConstraintWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_constraint_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelDatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_data_pkey");

            entity.ToTable("ir_model_data");

            entity.HasIndex(e => new { e.Model, e.ResId }, "ir_model_data_model_res_id_index");

            entity.HasIndex(e => new { e.Module, e.Name }, "ir_model_data_module_name_uniq_index").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("timezone('UTC'::text, now())")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.Model)
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.Module)
                .HasColumnType("character varying")
                .HasColumnName("module");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Noupdate)
                .HasDefaultValueSql("false")
                .HasColumnName("noupdate");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.WriteDate)
                .HasDefaultValueSql("timezone('UTC'::text, now())")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModelDatumCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_data_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModelDatumWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_data_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_fields_pkey");

            entity.ToTable("ir_model_fields", tb => tb.HasComment("Fields"));

            entity.HasIndex(e => e.CompleteName, "ir_model_fields_complete_name_index");

            entity.HasIndex(e => e.ModelId, "ir_model_fields_model_id_index");

            entity.HasIndex(e => e.Model, "ir_model_fields_model_index");

            entity.HasIndex(e => e.Name, "ir_model_fields_name_index");

            entity.HasIndex(e => new { e.Model, e.Name }, "ir_model_fields_name_unique").IsUnique();

            entity.HasIndex(e => e.State, "ir_model_fields_state_index");

            entity.HasIndex(e => e.WebsiteFormBlacklisted, "ir_model_fields_website_form_blacklisted_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Column1)
                .HasComment("Column 1")
                .HasColumnType("character varying")
                .HasColumnName("column1");
            entity.Property(e => e.Column2)
                .HasComment("Column 2")
                .HasColumnType("character varying")
                .HasColumnName("column2");
            entity.Property(e => e.CompleteName)
                .HasComment("Complete Name")
                .HasColumnType("character varying")
                .HasColumnName("complete_name");
            entity.Property(e => e.Compute)
                .HasComment("Compute")
                .HasColumnName("compute");
            entity.Property(e => e.Copied)
                .HasComment("Copied")
                .HasColumnName("copied");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Depends)
                .HasComment("Dependencies")
                .HasColumnType("character varying")
                .HasColumnName("depends");
            entity.Property(e => e.Domain)
                .HasComment("Domain")
                .HasColumnType("character varying")
                .HasColumnName("domain");
            entity.Property(e => e.FieldDescription)
                .HasComment("Field Label")
                .HasColumnType("jsonb")
                .HasColumnName("field_description");
            entity.Property(e => e.GroupExpand)
                .HasComment("Expand Groups")
                .HasColumnName("group_expand");
            entity.Property(e => e.Help)
                .HasComment("Field Help")
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Index)
                .HasComment("Indexed")
                .HasColumnName("index");
            entity.Property(e => e.Model)
                .HasComment("Model Name")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasComment("Field Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OnDelete)
                .HasComment("On Delete")
                .HasColumnType("character varying")
                .HasColumnName("on_delete");
            entity.Property(e => e.Readonly)
                .HasComment("Readonly")
                .HasColumnName("readonly");
            entity.Property(e => e.Related)
                .HasComment("Related Field")
                .HasColumnType("character varying")
                .HasColumnName("related");
            entity.Property(e => e.RelatedFieldId)
                .HasComment("Related field")
                .HasColumnName("related_field_id");
            entity.Property(e => e.Relation)
                .HasComment("Related Model")
                .HasColumnType("character varying")
                .HasColumnName("relation");
            entity.Property(e => e.RelationField)
                .HasComment("Relation Field")
                .HasColumnType("character varying")
                .HasColumnName("relation_field");
            entity.Property(e => e.RelationFieldId)
                .HasComment("Relation field")
                .HasColumnName("relation_field_id");
            entity.Property(e => e.RelationTable)
                .HasComment("Relation Table")
                .HasColumnType("character varying")
                .HasColumnName("relation_table");
            entity.Property(e => e.Required)
                .HasComment("Required")
                .HasColumnName("required");
            entity.Property(e => e.Selectable)
                .HasComment("Selectable")
                .HasColumnName("selectable");
            entity.Property(e => e.Size)
                .HasComment("Size")
                .HasColumnName("size");
            entity.Property(e => e.State)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.Store)
                .HasComment("Stored")
                .HasColumnName("store");
            entity.Property(e => e.Tracking)
                .HasComment("Enable Ordered Tracking")
                .HasColumnName("tracking");
            entity.Property(e => e.Translate)
                .HasComment("Translatable")
                .HasColumnName("translate");
            entity.Property(e => e.Ttype)
                .HasComment("Field Type")
                .HasColumnType("character varying")
                .HasColumnName("ttype");
            entity.Property(e => e.WebsiteFormBlacklisted)
                .HasDefaultValueSql("true")
                .HasComment("Blacklisted in web forms")
                .HasColumnName("website_form_blacklisted");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModelFieldCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.IrModelFields)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("ir_model_fields_model_id_fkey");

            entity.HasOne(d => d.RelatedField).WithMany(p => p.InverseRelatedField)
                .HasForeignKey(d => d.RelatedFieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_fields_related_field_id_fkey");

            entity.HasOne(d => d.RelationFieldNavigation).WithMany(p => p.InverseRelationFieldNavigation)
                .HasForeignKey(d => d.RelationFieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_fields_relation_field_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModelFieldWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_write_uid_fkey");

            entity.HasMany(d => d.Groups).WithMany(p => p.Fields)
                .UsingEntity<Dictionary<string, object>>(
                    "IrModelFieldsGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ir_model_fields_group_rel_group_id_fkey"),
                    l => l.HasOne<IrModelField>().WithMany()
                        .HasForeignKey("FieldId")
                        .HasConstraintName("ir_model_fields_group_rel_field_id_fkey"),
                    j =>
                    {
                        j.HasKey("FieldId", "GroupId").HasName("ir_model_fields_group_rel_pkey");
                        j.ToTable("ir_model_fields_group_rel", tb => tb.HasComment("RELATION BETWEEN ir_model_fields AND res_groups"));
                        j.HasIndex(new[] { "GroupId", "FieldId" }, "ir_model_fields_group_rel_group_id_field_id_idx");
                        j.IndexerProperty<int>("FieldId").HasColumnName("field_id");
                        j.IndexerProperty<int>("GroupId").HasColumnName("group_id");
                    });
        });

        modelBuilder.Entity<IrModelFieldsSelection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_fields_selection_pkey");

            entity.ToTable("ir_model_fields_selection", tb => tb.HasComment("Fields Selection"));

            entity.HasIndex(e => e.FieldId, "ir_model_fields_selection_field_id_index");

            entity.HasIndex(e => new { e.FieldId, e.Value }, "ir_model_fields_selection_selection_field_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FieldId)
                .HasComment("Field")
                .HasColumnName("field_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModelFieldsSelectionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_selection_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.IrModelFieldsSelections)
                .HasForeignKey(d => d.FieldId)
                .HasConstraintName("ir_model_fields_selection_field_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModelFieldsSelectionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_selection_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelRelation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_relation_pkey");

            entity.ToTable("ir_model_relation", tb => tb.HasComment("Relation Model"));

            entity.HasIndex(e => e.Model, "ir_model_relation_model_index");

            entity.HasIndex(e => e.Module, "ir_model_relation_module_index");

            entity.HasIndex(e => e.Name, "ir_model_relation_name_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Create Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Model)
                .HasComment("Model")
                .HasColumnName("model");
            entity.Property(e => e.Module)
                .HasComment("Module")
                .HasColumnName("module");
            entity.Property(e => e.Name)
                .HasComment("Relation Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Write Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModelRelationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_relation_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.IrModelRelations)
                .HasForeignKey(d => d.Model)
                .HasConstraintName("ir_model_relation_model_fkey");

            entity.HasOne(d => d.ModuleNavigation).WithMany(p => p.IrModelRelations)
                .HasForeignKey(d => d.Module)
                .HasConstraintName("ir_model_relation_module_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModelRelationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_relation_write_uid_fkey");
        });

        modelBuilder.Entity<IrModuleCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_category_pkey");

            entity.ToTable("ir_module_category");

            entity.HasIndex(e => e.ParentId, "ir_module_category_parent_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Exclusive)
                .HasComment("Exclusive")
                .HasColumnName("exclusive");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Visible)
                .HasComment("Visible")
                .HasColumnName("visible");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModuleCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_category_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModuleCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_category_write_uid_fkey");
        });

        modelBuilder.Entity<IrModuleModule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_module_pkey");

            entity.ToTable("ir_module_module");

            entity.HasIndex(e => e.CategoryId, "ir_module_module_category_id_index");

            entity.HasIndex(e => e.Name, "ir_module_module_name_uniq").IsUnique();

            entity.HasIndex(e => e.State, "ir_module_module_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Application)
                .HasDefaultValueSql("false")
                .HasColumnName("application");
            entity.Property(e => e.Author)
                .HasColumnType("character varying")
                .HasColumnName("author");
            entity.Property(e => e.AutoInstall)
                .HasDefaultValueSql("false")
                .HasColumnName("auto_install");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Contributors)
                .HasComment("Contributors")
                .HasColumnName("contributors");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid).HasColumnName("create_uid");
            entity.Property(e => e.Demo)
                .HasDefaultValueSql("false")
                .HasColumnName("demo");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Icon)
                .HasColumnType("character varying")
                .HasColumnName("icon");
            entity.Property(e => e.LatestVersion)
                .HasColumnType("character varying")
                .HasColumnName("latest_version");
            entity.Property(e => e.License)
                .HasMaxLength(32)
                .HasColumnName("license");
            entity.Property(e => e.Maintainer)
                .HasComment("Maintainer")
                .HasColumnType("character varying")
                .HasColumnName("maintainer");
            entity.Property(e => e.MenusByModule)
                .HasComment("Menus")
                .HasColumnName("menus_by_module");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PublishedVersion)
                .HasComment("Published Version")
                .HasColumnType("character varying")
                .HasColumnName("published_version");
            entity.Property(e => e.ReportsByModule)
                .HasComment("Reports")
                .HasColumnName("reports_by_module");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("100")
                .HasColumnName("sequence");
            entity.Property(e => e.Shortdesc)
                .HasColumnType("jsonb")
                .HasColumnName("shortdesc");
            entity.Property(e => e.State)
                .HasMaxLength(16)
                .HasColumnName("state");
            entity.Property(e => e.Summary)
                .HasColumnType("jsonb")
                .HasColumnName("summary");
            entity.Property(e => e.ToBuy)
                .HasDefaultValueSql("false")
                .HasColumnName("to_buy");
            entity.Property(e => e.Url)
                .HasComment("URL")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.ViewsByModule)
                .HasComment("Views")
                .HasColumnName("views_by_module");
            entity.Property(e => e.Web)
                .HasDefaultValueSql("false")
                .HasColumnName("web");
            entity.Property(e => e.Website)
                .HasColumnType("character varying")
                .HasColumnName("website");
            entity.Property(e => e.WriteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.IrModuleModules)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_category_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModuleModuleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModuleModuleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_write_uid_fkey");
        });

        modelBuilder.Entity<IrModuleModuleDependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_module_dependency_pkey");

            entity.ToTable("ir_module_module_dependency");

            entity.HasIndex(e => e.Name, "ir_module_module_dependency_name_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AutoInstallRequired)
                .HasDefaultValueSql("true")
                .HasColumnName("auto_install_required");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");

            entity.HasOne(d => d.Module).WithMany(p => p.IrModuleModuleDependencies)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_module_module_dependency_module_id_fkey");
        });

        modelBuilder.Entity<IrModuleModuleExclusion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_module_exclusion_pkey");

            entity.ToTable("ir_module_module_exclusion", tb => tb.HasComment("Module exclusion"));

            entity.HasIndex(e => e.Name, "ir_module_module_exclusion_name_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ModuleId)
                .HasComment("Module")
                .HasColumnName("module_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrModuleModuleExclusionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_exclusion_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.IrModuleModuleExclusions)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_module_module_exclusion_module_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrModuleModuleExclusionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_exclusion_write_uid_fkey");
        });

        modelBuilder.Entity<IrProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_profile_pkey");

            entity.ToTable("ir_profile", tb => tb.HasComment("Profiling results"));

            entity.HasIndex(e => e.Session, "ir_profile_session_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Creation Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Duration)
                .HasComment("Duration")
                .HasColumnName("duration");
            entity.Property(e => e.EntryCount)
                .HasComment("Entry count")
                .HasColumnName("entry_count");
            entity.Property(e => e.InitStackTrace)
                .HasComment("Initial stack trace")
                .HasColumnName("init_stack_trace");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Qweb)
                .HasComment("Qweb")
                .HasColumnName("qweb");
            entity.Property(e => e.Session)
                .HasComment("Session")
                .HasColumnType("character varying")
                .HasColumnName("session");
            entity.Property(e => e.Sql)
                .HasComment("Sql")
                .HasColumnName("sql");
            entity.Property(e => e.SqlCount)
                .HasComment("Queries Count")
                .HasColumnName("sql_count");
            entity.Property(e => e.TracesAsync)
                .HasComment("Traces Async")
                .HasColumnName("traces_async");
            entity.Property(e => e.TracesSync)
                .HasComment("Traces Sync")
                .HasColumnName("traces_sync");
        });

        modelBuilder.Entity<IrProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_property_pkey");

            entity.ToTable("ir_property", tb => tb.HasComment("Company Property"));

            entity.HasIndex(e => e.CompanyId, "ir_property_company_id_index");

            entity.HasIndex(e => e.Name, "ir_property_name_index");

            entity.HasIndex(e => e.ResId, "ir_property_res_id_index");

            entity.HasIndex(e => e.Type, "ir_property_type_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FieldsId)
                .HasComment("Field")
                .HasColumnName("fields_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResId)
                .HasComment("Resource")
                .HasColumnType("character varying")
                .HasColumnName("res_id");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.ValueBinary)
                .HasComment("Value Binary")
                .HasColumnName("value_binary");
            entity.Property(e => e.ValueDatetime)
                .HasComment("Value Datetime")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("value_datetime");
            entity.Property(e => e.ValueFloat)
                .HasComment("Value Float")
                .HasColumnName("value_float");
            entity.Property(e => e.ValueInteger)
                .HasComment("Value Integer")
                .HasColumnName("value_integer");
            entity.Property(e => e.ValueReference)
                .HasComment("Value Reference")
                .HasColumnType("character varying")
                .HasColumnName("value_reference");
            entity.Property(e => e.ValueText)
                .HasComment("Value Text")
                .HasColumnName("value_text");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.IrProperties)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_property_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrPropertyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_property_create_uid_fkey");

            entity.HasOne(d => d.Fields).WithMany(p => p.IrProperties)
                .HasForeignKey(d => d.FieldsId)
                .HasConstraintName("ir_property_fields_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrPropertyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_property_write_uid_fkey");
        });

        modelBuilder.Entity<IrRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_rule_pkey");

            entity.ToTable("ir_rule", tb => tb.HasComment("Record Rule"));

            entity.HasIndex(e => e.ModelId, "ir_rule_model_id_index");

            entity.HasIndex(e => e.Name, "ir_rule_name_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DomainForce)
                .HasComment("Domain")
                .HasColumnName("domain_force");
            entity.Property(e => e.Global)
                .HasComment("Global")
                .HasColumnName("global");
            entity.Property(e => e.ModelId)
                .HasComment("Model")
                .HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PermCreate)
                .HasComment("Apply for Create")
                .HasColumnName("perm_create");
            entity.Property(e => e.PermRead)
                .HasComment("Apply for Read")
                .HasColumnName("perm_read");
            entity.Property(e => e.PermUnlink)
                .HasComment("Apply for Delete")
                .HasColumnName("perm_unlink");
            entity.Property(e => e.PermWrite)
                .HasComment("Apply for Write")
                .HasColumnName("perm_write");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrRuleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_rule_create_uid_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.IrRules)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("ir_rule_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrRuleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_rule_write_uid_fkey");

            entity.HasMany(d => d.Groups).WithMany(p => p.RuleGroups)
                .UsingEntity<Dictionary<string, object>>(
                    "RuleGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("rule_group_rel_group_id_fkey"),
                    l => l.HasOne<IrRule>().WithMany()
                        .HasForeignKey("RuleGroupId")
                        .HasConstraintName("rule_group_rel_rule_group_id_fkey"),
                    j =>
                    {
                        j.HasKey("RuleGroupId", "GroupId").HasName("rule_group_rel_pkey");
                        j.ToTable("rule_group_rel", tb => tb.HasComment("RELATION BETWEEN ir_rule AND res_groups"));
                        j.HasIndex(new[] { "GroupId", "RuleGroupId" }, "rule_group_rel_group_id_rule_group_id_idx");
                        j.IndexerProperty<int>("RuleGroupId").HasColumnName("rule_group_id");
                        j.IndexerProperty<int>("GroupId").HasColumnName("group_id");
                    });
        });

        modelBuilder.Entity<IrSequence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_sequence_pkey");

            entity.ToTable("ir_sequence", tb => tb.HasComment("Sequence"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Code)
                .HasComment("Sequence Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Implementation)
                .HasComment("Implementation")
                .HasColumnType("character varying")
                .HasColumnName("implementation");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NumberIncrement)
                .HasComment("Step")
                .HasColumnName("number_increment");
            entity.Property(e => e.NumberNext)
                .HasComment("Next Number")
                .HasColumnName("number_next");
            entity.Property(e => e.Padding)
                .HasComment("Sequence Size")
                .HasColumnName("padding");
            entity.Property(e => e.Prefix)
                .HasComment("Prefix")
                .HasColumnType("character varying")
                .HasColumnName("prefix");
            entity.Property(e => e.Suffix)
                .HasComment("Suffix")
                .HasColumnType("character varying")
                .HasColumnName("suffix");
            entity.Property(e => e.UseDateRange)
                .HasComment("Use subsequences per date_range")
                .HasColumnName("use_date_range");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.IrSequences)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrSequenceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrSequenceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_write_uid_fkey");
        });

        modelBuilder.Entity<IrSequenceDateRange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_sequence_date_range_pkey");

            entity.ToTable("ir_sequence_date_range", tb => tb.HasComment("Sequence Date Range"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasComment("From")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasComment("To")
                .HasColumnName("date_to");
            entity.Property(e => e.NumberNext)
                .HasComment("Next Number")
                .HasColumnName("number_next");
            entity.Property(e => e.SequenceId)
                .HasComment("Main Sequence")
                .HasColumnName("sequence_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrSequenceDateRangeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_date_range_create_uid_fkey");

            entity.HasOne(d => d.Sequence).WithMany(p => p.IrSequenceDateRanges)
                .HasForeignKey(d => d.SequenceId)
                .HasConstraintName("ir_sequence_date_range_sequence_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrSequenceDateRangeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_date_range_write_uid_fkey");
        });

        modelBuilder.Entity<IrServerObjectLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_server_object_lines_pkey");

            entity.ToTable("ir_server_object_lines", tb => tb.HasComment("Server Action value mapping"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Col1)
                .HasComment("Field")
                .HasColumnName("col1");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EvaluationType)
                .HasComment("Evaluation Type")
                .HasColumnType("character varying")
                .HasColumnName("evaluation_type");
            entity.Property(e => e.ServerId)
                .HasComment("Related Server Action")
                .HasColumnName("server_id");
            entity.Property(e => e.Value)
                .HasComment("Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Col1Navigation).WithMany(p => p.IrServerObjectLines)
                .HasForeignKey(d => d.Col1)
                .HasConstraintName("ir_server_object_lines_col1_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrServerObjectLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_server_object_lines_create_uid_fkey");

            entity.HasOne(d => d.Server).WithMany(p => p.IrServerObjectLines)
                .HasForeignKey(d => d.ServerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_server_object_lines_server_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrServerObjectLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_server_object_lines_write_uid_fkey");
        });

        modelBuilder.Entity<IrUiMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_ui_menu_pkey");

            entity.ToTable("ir_ui_menu", tb => tb.HasComment("Menu"));

            entity.HasIndex(e => e.ParentId, "ir_ui_menu_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "ir_ui_menu_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasComment("Action")
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Menu")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Menu")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WebIcon)
                .HasComment("Web Icon File")
                .HasColumnType("character varying")
                .HasColumnName("web_icon");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrUiMenuCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_menu_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_ui_menu_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrUiMenuWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_menu_write_uid_fkey");

            entity.HasMany(d => d.Gids).WithMany(p => p.Menus)
                .UsingEntity<Dictionary<string, object>>(
                    "IrUiMenuGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("ir_ui_menu_group_rel_gid_fkey"),
                    l => l.HasOne<IrUiMenu>().WithMany()
                        .HasForeignKey("MenuId")
                        .HasConstraintName("ir_ui_menu_group_rel_menu_id_fkey"),
                    j =>
                    {
                        j.HasKey("MenuId", "Gid").HasName("ir_ui_menu_group_rel_pkey");
                        j.ToTable("ir_ui_menu_group_rel", tb => tb.HasComment("RELATION BETWEEN ir_ui_menu AND res_groups"));
                        j.HasIndex(new[] { "Gid", "MenuId" }, "ir_ui_menu_group_rel_gid_menu_id_idx");
                        j.IndexerProperty<int>("MenuId").HasColumnName("menu_id");
                        j.IndexerProperty<int>("Gid").HasColumnName("gid");
                    });
        });

        modelBuilder.Entity<IrUiView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_ui_view_pkey");

            entity.ToTable("ir_ui_view", tb => tb.HasComment("View"));

            entity.HasIndex(e => e.InheritId, "ir_ui_view_inherit_id_index");

            entity.HasIndex(e => e.Key, "ir_ui_view_key_index").HasFilter("(key IS NOT NULL)");

            entity.HasIndex(e => e.Model, "ir_ui_view_model_index");

            entity.HasIndex(e => new { e.Model, e.InheritId }, "ir_ui_view_model_type_inherit_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.ArchDb)
                .HasComment("Arch Blob")
                .HasColumnType("jsonb")
                .HasColumnName("arch_db");
            entity.Property(e => e.ArchFs)
                .HasComment("Arch Filename")
                .HasColumnType("character varying")
                .HasColumnName("arch_fs");
            entity.Property(e => e.ArchPrev)
                .HasComment("Previous View Architecture")
                .HasColumnName("arch_prev");
            entity.Property(e => e.ArchUpdated)
                .HasComment("Modified Architecture")
                .HasColumnName("arch_updated");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomizeShow)
                .HasComment("Show As Optional Inherit")
                .HasColumnName("customize_show");
            entity.Property(e => e.FieldParent)
                .HasComment("Child Field")
                .HasColumnType("character varying")
                .HasColumnName("field_parent");
            entity.Property(e => e.InheritId)
                .HasComment("Inherited View")
                .HasColumnName("inherit_id");
            entity.Property(e => e.Key)
                .HasComment("Key")
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Mode)
                .HasComment("View inheritance mode")
                .HasColumnType("character varying")
                .HasColumnName("mode");
            entity.Property(e => e.Model)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.Name)
                .HasComment("View Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Priority)
                .HasComment("Sequence")
                .HasColumnName("priority");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.ThemeTemplateId)
                .HasComment("Theme Template")
                .HasColumnName("theme_template_id");
            entity.Property(e => e.Track)
                .HasComment("Track")
                .HasColumnName("track");
            entity.Property(e => e.Type)
                .HasComment("View Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Visibility)
                .HasComment("Visibility")
                .HasColumnType("character varying")
                .HasColumnName("visibility");
            entity.Property(e => e.VisibilityPassword)
                .HasComment("Visibility Password")
                .HasColumnType("character varying")
                .HasColumnName("visibility_password");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrUiViewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_create_uid_fkey");

            entity.HasOne(d => d.Inherit).WithMany(p => p.InverseInherit)
                .HasForeignKey(d => d.InheritId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_ui_view_inherit_id_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.IrUiViews)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.IrUiViews)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_ui_view_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrUiViewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_write_uid_fkey");

            entity.HasMany(d => d.Groups).WithMany(p => p.Views)
                .UsingEntity<Dictionary<string, object>>(
                    "IrUiViewGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ir_ui_view_group_rel_group_id_fkey"),
                    l => l.HasOne<IrUiView>().WithMany()
                        .HasForeignKey("ViewId")
                        .HasConstraintName("ir_ui_view_group_rel_view_id_fkey"),
                    j =>
                    {
                        j.HasKey("ViewId", "GroupId").HasName("ir_ui_view_group_rel_pkey");
                        j.ToTable("ir_ui_view_group_rel", tb => tb.HasComment("RELATION BETWEEN ir_ui_view AND res_groups"));
                        j.HasIndex(new[] { "GroupId", "ViewId" }, "ir_ui_view_group_rel_group_id_view_id_idx");
                        j.IndexerProperty<int>("ViewId").HasColumnName("view_id");
                        j.IndexerProperty<int>("GroupId").HasColumnName("group_id");
                    });
        });

        modelBuilder.Entity<IrUiViewCustom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_ui_view_custom_pkey");

            entity.ToTable("ir_ui_view_custom", tb => tb.HasComment("Custom View"));

            entity.HasIndex(e => e.RefId, "ir_ui_view_custom_ref_id_index");

            entity.HasIndex(e => e.UserId, "ir_ui_view_custom_user_id_index");

            entity.HasIndex(e => new { e.UserId, e.RefId }, "ir_ui_view_custom_user_id_ref_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Arch)
                .HasComment("View Architecture")
                .HasColumnName("arch");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.RefId)
                .HasComment("Original View")
                .HasColumnName("ref_id");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.IrUiViewCustomCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_custom_create_uid_fkey");

            entity.HasOne(d => d.Ref).WithMany(p => p.IrUiViewCustoms)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("ir_ui_view_custom_ref_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.IrUiViewCustomUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("ir_ui_view_custom_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.IrUiViewCustomWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_custom_write_uid_fkey");
        });

        modelBuilder.Entity<LinkTracker>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("link_tracker_pkey");

            entity.ToTable("link_tracker", tb => tb.HasComment("Link Tracker"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CampaignId)
                .HasComment("Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.Count)
                .HasComment("Number of Clicks")
                .HasColumnName("count");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Label)
                .HasComment("Button label")
                .HasColumnType("character varying")
                .HasColumnName("label");
            entity.Property(e => e.MassMailingId)
                .HasComment("Mass Mailing")
                .HasColumnName("mass_mailing_id");
            entity.Property(e => e.MediumId)
                .HasComment("Medium")
                .HasColumnName("medium_id");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.Title)
                .HasComment("Page Title")
                .HasColumnType("character varying")
                .HasColumnName("title");
            entity.Property(e => e.Url)
                .HasComment("Target URL")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Campaign).WithMany(p => p.LinkTrackers)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_campaign_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LinkTrackerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_create_uid_fkey");

            entity.HasOne(d => d.MassMailing).WithMany(p => p.LinkTrackers)
                .HasForeignKey(d => d.MassMailingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_mass_mailing_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.LinkTrackers)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_medium_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.LinkTrackers)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_source_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LinkTrackerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_write_uid_fkey");
        });

        modelBuilder.Entity<LinkTrackerClick>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("link_tracker_click_pkey");

            entity.ToTable("link_tracker_click", tb => tb.HasComment("Link Tracker Click"));

            entity.HasIndex(e => e.LinkId, "link_tracker_click_link_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CampaignId)
                .HasComment("UTM Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Ip)
                .HasComment("Internet Protocol")
                .HasColumnType("character varying")
                .HasColumnName("ip");
            entity.Property(e => e.LinkId)
                .HasComment("Link")
                .HasColumnName("link_id");
            entity.Property(e => e.MailingTraceId)
                .HasComment("Mail Statistics")
                .HasColumnName("mailing_trace_id");
            entity.Property(e => e.MassMailingId)
                .HasComment("Mass Mailing")
                .HasColumnName("mass_mailing_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Campaign).WithMany(p => p.LinkTrackerClicks)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_click_campaign_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.LinkTrackerClicks)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_click_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LinkTrackerClickCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_click_create_uid_fkey");

            entity.HasOne(d => d.Link).WithMany(p => p.LinkTrackerClicks)
                .HasForeignKey(d => d.LinkId)
                .HasConstraintName("link_tracker_click_link_id_fkey");

            entity.HasOne(d => d.MailingTrace).WithMany(p => p.LinkTrackerClicks)
                .HasForeignKey(d => d.MailingTraceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_click_mailing_trace_id_fkey");

            entity.HasOne(d => d.MassMailing).WithMany(p => p.LinkTrackerClicks)
                .HasForeignKey(d => d.MassMailingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_click_mass_mailing_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LinkTrackerClickWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_click_write_uid_fkey");
        });

        modelBuilder.Entity<LinkTrackerCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("link_tracker_code_pkey");

            entity.ToTable("link_tracker_code", tb => tb.HasComment("Link Tracker Code"));

            entity.HasIndex(e => e.Code, "link_tracker_code_code").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasComment("Short URL Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LinkId)
                .HasComment("Link")
                .HasColumnName("link_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LinkTrackerCodeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_code_create_uid_fkey");

            entity.HasOne(d => d.Link).WithMany(p => p.LinkTrackerCodes)
                .HasForeignKey(d => d.LinkId)
                .HasConstraintName("link_tracker_code_link_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LinkTrackerCodeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("link_tracker_code_write_uid_fkey");
        });

        modelBuilder.Entity<LotLabelLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lot_label_layout_pkey");

            entity.ToTable("lot_label_layout", tb => tb.HasComment("Choose the sheet layout to print lot labels"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LabelQuantity)
                .HasComment("Quantity to print")
                .HasColumnType("character varying")
                .HasColumnName("label_quantity");
            entity.Property(e => e.PrintFormat)
                .HasComment("Format")
                .HasColumnType("character varying")
                .HasColumnName("print_format");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LotLabelLayoutCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lot_label_layout_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LotLabelLayoutWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lot_label_layout_write_uid_fkey");

            entity.HasMany(d => d.StockPickings).WithMany(p => p.LotLabelLayouts)
                .UsingEntity<Dictionary<string, object>>(
                    "LotLabelLayoutStockPickingRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("lot_label_layout_stock_picking_rel_stock_picking_id_fkey"),
                    l => l.HasOne<LotLabelLayout>().WithMany()
                        .HasForeignKey("LotLabelLayoutId")
                        .HasConstraintName("lot_label_layout_stock_picking_rel_lot_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("LotLabelLayoutId", "StockPickingId").HasName("lot_label_layout_stock_picking_rel_pkey");
                        j.ToTable("lot_label_layout_stock_picking_rel", tb => tb.HasComment("RELATION BETWEEN lot_label_layout AND stock_picking"));
                        j.HasIndex(new[] { "StockPickingId", "LotLabelLayoutId" }, "lot_label_layout_stock_pickin_stock_picking_id_lot_label_la_idx");
                        j.IndexerProperty<int>("LotLabelLayoutId").HasColumnName("lot_label_layout_id");
                        j.IndexerProperty<int>("StockPickingId").HasColumnName("stock_picking_id");
                    });
        });

        modelBuilder.Entity<LunchAlert>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_alert_pkey");

            entity.ToTable("lunch_alert", tb => tb.HasComment("Lunch Alert"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CronId)
                .HasComment("Cron")
                .HasColumnName("cron_id");
            entity.Property(e => e.Fri)
                .HasComment("Fri")
                .HasColumnName("fri");
            entity.Property(e => e.Message)
                .HasComment("Message")
                .HasColumnType("jsonb")
                .HasColumnName("message");
            entity.Property(e => e.Mode)
                .HasComment("Display")
                .HasColumnType("character varying")
                .HasColumnName("mode");
            entity.Property(e => e.Mon)
                .HasComment("Mon")
                .HasColumnName("mon");
            entity.Property(e => e.Name)
                .HasComment("Alert Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NotificationMoment)
                .HasComment("Notification Moment")
                .HasColumnType("character varying")
                .HasColumnName("notification_moment");
            entity.Property(e => e.NotificationTime)
                .HasComment("Notification Time")
                .HasColumnName("notification_time");
            entity.Property(e => e.Recipients)
                .HasComment("Recipients")
                .HasColumnType("character varying")
                .HasColumnName("recipients");
            entity.Property(e => e.Sat)
                .HasComment("Sat")
                .HasColumnName("sat");
            entity.Property(e => e.Sun)
                .HasComment("Sun")
                .HasColumnName("sun");
            entity.Property(e => e.Thu)
                .HasComment("Thu")
                .HasColumnName("thu");
            entity.Property(e => e.Tue)
                .HasComment("Tue")
                .HasColumnName("tue");
            entity.Property(e => e.Tz)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("tz");
            entity.Property(e => e.Until)
                .HasComment("Show Until")
                .HasColumnName("until");
            entity.Property(e => e.Wed)
                .HasComment("Wed")
                .HasColumnName("wed");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchAlertCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_alert_create_uid_fkey");

            entity.HasOne(d => d.Cron).WithMany(p => p.LunchAlerts)
                .HasForeignKey(d => d.CronId)
                .HasConstraintName("lunch_alert_cron_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchAlertWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_alert_write_uid_fkey");

            entity.HasMany(d => d.LunchLocations).WithMany(p => p.LunchAlerts)
                .UsingEntity<Dictionary<string, object>>(
                    "LunchAlertLunchLocationRel",
                    r => r.HasOne<LunchLocation>().WithMany()
                        .HasForeignKey("LunchLocationId")
                        .HasConstraintName("lunch_alert_lunch_location_rel_lunch_location_id_fkey"),
                    l => l.HasOne<LunchAlert>().WithMany()
                        .HasForeignKey("LunchAlertId")
                        .HasConstraintName("lunch_alert_lunch_location_rel_lunch_alert_id_fkey"),
                    j =>
                    {
                        j.HasKey("LunchAlertId", "LunchLocationId").HasName("lunch_alert_lunch_location_rel_pkey");
                        j.ToTable("lunch_alert_lunch_location_rel", tb => tb.HasComment("RELATION BETWEEN lunch_alert AND lunch_location"));
                        j.HasIndex(new[] { "LunchLocationId", "LunchAlertId" }, "lunch_alert_lunch_location_re_lunch_location_id_lunch_alert_idx");
                        j.IndexerProperty<int>("LunchAlertId").HasColumnName("lunch_alert_id");
                        j.IndexerProperty<int>("LunchLocationId").HasColumnName("lunch_location_id");
                    });
        });

        modelBuilder.Entity<LunchCashmove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_cashmove_pkey");

            entity.ToTable("lunch_cashmove", tb => tb.HasComment("Lunch Cashmove"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchCashmoveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_cashmove_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.LunchCashmoves)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_cashmove_currency_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.LunchCashmoveUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_cashmove_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchCashmoveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_cashmove_write_uid_fkey");
        });

        modelBuilder.Entity<LunchCashmoveReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lunch_cashmove_report");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<LunchLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_location_pkey");

            entity.ToTable("lunch_location", tb => tb.HasComment("Lunch Locations"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasComment("Address")
                .HasColumnName("address");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Location Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.LunchLocations)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_location_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchLocationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_location_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchLocationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_location_write_uid_fkey");
        });

        modelBuilder.Entity<LunchOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_order_pkey");

            entity.ToTable("lunch_order", tb => tb.HasComment("Lunch Order"));

            entity.HasIndex(e => e.State, "lunch_order_state_index");

            entity.HasIndex(e => e.SupplierId, "lunch_order_supplier_id_index");

            entity.HasIndex(e => new { e.UserId, e.ProductId, e.Date }, "lunch_order_user_product_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CategoryId)
                .HasComment("Product Category")
                .HasColumnName("category_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Date)
                .HasComment("Order Date")
                .HasColumnName("date");
            entity.Property(e => e.DisplayToppings)
                .HasComment("Extras")
                .HasColumnName("display_toppings");
            entity.Property(e => e.LunchLocationId)
                .HasComment("Lunch Location")
                .HasColumnName("lunch_location_id");
            entity.Property(e => e.Name)
                .HasComment("Product Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Notes")
                .HasColumnName("note");
            entity.Property(e => e.Notified)
                .HasComment("Notified")
                .HasColumnName("notified");
            entity.Property(e => e.Price)
                .HasComment("Total Price")
                .HasColumnName("price");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.SupplierId)
                .HasComment("Vendor")
                .HasColumnName("supplier_id");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_category_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchOrderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_currency_id_fkey");

            entity.HasOne(d => d.LunchLocation).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.LunchLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_lunch_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_order_product_id_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_supplier_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.LunchOrderUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchOrderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_write_uid_fkey");

            entity.HasMany(d => d.Toppings).WithMany(p => p.Orders)
                .UsingEntity<Dictionary<string, object>>(
                    "LunchOrderTopping",
                    r => r.HasOne<LunchTopping>().WithMany()
                        .HasForeignKey("ToppingId")
                        .HasConstraintName("lunch_order_topping_topping_id_fkey"),
                    l => l.HasOne<LunchOrder>().WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("lunch_order_topping_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("OrderId", "ToppingId").HasName("lunch_order_topping_pkey");
                        j.ToTable("lunch_order_topping", tb => tb.HasComment("RELATION BETWEEN lunch_order AND lunch_topping"));
                        j.HasIndex(new[] { "ToppingId", "OrderId" }, "lunch_order_topping_topping_id_order_id_idx");
                        j.IndexerProperty<int>("OrderId").HasColumnName("order_id");
                        j.IndexerProperty<int>("ToppingId").HasColumnName("topping_id");
                    });
        });

        modelBuilder.Entity<LunchProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_product_pkey");

            entity.ToTable("lunch_product", tb => tb.HasComment("Lunch Product"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CategoryId)
                .HasComment("Product Category")
                .HasColumnName("category_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasComment("Product Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NewUntil)
                .HasComment("New Until")
                .HasColumnName("new_until");
            entity.Property(e => e.Price)
                .HasComment("Price")
                .HasColumnName("price");
            entity.Property(e => e.SupplierId)
                .HasComment("Vendor")
                .HasColumnName("supplier_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.LunchProducts)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_product_category_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.LunchProducts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchProductCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_create_uid_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.LunchProducts)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_product_supplier_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchProductWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_write_uid_fkey");

            entity.HasMany(d => d.Users).WithMany(p => p.Products)
                .UsingEntity<Dictionary<string, object>>(
                    "LunchProductFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("lunch_product_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<LunchProduct>().WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("lunch_product_favorite_user_rel_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductId", "UserId").HasName("lunch_product_favorite_user_rel_pkey");
                        j.ToTable("lunch_product_favorite_user_rel", tb => tb.HasComment("RELATION BETWEEN lunch_product AND res_users"));
                        j.HasIndex(new[] { "UserId", "ProductId" }, "lunch_product_favorite_user_rel_user_id_product_id_idx");
                        j.IndexerProperty<int>("ProductId").HasColumnName("product_id");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                    });
        });

        modelBuilder.Entity<LunchProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_product_category_pkey");

            entity.ToTable("lunch_product_category", tb => tb.HasComment("Lunch Product Category"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Product Category")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.LunchProductCategories)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_category_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchProductCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_category_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchProductCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_category_write_uid_fkey");
        });

        modelBuilder.Entity<LunchSupplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_supplier_pkey");

            entity.ToTable("lunch_supplier", tb => tb.HasComment("Lunch Supplier"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AutomaticEmailTime)
                .HasComment("Order Time")
                .HasColumnName("automatic_email_time");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CronId)
                .HasComment("Cron")
                .HasColumnName("cron_id");
            entity.Property(e => e.Delivery)
                .HasComment("Delivery")
                .HasColumnType("character varying")
                .HasColumnName("delivery");
            entity.Property(e => e.Fri)
                .HasComment("Fri")
                .HasColumnName("fri");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Moment)
                .HasComment("Moment")
                .HasColumnType("character varying")
                .HasColumnName("moment");
            entity.Property(e => e.Mon)
                .HasComment("Mon")
                .HasColumnName("mon");
            entity.Property(e => e.PartnerId)
                .HasComment("Vendor")
                .HasColumnName("partner_id");
            entity.Property(e => e.RecurrencyEndDate)
                .HasComment("Until")
                .HasColumnName("recurrency_end_date");
            entity.Property(e => e.ResponsibleId)
                .HasComment("Responsible")
                .HasColumnName("responsible_id");
            entity.Property(e => e.Sat)
                .HasComment("Sat")
                .HasColumnName("sat");
            entity.Property(e => e.SendBy)
                .HasComment("Send Order By")
                .HasColumnType("character varying")
                .HasColumnName("send_by");
            entity.Property(e => e.Sun)
                .HasComment("Sun")
                .HasColumnName("sun");
            entity.Property(e => e.Thu)
                .HasComment("Thu")
                .HasColumnName("thu");
            entity.Property(e => e.ToppingLabel1)
                .HasComment("Extra 1 Label")
                .HasColumnType("character varying")
                .HasColumnName("topping_label_1");
            entity.Property(e => e.ToppingLabel2)
                .HasComment("Extra 2 Label")
                .HasColumnType("character varying")
                .HasColumnName("topping_label_2");
            entity.Property(e => e.ToppingLabel3)
                .HasComment("Extra 3 Label")
                .HasColumnType("character varying")
                .HasColumnName("topping_label_3");
            entity.Property(e => e.ToppingQuantity1)
                .HasComment("Extra 1 Quantity")
                .HasColumnType("character varying")
                .HasColumnName("topping_quantity_1");
            entity.Property(e => e.ToppingQuantity2)
                .HasComment("Extra 2 Quantity")
                .HasColumnType("character varying")
                .HasColumnName("topping_quantity_2");
            entity.Property(e => e.ToppingQuantity3)
                .HasComment("Extra 3 Quantity")
                .HasColumnType("character varying")
                .HasColumnName("topping_quantity_3");
            entity.Property(e => e.Tue)
                .HasComment("Tue")
                .HasColumnName("tue");
            entity.Property(e => e.Tz)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("tz");
            entity.Property(e => e.Wed)
                .HasComment("Wed")
                .HasColumnName("wed");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.LunchSuppliers)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchSupplierCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_create_uid_fkey");

            entity.HasOne(d => d.Cron).WithMany(p => p.LunchSuppliers)
                .HasForeignKey(d => d.CronId)
                .HasConstraintName("lunch_supplier_cron_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.LunchSuppliers)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.LunchSuppliers)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_supplier_partner_id_fkey");

            entity.HasOne(d => d.Responsible).WithMany(p => p.LunchSupplierResponsibles)
                .HasForeignKey(d => d.ResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_responsible_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchSupplierWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_write_uid_fkey");

            entity.HasMany(d => d.LunchLocations).WithMany(p => p.LunchSuppliers)
                .UsingEntity<Dictionary<string, object>>(
                    "LunchLocationLunchSupplierRel",
                    r => r.HasOne<LunchLocation>().WithMany()
                        .HasForeignKey("LunchLocationId")
                        .HasConstraintName("lunch_location_lunch_supplier_rel_lunch_location_id_fkey"),
                    l => l.HasOne<LunchSupplier>().WithMany()
                        .HasForeignKey("LunchSupplierId")
                        .HasConstraintName("lunch_location_lunch_supplier_rel_lunch_supplier_id_fkey"),
                    j =>
                    {
                        j.HasKey("LunchSupplierId", "LunchLocationId").HasName("lunch_location_lunch_supplier_rel_pkey");
                        j.ToTable("lunch_location_lunch_supplier_rel", tb => tb.HasComment("RELATION BETWEEN lunch_supplier AND lunch_location"));
                        j.HasIndex(new[] { "LunchLocationId", "LunchSupplierId" }, "lunch_location_lunch_supplier_lunch_location_id_lunch_suppl_idx");
                        j.IndexerProperty<int>("LunchSupplierId").HasColumnName("lunch_supplier_id");
                        j.IndexerProperty<int>("LunchLocationId").HasColumnName("lunch_location_id");
                    });
        });

        modelBuilder.Entity<LunchTopping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_topping_pkey");

            entity.ToTable("lunch_topping", tb => tb.HasComment("Lunch Extras"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasComment("Price")
                .HasColumnName("price");
            entity.Property(e => e.SupplierId)
                .HasComment("Supplier")
                .HasColumnName("supplier_id");
            entity.Property(e => e.ToppingCategory)
                .HasComment("Topping Category")
                .HasColumnName("topping_category");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.LunchToppings)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_topping_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.LunchToppingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_topping_create_uid_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.LunchToppings)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("lunch_topping_supplier_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.LunchToppingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_topping_write_uid_fkey");
        });

        modelBuilder.Entity<MailActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_activity_pkey");

            entity.ToTable("mail_activity", tb => tb.HasComment("Activity"));

            entity.HasIndex(e => e.DateDeadline, "mail_activity_date_deadline_index");

            entity.HasIndex(e => e.ResId, "mail_activity_res_id_index");

            entity.HasIndex(e => e.ResModelId, "mail_activity_res_model_id_index");

            entity.HasIndex(e => e.ResModel, "mail_activity_res_model_index");

            entity.HasIndex(e => e.UserId, "mail_activity_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActivityTypeId)
                .HasComment("Activity Type")
                .HasColumnName("activity_type_id");
            entity.Property(e => e.Automated)
                .HasComment("Automated activity")
                .HasColumnName("automated");
            entity.Property(e => e.CalendarEventId)
                .HasComment("Calendar Meeting")
                .HasColumnName("calendar_event_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateDeadline)
                .HasComment("Due Date")
                .HasColumnName("date_deadline");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.NoteId)
                .HasComment("Related Note")
                .HasColumnName("note_id");
            entity.Property(e => e.PreviousActivityTypeId)
                .HasComment("Previous Activity Type")
                .HasColumnName("previous_activity_type_id");
            entity.Property(e => e.RecommendedActivityTypeId)
                .HasComment("Recommended Activity Type")
                .HasColumnName("recommended_activity_type_id");
            entity.Property(e => e.RequestPartnerId)
                .HasComment("Requesting Partner")
                .HasColumnName("request_partner_id");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.ResModelId)
                .HasComment("Document Model")
                .HasColumnName("res_model_id");
            entity.Property(e => e.ResName)
                .HasComment("Document Name")
                .HasColumnType("character varying")
                .HasColumnName("res_name");
            entity.Property(e => e.Summary)
                .HasComment("Summary")
                .HasColumnType("character varying")
                .HasColumnName("summary");
            entity.Property(e => e.UserId)
                .HasComment("Assigned to")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ActivityType).WithMany(p => p.MailActivityActivityTypes)
                .HasForeignKey(d => d.ActivityTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mail_activity_activity_type_id_fkey");

            entity.HasOne(d => d.CalendarEvent).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.CalendarEventId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_activity_calendar_event_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailActivityCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_create_uid_fkey");

            entity.HasOne(d => d.NoteNavigation).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_activity_note_id_fkey");

            entity.HasOne(d => d.PreviousActivityType).WithMany(p => p.MailActivityPreviousActivityTypes)
                .HasForeignKey(d => d.PreviousActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_previous_activity_type_id_fkey");

            entity.HasOne(d => d.RecommendedActivityType).WithMany(p => p.MailActivityRecommendedActivityTypes)
                .HasForeignKey(d => d.RecommendedActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_recommended_activity_type_id_fkey");

            entity.HasOne(d => d.RequestPartner).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.RequestPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_request_partner_id_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.ResModelId)
                .HasConstraintName("mail_activity_res_model_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.MailActivityUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mail_activity_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailActivityWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_write_uid_fkey");
        });

        modelBuilder.Entity<MailActivityType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_activity_type_pkey");

            entity.ToTable("mail_activity_type", tb => tb.HasComment("Activity Type"));

            entity.HasIndex(e => e.CreateUid, "mail_activity_type_create_uid_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Category)
                .HasComment("Action")
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.ChainingType)
                .HasComment("Chaining Type")
                .HasColumnType("character varying")
                .HasColumnName("chaining_type");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Create Uid")
                .HasColumnName("create_uid");
            entity.Property(e => e.DecorationType)
                .HasComment("Decoration Type")
                .HasColumnType("character varying")
                .HasColumnName("decoration_type");
            entity.Property(e => e.DefaultNote)
                .HasComment("Default Note")
                .HasColumnType("jsonb")
                .HasColumnName("default_note");
            entity.Property(e => e.DefaultUserId)
                .HasComment("Default User")
                .HasColumnName("default_user_id");
            entity.Property(e => e.DelayCount)
                .HasComment("Schedule")
                .HasColumnName("delay_count");
            entity.Property(e => e.DelayFrom)
                .HasComment("Delay Type")
                .HasColumnType("character varying")
                .HasColumnName("delay_from");
            entity.Property(e => e.DelayUnit)
                .HasComment("Delay units")
                .HasColumnType("character varying")
                .HasColumnName("delay_unit");
            entity.Property(e => e.Icon)
                .HasComment("Icon")
                .HasColumnType("character varying")
                .HasColumnName("icon");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ResModel)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Summary)
                .HasComment("Default Summary")
                .HasColumnType("jsonb")
                .HasColumnName("summary");
            entity.Property(e => e.TriggeredNextTypeId)
                .HasComment("Trigger")
                .HasColumnName("triggered_next_type_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailActivityTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_type_create_uid_fkey");

            entity.HasOne(d => d.DefaultUser).WithMany(p => p.MailActivityTypeDefaultUsers)
                .HasForeignKey(d => d.DefaultUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_type_default_user_id_fkey");

            entity.HasOne(d => d.TriggeredNextType).WithMany(p => p.InverseTriggeredNextType)
                .HasForeignKey(d => d.TriggeredNextTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mail_activity_type_triggered_next_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailActivityTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_type_write_uid_fkey");

            entity.HasMany(d => d.Activities).WithMany(p => p.Recommendeds)
                .UsingEntity<Dictionary<string, object>>(
                    "MailActivityRel",
                    r => r.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("mail_activity_rel_activity_id_fkey"),
                    l => l.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("RecommendedId")
                        .HasConstraintName("mail_activity_rel_recommended_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActivityId", "RecommendedId").HasName("mail_activity_rel_pkey");
                        j.ToTable("mail_activity_rel", tb => tb.HasComment("RELATION BETWEEN mail_activity_type AND mail_activity_type"));
                        j.HasIndex(new[] { "RecommendedId", "ActivityId" }, "mail_activity_rel_recommended_id_activity_id_idx");
                        j.IndexerProperty<int>("ActivityId").HasColumnName("activity_id");
                        j.IndexerProperty<int>("RecommendedId").HasColumnName("recommended_id");
                    });

            entity.HasMany(d => d.MailTemplates).WithMany(p => p.MailActivityTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "MailActivityTypeMailTemplateRel",
                    r => r.HasOne<MailTemplate>().WithMany()
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("mail_activity_type_mail_template_rel_mail_template_id_fkey"),
                    l => l.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("MailActivityTypeId")
                        .HasConstraintName("mail_activity_type_mail_template_rel_mail_activity_type_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailActivityTypeId", "MailTemplateId").HasName("mail_activity_type_mail_template_rel_pkey");
                        j.ToTable("mail_activity_type_mail_template_rel", tb => tb.HasComment("RELATION BETWEEN mail_activity_type AND mail_template"));
                        j.HasIndex(new[] { "MailTemplateId", "MailActivityTypeId" }, "mail_activity_type_mail_templ_mail_template_id_mail_activit_idx");
                        j.IndexerProperty<int>("MailActivityTypeId").HasColumnName("mail_activity_type_id");
                        j.IndexerProperty<int>("MailTemplateId").HasColumnName("mail_template_id");
                    });

            entity.HasMany(d => d.Recommendeds).WithMany(p => p.Activities)
                .UsingEntity<Dictionary<string, object>>(
                    "MailActivityRel",
                    r => r.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("RecommendedId")
                        .HasConstraintName("mail_activity_rel_recommended_id_fkey"),
                    l => l.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("mail_activity_rel_activity_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActivityId", "RecommendedId").HasName("mail_activity_rel_pkey");
                        j.ToTable("mail_activity_rel", tb => tb.HasComment("RELATION BETWEEN mail_activity_type AND mail_activity_type"));
                        j.HasIndex(new[] { "RecommendedId", "ActivityId" }, "mail_activity_rel_recommended_id_activity_id_idx");
                        j.IndexerProperty<int>("ActivityId").HasColumnName("activity_id");
                        j.IndexerProperty<int>("RecommendedId").HasColumnName("recommended_id");
                    });
        });

        modelBuilder.Entity<MailAlias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_alias_pkey");

            entity.ToTable("mail_alias", tb => tb.HasComment("Email Aliases"));

            entity.HasIndex(e => e.AliasName, "mail_alias_alias_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AliasBouncedContent)
                .HasComment("Custom Bounced Message")
                .HasColumnType("jsonb")
                .HasColumnName("alias_bounced_content");
            entity.Property(e => e.AliasContact)
                .HasComment("Alias Contact Security")
                .HasColumnType("character varying")
                .HasColumnName("alias_contact");
            entity.Property(e => e.AliasDefaults)
                .HasComment("Default Values")
                .HasColumnName("alias_defaults");
            entity.Property(e => e.AliasForceThreadId)
                .HasComment("Record Thread ID")
                .HasColumnName("alias_force_thread_id");
            entity.Property(e => e.AliasModelId)
                .HasComment("Aliased Model")
                .HasColumnName("alias_model_id");
            entity.Property(e => e.AliasName)
                .HasComment("Alias Name")
                .HasColumnType("character varying")
                .HasColumnName("alias_name");
            entity.Property(e => e.AliasParentModelId)
                .HasComment("Parent Model")
                .HasColumnName("alias_parent_model_id");
            entity.Property(e => e.AliasParentThreadId)
                .HasComment("Parent Record Thread ID")
                .HasColumnName("alias_parent_thread_id");
            entity.Property(e => e.AliasUserId)
                .HasComment("Owner")
                .HasColumnName("alias_user_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AliasModel).WithMany(p => p.MailAliasAliasModels)
                .HasForeignKey(d => d.AliasModelId)
                .HasConstraintName("mail_alias_alias_model_id_fkey");

            entity.HasOne(d => d.AliasParentModel).WithMany(p => p.MailAliasAliasParentModels)
                .HasForeignKey(d => d.AliasParentModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_alias_parent_model_id_fkey");

            entity.HasOne(d => d.AliasUser).WithMany(p => p.MailAliasAliasUsers)
                .HasForeignKey(d => d.AliasUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_alias_user_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailAliasCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailAliasWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_write_uid_fkey");
        });

        modelBuilder.Entity<MailBlacklist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_blacklist_pkey");

            entity.ToTable("mail_blacklist", tb => tb.HasComment("Mail Blacklist"));

            entity.HasIndex(e => e.Email, "mail_blacklist_email_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.Email, "mail_blacklist_unique_email").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email Address")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailBlacklistCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MailBlacklists)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_message_main_attachment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailBlacklistWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_write_uid_fkey");
        });

        modelBuilder.Entity<MailBlacklistRemove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_blacklist_remove_pkey");

            entity.ToTable("mail_blacklist_remove", tb => tb.HasComment("Remove email from blacklist wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.Reason)
                .HasComment("Reason")
                .HasColumnType("character varying")
                .HasColumnName("reason");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailBlacklistRemoveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_remove_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailBlacklistRemoveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_remove_write_uid_fkey");
        });

        modelBuilder.Entity<MailChannel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_channel_pkey");

            entity.ToTable("mail_channel", tb => tb.HasComment("Discussion Channel"));

            entity.HasIndex(e => e.LivechatVisitorId, "mail_channel_livechat_visitor_id_index").HasFilter("(livechat_visitor_id IS NOT NULL)");

            entity.HasIndex(e => e.Uuid, "mail_channel_uuid_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AnonymousName)
                .HasComment("Anonymous Name")
                .HasColumnType("character varying")
                .HasColumnName("anonymous_name");
            entity.Property(e => e.ChannelType)
                .HasComment("Channel Type")
                .HasColumnType("character varying")
                .HasColumnName("channel_type");
            entity.Property(e => e.ChatbotCurrentStepId)
                .HasComment("Chatbot Current Step")
                .HasColumnName("chatbot_current_step_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultDisplayMode)
                .HasComment("Default Display Mode")
                .HasColumnType("character varying")
                .HasColumnName("default_display_mode");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.GroupPublicId)
                .HasComment("Authorized Group")
                .HasColumnName("group_public_id");
            entity.Property(e => e.LivechatActive)
                .HasComment("Is livechat ongoing?")
                .HasColumnName("livechat_active");
            entity.Property(e => e.LivechatChannelId)
                .HasComment("Channel")
                .HasColumnName("livechat_channel_id");
            entity.Property(e => e.LivechatOperatorId)
                .HasComment("Operator")
                .HasColumnName("livechat_operator_id");
            entity.Property(e => e.LivechatVisitorId)
                .HasComment("Visitor")
                .HasColumnName("livechat_visitor_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RatingLastValue)
                .HasComment("Rating Last Value")
                .HasColumnName("rating_last_value");
            entity.Property(e => e.Uuid)
                .HasMaxLength(50)
                .HasComment("UUID")
                .HasColumnName("uuid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ChatbotCurrentStep).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.ChatbotCurrentStepId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_chatbot_current_step_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailChannelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_create_uid_fkey");

            entity.HasOne(d => d.GroupPublic).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.GroupPublicId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_group_public_id_fkey");

            entity.HasOne(d => d.LivechatChannel).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.LivechatChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_livechat_channel_id_fkey");

            entity.HasOne(d => d.LivechatOperator).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.LivechatOperatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_livechat_operator_id_fkey");

            entity.HasOne(d => d.LivechatVisitor).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.LivechatVisitorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_livechat_visitor_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_message_main_attachment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailChannelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_write_uid_fkey");

            entity.HasMany(d => d.HrDepartments).WithMany(p => p.MailChannels)
                .UsingEntity<Dictionary<string, object>>(
                    "HrDepartmentMailChannelRel",
                    r => r.HasOne<HrDepartment>().WithMany()
                        .HasForeignKey("HrDepartmentId")
                        .HasConstraintName("hr_department_mail_channel_rel_hr_department_id_fkey"),
                    l => l.HasOne<MailChannel>().WithMany()
                        .HasForeignKey("MailChannelId")
                        .HasConstraintName("hr_department_mail_channel_rel_mail_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailChannelId", "HrDepartmentId").HasName("hr_department_mail_channel_rel_pkey");
                        j.ToTable("hr_department_mail_channel_rel", tb => tb.HasComment("RELATION BETWEEN mail_channel AND hr_department"));
                        j.HasIndex(new[] { "HrDepartmentId", "MailChannelId" }, "hr_department_mail_channel_re_hr_department_id_mail_channel_idx");
                        j.IndexerProperty<int>("MailChannelId").HasColumnName("mail_channel_id");
                        j.IndexerProperty<int>("HrDepartmentId").HasColumnName("hr_department_id");
                    });

            entity.HasMany(d => d.ResGroups).WithMany(p => p.MailChannelsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "MailChannelResGroupsRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("ResGroupsId")
                        .HasConstraintName("mail_channel_res_groups_rel_res_groups_id_fkey"),
                    l => l.HasOne<MailChannel>().WithMany()
                        .HasForeignKey("MailChannelId")
                        .HasConstraintName("mail_channel_res_groups_rel_mail_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailChannelId", "ResGroupsId").HasName("mail_channel_res_groups_rel_pkey");
                        j.ToTable("mail_channel_res_groups_rel", tb => tb.HasComment("RELATION BETWEEN mail_channel AND res_groups"));
                        j.HasIndex(new[] { "ResGroupsId", "MailChannelId" }, "mail_channel_res_groups_rel_res_groups_id_mail_channel_id_idx");
                        j.IndexerProperty<int>("MailChannelId").HasColumnName("mail_channel_id");
                        j.IndexerProperty<int>("ResGroupsId").HasColumnName("res_groups_id");
                    });
        });

        modelBuilder.Entity<MailChannelMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_channel_member_pkey");

            entity.ToTable("mail_channel_member", tb => tb.HasComment("Listeners of a Channel"));

            entity.HasIndex(e => e.GuestId, "mail_channel_member_guest_id_index");

            entity.HasIndex(e => new { e.ChannelId, e.GuestId }, "mail_channel_member_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => e.PartnerId, "mail_channel_member_partner_id_index");

            entity.HasIndex(e => new { e.ChannelId, e.PartnerId }, "mail_channel_member_partner_unique")
                .IsUnique()
                .HasFilter("(partner_id IS NOT NULL)");

            entity.HasIndex(e => new { e.ChannelId, e.PartnerId, e.SeenMessageId }, "mail_channel_member_seen_message_id_idx");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChannelId)
                .HasComment("Channel")
                .HasColumnName("channel_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomChannelName)
                .HasComment("Custom channel name")
                .HasColumnType("character varying")
                .HasColumnName("custom_channel_name");
            entity.Property(e => e.FetchedMessageId)
                .HasComment("Last Fetched")
                .HasColumnName("fetched_message_id");
            entity.Property(e => e.FoldState)
                .HasComment("Conversation Fold State")
                .HasColumnType("character varying")
                .HasColumnName("fold_state");
            entity.Property(e => e.GuestId)
                .HasComment("Guest")
                .HasColumnName("guest_id");
            entity.Property(e => e.IsMinimized)
                .HasComment("Conversation is minimized")
                .HasColumnName("is_minimized");
            entity.Property(e => e.IsPinned)
                .HasComment("Is pinned on the interface")
                .HasColumnName("is_pinned");
            entity.Property(e => e.LastInterestDt)
                .HasComment("Last Interest")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_interest_dt");
            entity.Property(e => e.LastSeenDt)
                .HasComment("Last seen date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_seen_dt");
            entity.Property(e => e.PartnerId)
                .HasComment("Recipient")
                .HasColumnName("partner_id");
            entity.Property(e => e.RtcInvitingSessionId)
                .HasComment("Ringing session")
                .HasColumnName("rtc_inviting_session_id");
            entity.Property(e => e.SeenMessageId)
                .HasComment("Last Seen")
                .HasColumnName("seen_message_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.MailChannelMembers)
                .HasForeignKey(d => d.ChannelId)
                .HasConstraintName("mail_channel_member_channel_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailChannelMemberCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_create_uid_fkey");

            entity.HasOne(d => d.FetchedMessage).WithMany(p => p.MailChannelMemberFetchedMessages)
                .HasForeignKey(d => d.FetchedMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_fetched_message_id_fkey");

            entity.HasOne(d => d.Guest).WithMany(p => p.MailChannelMembers)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_channel_member_guest_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.MailChannelMembers)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_channel_member_partner_id_fkey");

            entity.HasOne(d => d.RtcInvitingSession).WithMany(p => p.MailChannelMembers)
                .HasForeignKey(d => d.RtcInvitingSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_rtc_inviting_session_id_fkey");

            entity.HasOne(d => d.SeenMessage).WithMany(p => p.MailChannelMemberSeenMessages)
                .HasForeignKey(d => d.SeenMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_seen_message_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailChannelMemberWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_write_uid_fkey");
        });

        modelBuilder.Entity<MailChannelRtcSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_channel_rtc_session_pkey");

            entity.ToTable("mail_channel_rtc_session", tb => tb.HasComment("Mail RTC session"));

            entity.HasIndex(e => e.ChannelMemberId, "mail_channel_rtc_session_channel_member_unique").IsUnique();

            entity.HasIndex(e => e.WriteDate, "mail_channel_rtc_session_write_date_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChannelId)
                .HasComment("Channel")
                .HasColumnName("channel_id");
            entity.Property(e => e.ChannelMemberId)
                .HasComment("Channel Member")
                .HasColumnName("channel_member_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsCameraOn)
                .HasComment("Is sending user video")
                .HasColumnName("is_camera_on");
            entity.Property(e => e.IsDeaf)
                .HasComment("Has disabled incoming sound")
                .HasColumnName("is_deaf");
            entity.Property(e => e.IsMuted)
                .HasComment("Is microphone muted")
                .HasColumnName("is_muted");
            entity.Property(e => e.IsScreenSharingOn)
                .HasComment("Is sharing the screen")
                .HasColumnName("is_screen_sharing_on");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.MailChannelRtcSessions)
                .HasForeignKey(d => d.ChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_rtc_session_channel_id_fkey");

            entity.HasOne(d => d.ChannelMember).WithOne(p => p.MailChannelRtcSession)
                .HasForeignKey<MailChannelRtcSession>(d => d.ChannelMemberId)
                .HasConstraintName("mail_channel_rtc_session_channel_member_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailChannelRtcSessionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_rtc_session_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailChannelRtcSessionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_rtc_session_write_uid_fkey");
        });

        modelBuilder.Entity<MailComposeMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_compose_message_pkey");

            entity.ToTable("mail_compose_message", tb => tb.HasComment("Email composition wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveDomain)
                .HasComment("Active domain")
                .HasColumnName("active_domain");
            entity.Property(e => e.AuthorId)
                .HasComment("Author")
                .HasColumnName("author_id");
            entity.Property(e => e.AutoDelete)
                .HasComment("Delete Emails")
                .HasColumnName("auto_delete");
            entity.Property(e => e.AutoDeleteMessage)
                .HasComment("Delete Message Copy")
                .HasColumnName("auto_delete_message");
            entity.Property(e => e.Body)
                .HasComment("Contents")
                .HasColumnName("body");
            entity.Property(e => e.CampaignId)
                .HasComment("Mass Mailing Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.CompositionMode)
                .HasComment("Composition mode")
                .HasColumnType("character varying")
                .HasColumnName("composition_mode");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmailAddSignature)
                .HasComment("Email Add Signature")
                .HasColumnName("email_add_signature");
            entity.Property(e => e.EmailFrom)
                .HasComment("From")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.EmailLayoutXmlid)
                .HasComment("Email Notification Layout")
                .HasColumnType("character varying")
                .HasColumnName("email_layout_xmlid");
            entity.Property(e => e.IsLog)
                .HasComment("Log as Internal Note")
                .HasColumnName("is_log");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.MailActivityTypeId)
                .HasComment("Mail Activity Type")
                .HasColumnName("mail_activity_type_id");
            entity.Property(e => e.MailServerId)
                .HasComment("Outgoing mail server")
                .HasColumnName("mail_server_id");
            entity.Property(e => e.MassMailingId)
                .HasComment("Mass Mailing")
                .HasColumnName("mass_mailing_id");
            entity.Property(e => e.MassMailingName)
                .HasComment("Mass Mailing Name")
                .HasColumnType("character varying")
                .HasColumnName("mass_mailing_name");
            entity.Property(e => e.MessageType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("message_type");
            entity.Property(e => e.Model)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.Notify)
                .HasComment("Notify followers")
                .HasColumnName("notify");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Message")
                .HasColumnName("parent_id");
            entity.Property(e => e.RecordName)
                .HasComment("Message Record Name")
                .HasColumnType("character varying")
                .HasColumnName("record_name");
            entity.Property(e => e.ReplyTo)
                .HasComment("Reply To")
                .HasColumnType("character varying")
                .HasColumnName("reply_to");
            entity.Property(e => e.ReplyToForceNew)
                .HasComment("Considers answers as new thread")
                .HasColumnName("reply_to_force_new");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.SubtypeId)
                .HasComment("Subtype")
                .HasColumnName("subtype_id");
            entity.Property(e => e.TemplateId)
                .HasComment("Use template")
                .HasColumnName("template_id");
            entity.Property(e => e.UseActiveDomain)
                .HasComment("Use active domain")
                .HasColumnName("use_active_domain");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Author).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_author_id_fkey");

            entity.HasOne(d => d.Campaign).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_campaign_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailComposeMessageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_create_uid_fkey");

            entity.HasOne(d => d.MailActivityType).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.MailActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_mail_activity_type_id_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_mail_server_id_fkey");

            entity.HasOne(d => d.MassMailing).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.MassMailingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_compose_message_mass_mailing_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_parent_id_fkey");

            entity.HasOne(d => d.Subtype).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.SubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_subtype_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailComposeMessageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_write_uid_fkey");

            entity.HasMany(d => d.Attachments).WithMany(p => p.Wizards)
                .UsingEntity<Dictionary<string, object>>(
                    "MailComposeMessageIrAttachmentsRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("mail_compose_message_ir_attachments_rel_attachment_id_fkey"),
                    l => l.HasOne<MailComposeMessage>().WithMany()
                        .HasForeignKey("WizardId")
                        .HasConstraintName("mail_compose_message_ir_attachments_rel_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizardId", "AttachmentId").HasName("mail_compose_message_ir_attachments_rel_pkey");
                        j.ToTable("mail_compose_message_ir_attachments_rel", tb => tb.HasComment("RELATION BETWEEN mail_compose_message AND ir_attachment"));
                        j.HasIndex(new[] { "AttachmentId", "WizardId" }, "mail_compose_message_ir_attachments_attachment_id_wizard_id_idx");
                        j.IndexerProperty<int>("WizardId").HasColumnName("wizard_id");
                        j.IndexerProperty<int>("AttachmentId").HasColumnName("attachment_id");
                    });

            entity.HasMany(d => d.MailingLists).WithMany(p => p.MailComposeMessages)
                .UsingEntity<Dictionary<string, object>>(
                    "MailComposeMessageMailingListRel",
                    r => r.HasOne<MailingList>().WithMany()
                        .HasForeignKey("MailingListId")
                        .HasConstraintName("mail_compose_message_mailing_list_rel_mailing_list_id_fkey"),
                    l => l.HasOne<MailComposeMessage>().WithMany()
                        .HasForeignKey("MailComposeMessageId")
                        .HasConstraintName("mail_compose_message_mailing_list__mail_compose_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailComposeMessageId", "MailingListId").HasName("mail_compose_message_mailing_list_rel_pkey");
                        j.ToTable("mail_compose_message_mailing_list_rel", tb => tb.HasComment("RELATION BETWEEN mail_compose_message AND mailing_list"));
                        j.HasIndex(new[] { "MailingListId", "MailComposeMessageId" }, "mail_compose_message_mailing__mailing_list_id_mail_compose__idx");
                        j.IndexerProperty<int>("MailComposeMessageId").HasColumnName("mail_compose_message_id");
                        j.IndexerProperty<int>("MailingListId").HasColumnName("mailing_list_id");
                    });

            entity.HasMany(d => d.Partners).WithMany(p => p.Wizards)
                .UsingEntity<Dictionary<string, object>>(
                    "MailComposeMessageResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("mail_compose_message_res_partner_rel_partner_id_fkey"),
                    l => l.HasOne<MailComposeMessage>().WithMany()
                        .HasForeignKey("WizardId")
                        .HasConstraintName("mail_compose_message_res_partner_rel_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizardId", "PartnerId").HasName("mail_compose_message_res_partner_rel_pkey");
                        j.ToTable("mail_compose_message_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN mail_compose_message AND res_partner"));
                        j.HasIndex(new[] { "PartnerId", "WizardId" }, "mail_compose_message_res_partner_rel_partner_id_wizard_id_idx");
                        j.IndexerProperty<int>("WizardId").HasColumnName("wizard_id");
                        j.IndexerProperty<int>("PartnerId").HasColumnName("partner_id");
                    });
        });

        modelBuilder.Entity<MailFollower>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_followers_pkey");

            entity.ToTable("mail_followers", tb => tb.HasComment("Document Followers"));

            entity.HasIndex(e => new { e.ResModel, e.ResId, e.PartnerId }, "mail_followers_mail_followers_res_partner_res_model_id_uniq").IsUnique();

            entity.HasIndex(e => e.PartnerId, "mail_followers_partner_id_index");

            entity.HasIndex(e => e.ResId, "mail_followers_res_id_index");

            entity.HasIndex(e => e.ResModel, "mail_followers_res_model_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PartnerId)
                .HasComment("Related Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Related Document Model Name")
                .HasColumnType("character varying")
                .HasColumnName("res_model");

            entity.HasOne(d => d.Partner).WithMany(p => p.MailFollowers)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("mail_followers_partner_id_fkey");

            entity.HasMany(d => d.MailMessageSubtypes).WithMany(p => p.MailFollowers)
                .UsingEntity<Dictionary<string, object>>(
                    "MailFollowersMailMessageSubtypeRel",
                    r => r.HasOne<MailMessageSubtype>().WithMany()
                        .HasForeignKey("MailMessageSubtypeId")
                        .HasConstraintName("mail_followers_mail_message_subtyp_mail_message_subtype_id_fkey"),
                    l => l.HasOne<MailFollower>().WithMany()
                        .HasForeignKey("MailFollowersId")
                        .HasConstraintName("mail_followers_mail_message_subtype_rel_mail_followers_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailFollowersId", "MailMessageSubtypeId").HasName("mail_followers_mail_message_subtype_rel_pkey");
                        j.ToTable("mail_followers_mail_message_subtype_rel", tb => tb.HasComment("RELATION BETWEEN mail_followers AND mail_message_subtype"));
                        j.HasIndex(new[] { "MailMessageSubtypeId", "MailFollowersId" }, "mail_followers_mail_message_s_mail_message_subtype_id_mail__idx");
                        j.IndexerProperty<int>("MailFollowersId").HasColumnName("mail_followers_id");
                        j.IndexerProperty<int>("MailMessageSubtypeId").HasColumnName("mail_message_subtype_id");
                    });
        });

        modelBuilder.Entity<MailGatewayAllowed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_gateway_allowed_pkey");

            entity.ToTable("mail_gateway_allowed", tb => tb.HasComment("Mail Gateway Allowed"));

            entity.HasIndex(e => e.EmailNormalized, "mail_gateway_allowed_email_normalized_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email Address")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EmailNormalized)
                .HasComment("Normalized Email")
                .HasColumnType("character varying")
                .HasColumnName("email_normalized");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailGatewayAllowedCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_gateway_allowed_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailGatewayAllowedWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_gateway_allowed_write_uid_fkey");
        });

        modelBuilder.Entity<MailGuest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_guest_pkey");

            entity.ToTable("mail_guest", tb => tb.HasComment("Guest"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Access Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Timezone)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("timezone");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Country).WithMany(p => p.MailGuests)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_guest_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailGuestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_guest_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailGuestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_guest_write_uid_fkey");
        });

        modelBuilder.Entity<MailIceServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_ice_server_pkey");

            entity.ToTable("mail_ice_server", tb => tb.HasComment("ICE server"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Credential)
                .HasComment("Credential")
                .HasColumnType("character varying")
                .HasColumnName("credential");
            entity.Property(e => e.ServerType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("server_type");
            entity.Property(e => e.Uri)
                .HasComment("URI")
                .HasColumnType("character varying")
                .HasColumnName("uri");
            entity.Property(e => e.Username)
                .HasComment("Username")
                .HasColumnType("character varying")
                .HasColumnName("username");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailIceServerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_ice_server_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailIceServerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_ice_server_write_uid_fkey");
        });

        modelBuilder.Entity<MailLinkPreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_link_preview_pkey");

            entity.ToTable("mail_link_preview", tb => tb.HasComment("Store link preview data"));

            entity.HasIndex(e => e.CreateDate, "mail_link_preview_create_date_index");

            entity.HasIndex(e => e.MessageId, "mail_link_preview_message_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Create Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ImageMimetype)
                .HasComment("Image MIME type")
                .HasColumnType("character varying")
                .HasColumnName("image_mimetype");
            entity.Property(e => e.MessageId)
                .HasComment("Message")
                .HasColumnName("message_id");
            entity.Property(e => e.OgDescription)
                .HasComment("Description")
                .HasColumnName("og_description");
            entity.Property(e => e.OgImage)
                .HasComment("Image")
                .HasColumnType("character varying")
                .HasColumnName("og_image");
            entity.Property(e => e.OgMimetype)
                .HasComment("MIME type")
                .HasColumnType("character varying")
                .HasColumnName("og_mimetype");
            entity.Property(e => e.OgTitle)
                .HasComment("Title")
                .HasColumnType("character varying")
                .HasColumnName("og_title");
            entity.Property(e => e.OgType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("og_type");
            entity.Property(e => e.SourceUrl)
                .HasComment("URL")
                .HasColumnType("character varying")
                .HasColumnName("source_url");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailLinkPreviewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_link_preview_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.MailLinkPreviews)
                .HasForeignKey(d => d.MessageId)
                .HasConstraintName("mail_link_preview_message_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailLinkPreviewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_link_preview_write_uid_fkey");
        });

        modelBuilder.Entity<MailMail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_mail_pkey");

            entity.ToTable("mail_mail", tb => tb.HasComment("Outgoing Mails"));

            entity.HasIndex(e => e.MailMessageId, "mail_mail_mail_message_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AutoDelete)
                .HasComment("Auto Delete")
                .HasColumnName("auto_delete");
            entity.Property(e => e.BodyHtml)
                .HasComment("Text Contents")
                .HasColumnName("body_html");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmailCc)
                .HasComment("Cc")
                .HasColumnType("character varying")
                .HasColumnName("email_cc");
            entity.Property(e => e.EmailTo)
                .HasComment("To")
                .HasColumnName("email_to");
            entity.Property(e => e.FailureReason)
                .HasComment("Failure Reason")
                .HasColumnName("failure_reason");
            entity.Property(e => e.FailureType)
                .HasComment("Failure type")
                .HasColumnType("character varying")
                .HasColumnName("failure_type");
            entity.Property(e => e.FetchmailServerId)
                .HasComment("Inbound Mail Server")
                .HasColumnName("fetchmail_server_id");
            entity.Property(e => e.Headers)
                .HasComment("Headers")
                .HasColumnName("headers");
            entity.Property(e => e.IsNotification)
                .HasComment("Notification Email")
                .HasColumnName("is_notification");
            entity.Property(e => e.MailMessageId)
                .HasComment("Message")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.MailingId)
                .HasComment("Mass Mailing")
                .HasColumnName("mailing_id");
            entity.Property(e => e.References)
                .HasComment("References")
                .HasColumnName("references");
            entity.Property(e => e.ScheduledDate)
                .HasComment("Scheduled Send Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.ToDelete)
                .HasComment("To Delete")
                .HasColumnName("to_delete");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailMailCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_mail_create_uid_fkey");

            entity.HasOne(d => d.FetchmailServer).WithMany(p => p.MailMails)
                .HasForeignKey(d => d.FetchmailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_mail_fetchmail_server_id_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailMails)
                .HasForeignKey(d => d.MailMessageId)
                .HasConstraintName("mail_mail_mail_message_id_fkey");

            entity.HasOne(d => d.Mailing).WithMany(p => p.MailMails)
                .HasForeignKey(d => d.MailingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_mail_mailing_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailMailWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_mail_write_uid_fkey");

            entity.HasMany(d => d.ResPartners).WithMany(p => p.MailMails)
                .UsingEntity<Dictionary<string, object>>(
                    "MailMailResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_mail_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailMail>().WithMany()
                        .HasForeignKey("MailMailId")
                        .HasConstraintName("mail_mail_res_partner_rel_mail_mail_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailMailId", "ResPartnerId").HasName("mail_mail_res_partner_rel_pkey");
                        j.ToTable("mail_mail_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN mail_mail AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "MailMailId" }, "mail_mail_res_partner_rel_res_partner_id_mail_mail_id_idx");
                        j.IndexerProperty<int>("MailMailId").HasColumnName("mail_mail_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<MailMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_pkey");

            entity.ToTable("mail_message", tb => tb.HasComment("Message"));

            entity.HasIndex(e => e.AuthorId, "mail_message_author_id_index");

            entity.HasIndex(e => new { e.Date, e.ResId, e.Id }, "mail_message_date_res_id_id_for_burndown_chart").HasFilter("(((model)::text = 'project.task'::text) AND ((message_type)::text = 'notification'::text))");

            entity.HasIndex(e => e.MailActivityTypeId, "mail_message_mail_activity_type_id_index");

            entity.HasIndex(e => e.MessageId, "mail_message_message_id_index");

            entity.HasIndex(e => new { e.Model, e.ResId, e.Id }, "mail_message_model_res_id_id_idx");

            entity.HasIndex(e => new { e.Model, e.ResId }, "mail_message_model_res_id_idx");

            entity.HasIndex(e => e.ParentId, "mail_message_parent_id_index").HasFilter("(parent_id IS NOT NULL)");

            entity.HasIndex(e => e.SubtypeId, "mail_message_subtype_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthorGuestId)
                .HasComment("Guest")
                .HasColumnName("author_guest_id");
            entity.Property(e => e.AuthorId)
                .HasComment("Author")
                .HasColumnName("author_id");
            entity.Property(e => e.Body)
                .HasComment("Contents")
                .HasColumnName("body");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.EmailAddSignature)
                .HasComment("Email Add Signature")
                .HasColumnName("email_add_signature");
            entity.Property(e => e.EmailFrom)
                .HasComment("From")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.EmailLayoutXmlid)
                .HasComment("Layout")
                .HasColumnType("character varying")
                .HasColumnName("email_layout_xmlid");
            entity.Property(e => e.IsInternal)
                .HasComment("Employee Only")
                .HasColumnName("is_internal");
            entity.Property(e => e.MailActivityTypeId)
                .HasComment("Mail Activity Type")
                .HasColumnName("mail_activity_type_id");
            entity.Property(e => e.MailServerId)
                .HasComment("Outgoing mail server")
                .HasColumnName("mail_server_id");
            entity.Property(e => e.MessageId)
                .HasComment("Message-Id")
                .HasColumnType("character varying")
                .HasColumnName("message_id");
            entity.Property(e => e.MessageType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("message_type");
            entity.Property(e => e.Model)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Message")
                .HasColumnName("parent_id");
            entity.Property(e => e.RecordName)
                .HasComment("Message Record Name")
                .HasColumnType("character varying")
                .HasColumnName("record_name");
            entity.Property(e => e.ReplyTo)
                .HasComment("Reply-To")
                .HasColumnType("character varying")
                .HasColumnName("reply_to");
            entity.Property(e => e.ReplyToForceNew)
                .HasComment("No threading for answers")
                .HasColumnName("reply_to_force_new");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.SubtypeId)
                .HasComment("Subtype")
                .HasColumnName("subtype_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AuthorGuest).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.AuthorGuestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_author_guest_id_fkey");

            entity.HasOne(d => d.Author).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_author_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailMessageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_create_uid_fkey");

            entity.HasOne(d => d.MailActivityType).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.MailActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_mail_activity_type_id_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_mail_server_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_parent_id_fkey");

            entity.HasOne(d => d.Subtype).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.SubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailMessageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_write_uid_fkey");

            entity.HasMany(d => d.Attachments).WithMany(p => p.Messages)
                .UsingEntity<Dictionary<string, object>>(
                    "MessageAttachmentRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("message_attachment_rel_attachment_id_fkey"),
                    l => l.HasOne<MailMessage>().WithMany()
                        .HasForeignKey("MessageId")
                        .HasConstraintName("message_attachment_rel_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MessageId", "AttachmentId").HasName("message_attachment_rel_pkey");
                        j.ToTable("message_attachment_rel", tb => tb.HasComment("RELATION BETWEEN mail_message AND ir_attachment"));
                        j.HasIndex(new[] { "AttachmentId", "MessageId" }, "message_attachment_rel_attachment_id_message_id_idx");
                        j.IndexerProperty<int>("MessageId").HasColumnName("message_id");
                        j.IndexerProperty<int>("AttachmentId").HasColumnName("attachment_id");
                    });

            entity.HasMany(d => d.ResPartners).WithMany(p => p.MailMessagesNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "MailMessageResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_message_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailMessage>().WithMany()
                        .HasForeignKey("MailMessageId")
                        .HasConstraintName("mail_message_res_partner_rel_mail_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailMessageId", "ResPartnerId").HasName("mail_message_res_partner_rel_pkey");
                        j.ToTable("mail_message_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN mail_message AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "MailMessageId" }, "mail_message_res_partner_rel_res_partner_id_mail_message_id_idx");
                        j.IndexerProperty<int>("MailMessageId").HasColumnName("mail_message_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });

            entity.HasMany(d => d.ResPartnersNavigation).WithMany(p => p.MailMessages1)
                .UsingEntity<Dictionary<string, object>>(
                    "MailMessageResPartnerStarredRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_message_res_partner_starred_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailMessage>().WithMany()
                        .HasForeignKey("MailMessageId")
                        .HasConstraintName("mail_message_res_partner_starred_rel_mail_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailMessageId", "ResPartnerId").HasName("mail_message_res_partner_starred_rel_pkey");
                        j.ToTable("mail_message_res_partner_starred_rel", tb => tb.HasComment("RELATION BETWEEN mail_message AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "MailMessageId" }, "mail_message_res_partner_star_res_partner_id_mail_message_i_idx");
                        j.IndexerProperty<int>("MailMessageId").HasColumnName("mail_message_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<MailMessageReaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_reaction_pkey");

            entity.ToTable("mail_message_reaction", tb => tb.HasComment("Message Reaction"));

            entity.HasIndex(e => new { e.MessageId, e.Content, e.GuestId }, "mail_message_reaction_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => new { e.MessageId, e.Content, e.PartnerId }, "mail_message_reaction_partner_unique")
                .IsUnique()
                .HasFilter("(partner_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content)
                .HasComment("Content")
                .HasColumnType("character varying")
                .HasColumnName("content");
            entity.Property(e => e.GuestId)
                .HasComment("Reacting Guest")
                .HasColumnName("guest_id");
            entity.Property(e => e.MessageId)
                .HasComment("Message")
                .HasColumnName("message_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Reacting Partner")
                .HasColumnName("partner_id");

            entity.HasOne(d => d.Guest).WithMany(p => p.MailMessageReactions)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_message_reaction_guest_id_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.MailMessageReactions)
                .HasForeignKey(d => d.MessageId)
                .HasConstraintName("mail_message_reaction_message_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.MailMessageReactions)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_message_reaction_partner_id_fkey");
        });

        modelBuilder.Entity<MailMessageSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_schedule_pkey");

            entity.ToTable("mail_message_schedule", tb => tb.HasComment("Scheduled Messages"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailMessageId)
                .HasComment("Message")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.NotificationParameters)
                .HasComment("Notification Parameter")
                .HasColumnName("notification_parameters");
            entity.Property(e => e.ScheduledDatetime)
                .HasComment("Scheduled Send Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_datetime");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailMessageScheduleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_schedule_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailMessageSchedules)
                .HasForeignKey(d => d.MailMessageId)
                .HasConstraintName("mail_message_schedule_mail_message_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailMessageScheduleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_schedule_write_uid_fkey");
        });

        modelBuilder.Entity<MailMessageSubtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_subtype_pkey");

            entity.ToTable("mail_message_subtype", tb => tb.HasComment("Message subtypes"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Default)
                .HasComment("Default")
                .HasColumnName("default");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Hidden)
                .HasComment("Hidden")
                .HasColumnName("hidden");
            entity.Property(e => e.Internal)
                .HasComment("Internal Only")
                .HasColumnName("internal");
            entity.Property(e => e.Name)
                .HasComment("Message Type")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.RelationField)
                .HasComment("Relation field")
                .HasColumnType("character varying")
                .HasColumnName("relation_field");
            entity.Property(e => e.ResModel)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TrackRecipients)
                .HasComment("Track Recipients")
                .HasColumnName("track_recipients");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailMessageSubtypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailMessageSubtypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_write_uid_fkey");
        });

        modelBuilder.Entity<MailNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_notification_pkey");

            entity.ToTable("mail_notification", tb => tb.HasComment("Message Notifications"));

            entity.HasIndex(e => new { e.AuthorId, e.NotificationStatus }, "mail_notification_author_id_notification_status_failure").HasFilter("((notification_status)::text = ANY ((ARRAY['bounce'::character varying, 'exception'::character varying])::text[]))");

            entity.HasIndex(e => e.IsRead, "mail_notification_is_read_index");

            entity.HasIndex(e => e.LetterId, "mail_notification_letter_id_index").HasFilter("(letter_id IS NOT NULL)");

            entity.HasIndex(e => e.MailMailId, "mail_notification_mail_mail_id_index");

            entity.HasIndex(e => e.MailMessageId, "mail_notification_mail_message_id_index");

            entity.HasIndex(e => e.NotificationStatus, "mail_notification_notification_status_index");

            entity.HasIndex(e => e.NotificationType, "mail_notification_notification_type_index");

            entity.HasIndex(e => e.ResPartnerId, "mail_notification_res_partner_id_index");

            entity.HasIndex(e => new { e.ResPartnerId, e.IsRead, e.NotificationStatus, e.MailMessageId }, "mail_notification_res_partner_id_is_read_notification_status_ma");

            entity.HasIndex(e => e.SmsId, "mail_notification_sms_id_index").HasFilter("(sms_id IS NOT NULL)");

            entity.HasIndex(e => new { e.MailMessageId, e.ResPartnerId }, "unique_mail_message_id_res_partner_id_if_set")
                .IsUnique()
                .HasFilter("(res_partner_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthorId)
                .HasComment("Author")
                .HasColumnName("author_id");
            entity.Property(e => e.FailureReason)
                .HasComment("Failure reason")
                .HasColumnName("failure_reason");
            entity.Property(e => e.FailureType)
                .HasComment("Failure type")
                .HasColumnType("character varying")
                .HasColumnName("failure_type");
            entity.Property(e => e.IsRead)
                .HasComment("Is Read")
                .HasColumnName("is_read");
            entity.Property(e => e.LetterId)
                .HasComment("Snailmail Letter")
                .HasColumnName("letter_id");
            entity.Property(e => e.MailMailId)
                .HasComment("Mail")
                .HasColumnName("mail_mail_id");
            entity.Property(e => e.MailMessageId)
                .HasComment("Message")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.NotificationStatus)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("notification_status");
            entity.Property(e => e.NotificationType)
                .HasComment("Notification Type")
                .HasColumnType("character varying")
                .HasColumnName("notification_type");
            entity.Property(e => e.ReadDate)
                .HasComment("Read Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("read_date");
            entity.Property(e => e.ResPartnerId)
                .HasComment("Recipient")
                .HasColumnName("res_partner_id");
            entity.Property(e => e.SmsId)
                .HasComment("SMS")
                .HasColumnName("sms_id");
            entity.Property(e => e.SmsNumber)
                .HasComment("SMS Number")
                .HasColumnType("character varying")
                .HasColumnName("sms_number");

            entity.HasOne(d => d.Author).WithMany(p => p.MailNotificationAuthors)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_notification_author_id_fkey");

            entity.HasOne(d => d.Letter).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.LetterId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_notification_letter_id_fkey");

            entity.HasOne(d => d.MailMail).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.MailMailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_notification_mail_mail_id_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.MailMessageId)
                .HasConstraintName("mail_notification_mail_message_id_fkey");

            entity.HasOne(d => d.ResPartner).WithMany(p => p.MailNotificationResPartners)
                .HasForeignKey(d => d.ResPartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_notification_res_partner_id_fkey");

            entity.HasOne(d => d.Sms).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.SmsId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_notification_sms_id_fkey");
        });

        modelBuilder.Entity<MailResendMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_resend_message_pkey");

            entity.ToTable("mail_resend_message", tb => tb.HasComment("Email resend wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailMessageId)
                .HasComment("Message")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailResendMessageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_message_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailResendMessages)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_message_mail_message_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailResendMessageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_message_write_uid_fkey");

            entity.HasMany(d => d.MailNotifications).WithMany(p => p.MailResendMessages)
                .UsingEntity<Dictionary<string, object>>(
                    "MailNotificationMailResendMessageRel",
                    r => r.HasOne<MailNotification>().WithMany()
                        .HasForeignKey("MailNotificationId")
                        .HasConstraintName("mail_notification_mail_resend_message_mail_notification_id_fkey"),
                    l => l.HasOne<MailResendMessage>().WithMany()
                        .HasForeignKey("MailResendMessageId")
                        .HasConstraintName("mail_notification_mail_resend_messa_mail_resend_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailResendMessageId", "MailNotificationId").HasName("mail_notification_mail_resend_message_rel_pkey");
                        j.ToTable("mail_notification_mail_resend_message_rel", tb => tb.HasComment("RELATION BETWEEN mail_resend_message AND mail_notification"));
                        j.HasIndex(new[] { "MailNotificationId", "MailResendMessageId" }, "mail_notification_mail_resend_mail_notification_id_mail_res_idx");
                        j.IndexerProperty<int>("MailResendMessageId").HasColumnName("mail_resend_message_id");
                        j.IndexerProperty<int>("MailNotificationId").HasColumnName("mail_notification_id");
                    });
        });

        modelBuilder.Entity<MailResendPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_resend_partner_pkey");

            entity.ToTable("mail_resend_partner", tb => tb.HasComment("Partner with additional information for mail resend"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Message)
                .HasComment("Error message")
                .HasColumnType("character varying")
                .HasColumnName("message");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.Resend)
                .HasComment("Try Again")
                .HasColumnName("resend");
            entity.Property(e => e.ResendWizardId)
                .HasComment("Resend wizard")
                .HasColumnName("resend_wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailResendPartnerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_partner_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.MailResendPartners)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("mail_resend_partner_partner_id_fkey");

            entity.HasOne(d => d.ResendWizard).WithMany(p => p.MailResendPartners)
                .HasForeignKey(d => d.ResendWizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_partner_resend_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailResendPartnerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_partner_write_uid_fkey");
        });

        modelBuilder.Entity<MailShortcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_shortcode_pkey");

            entity.ToTable("mail_shortcode", tb => tb.HasComment("Canned Response / Shortcode"));

            entity.HasIndex(e => e.Source, "mail_shortcode_source_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("description");
            entity.Property(e => e.Source)
                .HasComment("Shortcut")
                .HasColumnType("character varying")
                .HasColumnName("source");
            entity.Property(e => e.Substitution)
                .HasComment("Substitution")
                .HasColumnName("substitution");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailShortcodeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_shortcode_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailShortcodeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_shortcode_write_uid_fkey");
        });

        modelBuilder.Entity<MailTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_template_pkey");

            entity.ToTable("mail_template", tb => tb.HasComment("Email Templates"));

            entity.HasIndex(e => e.Model, "mail_template_model_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AutoDelete)
                .HasComment("Auto Delete")
                .HasColumnName("auto_delete");
            entity.Property(e => e.BodyHtml)
                .HasComment("Body")
                .HasColumnType("jsonb")
                .HasColumnName("body_html");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Template description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.EmailCc)
                .HasComment("Cc")
                .HasColumnType("character varying")
                .HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom)
                .HasComment("From")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.EmailTo)
                .HasComment("To (Emails)")
                .HasColumnType("character varying")
                .HasColumnName("email_to");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.MailServerId)
                .HasComment("Outgoing Mail Server")
                .HasColumnName("mail_server_id");
            entity.Property(e => e.Model)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.ModelId)
                .HasComment("Applies to")
                .HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PartnerTo)
                .HasComment("To (Partners)")
                .HasColumnType("character varying")
                .HasColumnName("partner_to");
            entity.Property(e => e.RefIrActWindow)
                .HasComment("Sidebar action")
                .HasColumnName("ref_ir_act_window");
            entity.Property(e => e.ReplyTo)
                .HasComment("Reply To")
                .HasColumnType("character varying")
                .HasColumnName("reply_to");
            entity.Property(e => e.ReportName)
                .HasComment("Report Filename")
                .HasColumnType("jsonb")
                .HasColumnName("report_name");
            entity.Property(e => e.ReportTemplate)
                .HasComment("Optional report to print and attach")
                .HasColumnName("report_template");
            entity.Property(e => e.ScheduledDate)
                .HasComment("Scheduled Date")
                .HasColumnType("character varying")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("jsonb")
                .HasColumnName("subject");
            entity.Property(e => e.TemplateFs)
                .HasComment("Template Filename")
                .HasColumnType("character varying")
                .HasColumnName("template_fs");
            entity.Property(e => e.UseDefaultTo)
                .HasComment("Default recipients")
                .HasColumnName("use_default_to");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_create_uid_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_mail_server_id_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_model_id_fkey");

            entity.HasOne(d => d.RefIrActWindowNavigation).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.RefIrActWindow)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_ref_ir_act_window_fkey");

            entity.HasOne(d => d.ReportTemplateNavigation).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.ReportTemplate)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_report_template_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_write_uid_fkey");

            entity.HasMany(d => d.Attachments).WithMany(p => p.EmailTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "EmailTemplateAttachmentRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("email_template_attachment_rel_attachment_id_fkey"),
                    l => l.HasOne<MailTemplate>().WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .HasConstraintName("email_template_attachment_rel_email_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("EmailTemplateId", "AttachmentId").HasName("email_template_attachment_rel_pkey");
                        j.ToTable("email_template_attachment_rel", tb => tb.HasComment("RELATION BETWEEN mail_template AND ir_attachment"));
                        j.HasIndex(new[] { "AttachmentId", "EmailTemplateId" }, "email_template_attachment_rel_attachment_id_email_template__idx");
                        j.IndexerProperty<int>("EmailTemplateId").HasColumnName("email_template_id");
                        j.IndexerProperty<int>("AttachmentId").HasColumnName("attachment_id");
                    });
        });

        modelBuilder.Entity<MailTemplatePreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_template_preview_pkey");

            entity.ToTable("mail_template_preview", tb => tb.HasComment("Email Template Preview"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ErrorMsg)
                .HasComment("Error Message")
                .HasColumnType("character varying")
                .HasColumnName("error_msg");
            entity.Property(e => e.Lang)
                .HasComment("Template Preview Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.MailTemplateId)
                .HasComment("Related Mail Template")
                .HasColumnName("mail_template_id");
            entity.Property(e => e.ResourceRef)
                .HasComment("Record")
                .HasColumnType("character varying")
                .HasColumnName("resource_ref");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailTemplatePreviewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_preview_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.MailTemplatePreviews)
                .HasForeignKey(d => d.MailTemplateId)
                .HasConstraintName("mail_template_preview_mail_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailTemplatePreviewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_preview_write_uid_fkey");
        });

        modelBuilder.Entity<MailTemplateReset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_template_reset_pkey");

            entity.ToTable("mail_template_reset", tb => tb.HasComment("Mail Template Reset"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailTemplateResetCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_reset_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailTemplateResetWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_reset_write_uid_fkey");

            entity.HasMany(d => d.MailTemplates).WithMany(p => p.MailTemplateResets)
                .UsingEntity<Dictionary<string, object>>(
                    "MailTemplateMailTemplateResetRel",
                    r => r.HasOne<MailTemplate>().WithMany()
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("mail_template_mail_template_reset_rel_mail_template_id_fkey"),
                    l => l.HasOne<MailTemplateReset>().WithMany()
                        .HasForeignKey("MailTemplateResetId")
                        .HasConstraintName("mail_template_mail_template_reset_r_mail_template_reset_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailTemplateResetId", "MailTemplateId").HasName("mail_template_mail_template_reset_rel_pkey");
                        j.ToTable("mail_template_mail_template_reset_rel", tb => tb.HasComment("RELATION BETWEEN mail_template_reset AND mail_template"));
                        j.HasIndex(new[] { "MailTemplateId", "MailTemplateResetId" }, "mail_template_mail_template_r_mail_template_id_mail_templat_idx");
                        j.IndexerProperty<int>("MailTemplateResetId").HasColumnName("mail_template_reset_id");
                        j.IndexerProperty<int>("MailTemplateId").HasColumnName("mail_template_id");
                    });
        });

        modelBuilder.Entity<MailTrackingValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_tracking_value_pkey");

            entity.ToTable("mail_tracking_value", tb => tb.HasComment("Mail Tracking Value"));

            entity.HasIndex(e => e.Field, "mail_tracking_value_field_index");

            entity.HasIndex(e => e.MailMessageId, "mail_tracking_value_mail_message_id_index");

            entity.HasIndex(e => new { e.MailMessageId, e.OldValueInteger }, "mail_tracking_value_mail_message_id_old_value_integer_task_stag").HasFilter("(field = 7825)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Field)
                .HasComment("Field")
                .HasColumnName("field");
            entity.Property(e => e.FieldDesc)
                .HasComment("Field Description")
                .HasColumnType("character varying")
                .HasColumnName("field_desc");
            entity.Property(e => e.FieldType)
                .HasComment("Field Type")
                .HasColumnType("character varying")
                .HasColumnName("field_type");
            entity.Property(e => e.MailMessageId)
                .HasComment("Message ID")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.NewValueChar)
                .HasComment("New Value Char")
                .HasColumnType("character varying")
                .HasColumnName("new_value_char");
            entity.Property(e => e.NewValueDatetime)
                .HasComment("New Value Datetime")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("new_value_datetime");
            entity.Property(e => e.NewValueFloat)
                .HasComment("New Value Float")
                .HasColumnName("new_value_float");
            entity.Property(e => e.NewValueInteger)
                .HasComment("New Value Integer")
                .HasColumnName("new_value_integer");
            entity.Property(e => e.NewValueMonetary)
                .HasComment("New Value Monetary")
                .HasColumnName("new_value_monetary");
            entity.Property(e => e.NewValueText)
                .HasComment("New Value Text")
                .HasColumnName("new_value_text");
            entity.Property(e => e.OldValueChar)
                .HasComment("Old Value Char")
                .HasColumnType("character varying")
                .HasColumnName("old_value_char");
            entity.Property(e => e.OldValueDatetime)
                .HasComment("Old Value DateTime")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("old_value_datetime");
            entity.Property(e => e.OldValueFloat)
                .HasComment("Old Value Float")
                .HasColumnName("old_value_float");
            entity.Property(e => e.OldValueInteger)
                .HasComment("Old Value Integer")
                .HasColumnName("old_value_integer");
            entity.Property(e => e.OldValueMonetary)
                .HasComment("Old Value Monetary")
                .HasColumnName("old_value_monetary");
            entity.Property(e => e.OldValueText)
                .HasComment("Old Value Text")
                .HasColumnName("old_value_text");
            entity.Property(e => e.TrackingSequence)
                .HasComment("Tracking field sequence")
                .HasColumnName("tracking_sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailTrackingValueCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_tracking_value_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.MailTrackingValues)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_tracking_value_currency_id_fkey");

            entity.HasOne(d => d.FieldNavigation).WithMany(p => p.MailTrackingValues)
                .HasForeignKey(d => d.Field)
                .HasConstraintName("mail_tracking_value_field_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailTrackingValues)
                .HasForeignKey(d => d.MailMessageId)
                .HasConstraintName("mail_tracking_value_mail_message_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailTrackingValueWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_tracking_value_write_uid_fkey");
        });

        modelBuilder.Entity<MailWizardInvite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_wizard_invite_pkey");

            entity.ToTable("mail_wizard_invite", tb => tb.HasComment("Invite wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Message)
                .HasComment("Message")
                .HasColumnName("message");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.SendMail)
                .HasComment("Send Email")
                .HasColumnName("send_mail");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailWizardInviteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_wizard_invite_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailWizardInviteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_wizard_invite_write_uid_fkey");

            entity.HasMany(d => d.ResPartners).WithMany(p => p.MailWizardInvites)
                .UsingEntity<Dictionary<string, object>>(
                    "MailWizardInviteResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_wizard_invite_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailWizardInvite>().WithMany()
                        .HasForeignKey("MailWizardInviteId")
                        .HasConstraintName("mail_wizard_invite_res_partner_rel_mail_wizard_invite_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailWizardInviteId", "ResPartnerId").HasName("mail_wizard_invite_res_partner_rel_pkey");
                        j.ToTable("mail_wizard_invite_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN mail_wizard_invite AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "MailWizardInviteId" }, "mail_wizard_invite_res_partne_res_partner_id_mail_wizard_in_idx");
                        j.IndexerProperty<int>("MailWizardInviteId").HasColumnName("mail_wizard_invite_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<MailingContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_contact_pkey");

            entity.ToTable("mailing_contact", tb => tb.HasComment("Mailing Contact"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyName)
                .HasComment("Company Name")
                .HasColumnType("character varying")
                .HasColumnName("company_name");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EmailNormalized)
                .HasComment("Normalized Email")
                .HasColumnType("character varying")
                .HasColumnName("email_normalized");
            entity.Property(e => e.MessageBounce)
                .HasComment("Bounce")
                .HasColumnName("message_bounce");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile)
                .HasComment("Mobile")
                .HasColumnType("character varying")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PhoneSanitized)
                .HasComment("Sanitized Number")
                .HasColumnType("character varying")
                .HasColumnName("phone_sanitized");
            entity.Property(e => e.TitleId)
                .HasComment("Title")
                .HasColumnName("title_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Country).WithMany(p => p.MailingContacts)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingContactCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MailingContacts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Title).WithMany(p => p.MailingContacts)
                .HasForeignKey(d => d.TitleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_title_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingContactWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_write_uid_fkey");

            entity.HasMany(d => d.ResPartnerCategories).WithMany(p => p.MailingContacts)
                .UsingEntity<Dictionary<string, object>>(
                    "MailingContactResPartnerCategoryRel",
                    r => r.HasOne<ResPartnerCategory>().WithMany()
                        .HasForeignKey("ResPartnerCategoryId")
                        .HasConstraintName("mailing_contact_res_partner_catego_res_partner_category_id_fkey"),
                    l => l.HasOne<MailingContact>().WithMany()
                        .HasForeignKey("MailingContactId")
                        .HasConstraintName("mailing_contact_res_partner_category_re_mailing_contact_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailingContactId", "ResPartnerCategoryId").HasName("mailing_contact_res_partner_category_rel_pkey");
                        j.ToTable("mailing_contact_res_partner_category_rel", tb => tb.HasComment("RELATION BETWEEN mailing_contact AND res_partner_category"));
                        j.HasIndex(new[] { "ResPartnerCategoryId", "MailingContactId" }, "mailing_contact_res_partner_c_res_partner_category_id_maili_idx");
                        j.IndexerProperty<int>("MailingContactId").HasColumnName("mailing_contact_id");
                        j.IndexerProperty<int>("ResPartnerCategoryId").HasColumnName("res_partner_category_id");
                    });
        });

        modelBuilder.Entity<MailingContactImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_contact_import_pkey");

            entity.ToTable("mailing_contact_import", tb => tb.HasComment("Mailing Contact Import"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ContactList)
                .HasComment("Contact List")
                .HasColumnName("contact_list");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingContactImportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_import_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingContactImportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_import_write_uid_fkey");

            entity.HasMany(d => d.MailingLists).WithMany(p => p.MailingContactImports)
                .UsingEntity<Dictionary<string, object>>(
                    "MailingContactImportMailingListRel",
                    r => r.HasOne<MailingList>().WithMany()
                        .HasForeignKey("MailingListId")
                        .HasConstraintName("mailing_contact_import_mailing_list_rel_mailing_list_id_fkey"),
                    l => l.HasOne<MailingContactImport>().WithMany()
                        .HasForeignKey("MailingContactImportId")
                        .HasConstraintName("mailing_contact_import_mailing_l_mailing_contact_import_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailingContactImportId", "MailingListId").HasName("mailing_contact_import_mailing_list_rel_pkey");
                        j.ToTable("mailing_contact_import_mailing_list_rel", tb => tb.HasComment("RELATION BETWEEN mailing_contact_import AND mailing_list"));
                        j.HasIndex(new[] { "MailingListId", "MailingContactImportId" }, "mailing_contact_import_mailin_mailing_list_id_mailing_conta_idx");
                        j.IndexerProperty<int>("MailingContactImportId").HasColumnName("mailing_contact_import_id");
                        j.IndexerProperty<int>("MailingListId").HasColumnName("mailing_list_id");
                    });
        });

        modelBuilder.Entity<MailingContactListRel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_contact_list_rel_pkey");

            entity.ToTable("mailing_contact_list_rel", tb => tb.HasComment("Mass Mailing Subscription Information"));

            entity.HasIndex(e => new { e.ContactId, e.ListId }, "mailing_contact_list_rel_unique_contact_list").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ContactId)
                .HasComment("Contact")
                .HasColumnName("contact_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ListId)
                .HasComment("Mailing List")
                .HasColumnName("list_id");
            entity.Property(e => e.OptOut)
                .HasComment("Opt Out")
                .HasColumnName("opt_out");
            entity.Property(e => e.UnsubscriptionDate)
                .HasComment("Unsubscription Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("unsubscription_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Contact).WithMany(p => p.MailingContactListRels)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("mailing_contact_list_rel_contact_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingContactListRelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_list_rel_create_uid_fkey");

            entity.HasOne(d => d.List).WithMany(p => p.MailingContactListRels)
                .HasForeignKey(d => d.ListId)
                .HasConstraintName("mailing_contact_list_rel_list_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingContactListRelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_list_rel_write_uid_fkey");
        });

        modelBuilder.Entity<MailingContactToList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_contact_to_list_pkey");

            entity.ToTable("mailing_contact_to_list", tb => tb.HasComment("Add Contacts to Mailing List"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailingListId)
                .HasComment("Mailing List")
                .HasColumnName("mailing_list_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingContactToListCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_to_list_create_uid_fkey");

            entity.HasOne(d => d.MailingList).WithMany(p => p.MailingContactToLists)
                .HasForeignKey(d => d.MailingListId)
                .HasConstraintName("mailing_contact_to_list_mailing_list_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingContactToListWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_contact_to_list_write_uid_fkey");

            entity.HasMany(d => d.MailingContacts).WithMany(p => p.MailingContactToLists)
                .UsingEntity<Dictionary<string, object>>(
                    "MailingContactMailingContactToListRel",
                    r => r.HasOne<MailingContact>().WithMany()
                        .HasForeignKey("MailingContactId")
                        .HasConstraintName("mailing_contact_mailing_contact_to_list_mailing_contact_id_fkey"),
                    l => l.HasOne<MailingContactToList>().WithMany()
                        .HasForeignKey("MailingContactToListId")
                        .HasConstraintName("mailing_contact_mailing_contact_mailing_contact_to_list_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailingContactToListId", "MailingContactId").HasName("mailing_contact_mailing_contact_to_list_rel_pkey");
                        j.ToTable("mailing_contact_mailing_contact_to_list_rel", tb => tb.HasComment("RELATION BETWEEN mailing_contact_to_list AND mailing_contact"));
                        j.HasIndex(new[] { "MailingContactId", "MailingContactToListId" }, "mailing_contact_mailing_conta_mailing_contact_id_mailing_co_idx");
                        j.IndexerProperty<int>("MailingContactToListId").HasColumnName("mailing_contact_to_list_id");
                        j.IndexerProperty<int>("MailingContactId").HasColumnName("mailing_contact_id");
                    });
        });

        modelBuilder.Entity<MailingFilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_filter_pkey");

            entity.ToTable("mailing_filter", tb => tb.HasComment("Mailing Favorite Filters"));

            entity.HasIndex(e => e.CreateUid, "mailing_filter_create_uid_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Saved by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailingDomain)
                .HasComment("Filter Domain")
                .HasColumnType("character varying")
                .HasColumnName("mailing_domain");
            entity.Property(e => e.MailingModelId)
                .HasComment("Recipients Model")
                .HasColumnName("mailing_model_id");
            entity.Property(e => e.Name)
                .HasComment("Filter Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingFilterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_filter_create_uid_fkey");

            entity.HasOne(d => d.MailingModel).WithMany(p => p.MailingFilters)
                .HasForeignKey(d => d.MailingModelId)
                .HasConstraintName("mailing_filter_mailing_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingFilterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_filter_write_uid_fkey");
        });

        modelBuilder.Entity<MailingList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_list_pkey");

            entity.ToTable("mailing_list", tb => tb.HasComment("Mailing List"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsPublic)
                .HasComment("Show In Preferences")
                .HasColumnName("is_public");
            entity.Property(e => e.Name)
                .HasComment("Mailing List")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingListCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_list_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingListWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_list_write_uid_fkey");

            entity.HasMany(d => d.MailingMailings).WithMany(p => p.MailingLists)
                .UsingEntity<Dictionary<string, object>>(
                    "MailMassMailingListRel",
                    r => r.HasOne<MailingMailing>().WithMany()
                        .HasForeignKey("MailingMailingId")
                        .HasConstraintName("mail_mass_mailing_list_rel_mailing_mailing_id_fkey"),
                    l => l.HasOne<MailingList>().WithMany()
                        .HasForeignKey("MailingListId")
                        .HasConstraintName("mail_mass_mailing_list_rel_mailing_list_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailingListId", "MailingMailingId").HasName("mail_mass_mailing_list_rel_pkey");
                        j.ToTable("mail_mass_mailing_list_rel", tb => tb.HasComment("RELATION BETWEEN mailing_list AND mailing_mailing"));
                        j.HasIndex(new[] { "MailingMailingId", "MailingListId" }, "mail_mass_mailing_list_rel_mailing_mailing_id_mailing_list__idx");
                        j.IndexerProperty<int>("MailingListId").HasColumnName("mailing_list_id");
                        j.IndexerProperty<int>("MailingMailingId").HasColumnName("mailing_mailing_id");
                    });
        });

        modelBuilder.Entity<MailingListMerge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_list_merge_pkey");

            entity.ToTable("mailing_list_merge", tb => tb.HasComment("Merge Mass Mailing List"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArchiveSrcLists)
                .HasComment("Archive source mailing lists")
                .HasColumnName("archive_src_lists");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DestListId)
                .HasComment("Destination Mailing List")
                .HasColumnName("dest_list_id");
            entity.Property(e => e.MergeOptions)
                .HasComment("Merge Option")
                .HasColumnType("character varying")
                .HasColumnName("merge_options");
            entity.Property(e => e.NewListName)
                .HasComment("New Mailing List Name")
                .HasColumnType("character varying")
                .HasColumnName("new_list_name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingListMergeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_list_merge_create_uid_fkey");

            entity.HasOne(d => d.DestList).WithMany(p => p.MailingListMergesNavigation)
                .HasForeignKey(d => d.DestListId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_list_merge_dest_list_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingListMergeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_list_merge_write_uid_fkey");

            entity.HasMany(d => d.MailingLists).WithMany(p => p.MailingListMerges)
                .UsingEntity<Dictionary<string, object>>(
                    "MailingListMailingListMergeRel",
                    r => r.HasOne<MailingList>().WithMany()
                        .HasForeignKey("MailingListId")
                        .HasConstraintName("mailing_list_mailing_list_merge_rel_mailing_list_id_fkey"),
                    l => l.HasOne<MailingListMerge>().WithMany()
                        .HasForeignKey("MailingListMergeId")
                        .HasConstraintName("mailing_list_mailing_list_merge_rel_mailing_list_merge_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailingListMergeId", "MailingListId").HasName("mailing_list_mailing_list_merge_rel_pkey");
                        j.ToTable("mailing_list_mailing_list_merge_rel", tb => tb.HasComment("RELATION BETWEEN mailing_list_merge AND mailing_list"));
                        j.HasIndex(new[] { "MailingListId", "MailingListMergeId" }, "mailing_list_mailing_list_mer_mailing_list_id_mailing_list__idx");
                        j.IndexerProperty<int>("MailingListMergeId").HasColumnName("mailing_list_merge_id");
                        j.IndexerProperty<int>("MailingListId").HasColumnName("mailing_list_id");
                    });
        });

        modelBuilder.Entity<MailingMailing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_mailing_pkey");

            entity.ToTable("mailing_mailing", tb => tb.HasComment("Mass Mailing"));

            entity.HasIndex(e => e.CampaignId, "mailing_mailing_campaign_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AbTestingCompleted)
                .HasComment("A/B Testing Campaign Finished")
                .HasColumnName("ab_testing_completed");
            entity.Property(e => e.AbTestingEnabled)
                .HasComment("Allow A/B Testing")
                .HasColumnName("ab_testing_enabled");
            entity.Property(e => e.AbTestingPc)
                .HasComment("A/B Testing percentage")
                .HasColumnName("ab_testing_pc");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.BodyArch)
                .HasComment("Body")
                .HasColumnName("body_arch");
            entity.Property(e => e.BodyHtml)
                .HasComment("Body converted to be sent by mail")
                .HasColumnName("body_html");
            entity.Property(e => e.BodyPlaintext)
                .HasComment("SMS Body")
                .HasColumnName("body_plaintext");
            entity.Property(e => e.CalendarDate)
                .HasComment("Calendar Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("calendar_date");
            entity.Property(e => e.CampaignId)
                .HasComment("UTM Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmailFrom)
                .HasComment("Send From")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.Favorite)
                .HasComment("Favorite")
                .HasColumnName("favorite");
            entity.Property(e => e.FavoriteDate)
                .HasComment("Favorite Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("favorite_date");
            entity.Property(e => e.KeepArchives)
                .HasComment("Keep Archives")
                .HasColumnName("keep_archives");
            entity.Property(e => e.KpiMailRequired)
                .HasComment("KPI mail required")
                .HasColumnName("kpi_mail_required");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.MailServerId)
                .HasComment("Mail Server")
                .HasColumnName("mail_server_id");
            entity.Property(e => e.MailingDomain)
                .HasComment("Domain")
                .HasColumnType("character varying")
                .HasColumnName("mailing_domain");
            entity.Property(e => e.MailingFilterId)
                .HasComment("Favorite Filter")
                .HasColumnName("mailing_filter_id");
            entity.Property(e => e.MailingModelId)
                .HasComment("Recipients Model")
                .HasColumnName("mailing_model_id");
            entity.Property(e => e.MailingType)
                .HasComment("Mailing Type")
                .HasColumnType("character varying")
                .HasColumnName("mailing_type");
            entity.Property(e => e.MediumId)
                .HasComment("Medium")
                .HasColumnName("medium_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Preview)
                .HasComment("Preview")
                .HasColumnType("character varying")
                .HasColumnName("preview");
            entity.Property(e => e.ReplyTo)
                .HasComment("Reply To")
                .HasColumnType("character varying")
                .HasColumnName("reply_to");
            entity.Property(e => e.ReplyToMode)
                .HasComment("Reply-To Mode")
                .HasColumnType("character varying")
                .HasColumnName("reply_to_mode");
            entity.Property(e => e.ScheduleDate)
                .HasComment("Scheduled for")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("schedule_date");
            entity.Property(e => e.ScheduleType)
                .HasComment("Schedule")
                .HasColumnType("character varying")
                .HasColumnName("schedule_type");
            entity.Property(e => e.SentDate)
                .HasComment("Sent Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sent_date");
            entity.Property(e => e.SmsAllowUnsubscribe)
                .HasComment("Include opt-out link")
                .HasColumnName("sms_allow_unsubscribe");
            entity.Property(e => e.SmsForceSend)
                .HasComment("Send Directly")
                .HasColumnName("sms_force_send");
            entity.Property(e => e.SmsTemplateId)
                .HasComment("SMS Template")
                .HasColumnName("sms_template_id");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Campaign).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_campaign_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingMailingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_create_uid_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_mail_server_id_fkey");

            entity.HasOne(d => d.MailingFilter).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.MailingFilterId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_mailing_filter_id_fkey");

            entity.HasOne(d => d.MailingModel).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.MailingModelId)
                .HasConstraintName("mailing_mailing_mailing_model_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mailing_mailing_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_message_main_attachment_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_sms_template_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.MailingMailings)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mailing_mailing_source_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.MailingMailingUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingMailingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_write_uid_fkey");

            entity.HasMany(d => d.Attachments).WithMany(p => p.MassMailings)
                .UsingEntity<Dictionary<string, object>>(
                    "MassMailingIrAttachmentsRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("mass_mailing_ir_attachments_rel_attachment_id_fkey"),
                    l => l.HasOne<MailingMailing>().WithMany()
                        .HasForeignKey("MassMailingId")
                        .HasConstraintName("mass_mailing_ir_attachments_rel_mass_mailing_id_fkey"),
                    j =>
                    {
                        j.HasKey("MassMailingId", "AttachmentId").HasName("mass_mailing_ir_attachments_rel_pkey");
                        j.ToTable("mass_mailing_ir_attachments_rel", tb => tb.HasComment("RELATION BETWEEN mailing_mailing AND ir_attachment"));
                        j.HasIndex(new[] { "AttachmentId", "MassMailingId" }, "mass_mailing_ir_attachments_r_attachment_id_mass_mailing_id_idx");
                        j.IndexerProperty<int>("MassMailingId").HasColumnName("mass_mailing_id");
                        j.IndexerProperty<int>("AttachmentId").HasColumnName("attachment_id");
                    });
        });

        modelBuilder.Entity<MailingMailingScheduleDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_mailing_schedule_date_pkey");

            entity.ToTable("mailing_mailing_schedule_date", tb => tb.HasComment("schedule a mailing"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MassMailingId)
                .HasComment("Mass Mailing")
                .HasColumnName("mass_mailing_id");
            entity.Property(e => e.ScheduleDate)
                .HasComment("Scheduled for")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("schedule_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingMailingScheduleDateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_schedule_date_create_uid_fkey");

            entity.HasOne(d => d.MassMailing).WithMany(p => p.MailingMailingScheduleDates)
                .HasForeignKey(d => d.MassMailingId)
                .HasConstraintName("mailing_mailing_schedule_date_mass_mailing_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingMailingScheduleDateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_schedule_date_write_uid_fkey");
        });

        modelBuilder.Entity<MailingMailingTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_mailing_test_pkey");

            entity.ToTable("mailing_mailing_test", tb => tb.HasComment("Sample Mail Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmailTo)
                .HasComment("Recipients")
                .HasColumnName("email_to");
            entity.Property(e => e.MassMailingId)
                .HasComment("Mailing")
                .HasColumnName("mass_mailing_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingMailingTestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_test_create_uid_fkey");

            entity.HasOne(d => d.MassMailing).WithMany(p => p.MailingMailingTests)
                .HasForeignKey(d => d.MassMailingId)
                .HasConstraintName("mailing_mailing_test_mass_mailing_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingMailingTestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_mailing_test_write_uid_fkey");
        });

        modelBuilder.Entity<MailingSmsTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_sms_test_pkey");

            entity.ToTable("mailing_sms_test", tb => tb.HasComment("Test SMS Mailing"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailingId)
                .HasComment("Mailing")
                .HasColumnName("mailing_id");
            entity.Property(e => e.Numbers)
                .HasComment("Number(s)")
                .HasColumnName("numbers");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingSmsTestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_sms_test_create_uid_fkey");

            entity.HasOne(d => d.Mailing).WithMany(p => p.MailingSmsTests)
                .HasForeignKey(d => d.MailingId)
                .HasConstraintName("mailing_sms_test_mailing_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingSmsTestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_sms_test_write_uid_fkey");
        });

        modelBuilder.Entity<MailingTrace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mailing_trace_pkey");

            entity.ToTable("mailing_trace", tb => tb.HasComment("Mailing Statistics"));

            entity.HasIndex(e => e.CampaignId, "mailing_trace_campaign_id_index").HasFilter("(campaign_id IS NOT NULL)");

            entity.HasIndex(e => e.MailMailId, "mailing_trace_mail_mail_id_index").HasFilter("(mail_mail_id IS NOT NULL)");

            entity.HasIndex(e => e.MailMailIdInt, "mailing_trace_mail_mail_id_int_index").HasFilter("(mail_mail_id_int IS NOT NULL)");

            entity.HasIndex(e => e.MassMailingId, "mailing_trace_mass_mailing_id_index");

            entity.HasIndex(e => e.SmsSmsId, "mailing_trace_sms_sms_id_index").HasFilter("(sms_sms_id IS NOT NULL)");

            entity.HasIndex(e => e.SmsSmsIdInt, "mailing_trace_sms_sms_id_int_index").HasFilter("(sms_sms_id_int IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CampaignId)
                .HasComment("Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.FailureType)
                .HasComment("Failure type")
                .HasColumnType("character varying")
                .HasColumnName("failure_type");
            entity.Property(e => e.LinksClickDatetime)
                .HasComment("Clicked On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("links_click_datetime");
            entity.Property(e => e.MailMailId)
                .HasComment("Mail")
                .HasColumnName("mail_mail_id");
            entity.Property(e => e.MailMailIdInt)
                .HasComment("Mail ID (tech)")
                .HasColumnName("mail_mail_id_int");
            entity.Property(e => e.MassMailingId)
                .HasComment("Mailing")
                .HasColumnName("mass_mailing_id");
            entity.Property(e => e.MessageId)
                .HasComment("Message-ID")
                .HasColumnType("character varying")
                .HasColumnName("message_id");
            entity.Property(e => e.Model)
                .HasComment("Document model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.OpenDatetime)
                .HasComment("Opened On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("open_datetime");
            entity.Property(e => e.ReplyDatetime)
                .HasComment("Replied On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("reply_datetime");
            entity.Property(e => e.ResId)
                .HasComment("Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.SentDatetime)
                .HasComment("Sent On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sent_datetime");
            entity.Property(e => e.SmsCode)
                .HasComment("Code")
                .HasColumnType("character varying")
                .HasColumnName("sms_code");
            entity.Property(e => e.SmsNumber)
                .HasComment("Number")
                .HasColumnType("character varying")
                .HasColumnName("sms_number");
            entity.Property(e => e.SmsSmsId)
                .HasComment("SMS")
                .HasColumnName("sms_sms_id");
            entity.Property(e => e.SmsSmsIdInt)
                .HasComment("SMS ID (tech)")
                .HasColumnName("sms_sms_id_int");
            entity.Property(e => e.TraceStatus)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("trace_status");
            entity.Property(e => e.TraceType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("trace_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Campaign).WithMany(p => p.MailingTraces)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_trace_campaign_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MailingTraceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_trace_create_uid_fkey");

            entity.HasOne(d => d.MailMail).WithMany(p => p.MailingTraces)
                .HasForeignKey(d => d.MailMailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_trace_mail_mail_id_fkey");

            entity.HasOne(d => d.MassMailing).WithMany(p => p.MailingTraces)
                .HasForeignKey(d => d.MassMailingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mailing_trace_mass_mailing_id_fkey");

            entity.HasOne(d => d.SmsSms).WithMany(p => p.MailingTraces)
                .HasForeignKey(d => d.SmsSmsId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_trace_sms_sms_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MailingTraceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mailing_trace_write_uid_fkey");
        });

        modelBuilder.Entity<MailingTraceReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("mailing_trace_report");

            entity.Property(e => e.Bounced).HasColumnName("bounced");
            entity.Property(e => e.Campaign)
                .HasColumnType("character varying")
                .HasColumnName("campaign");
            entity.Property(e => e.Canceled).HasColumnName("canceled");
            entity.Property(e => e.Clicked).HasColumnName("clicked");
            entity.Property(e => e.Delivered).HasColumnName("delivered");
            entity.Property(e => e.EmailFrom)
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.Error).HasColumnName("error");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MailingType)
                .HasColumnType("character varying")
                .HasColumnName("mailing_type");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Opened).HasColumnName("opened");
            entity.Property(e => e.Replied).HasColumnName("replied");
            entity.Property(e => e.Scheduled).HasColumnName("scheduled");
            entity.Property(e => e.ScheduledDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.Sent).HasColumnName("sent");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
        });

        modelBuilder.Entity<MaintenanceEquipment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_equipment_pkey");

            entity.ToTable("maintenance_equipment", tb => tb.HasComment("Maintenance Equipment"));

            entity.HasIndex(e => e.SerialNo, "maintenance_equipment_serial_no").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AssignDate)
                .HasComment("Assigned Date")
                .HasColumnName("assign_date");
            entity.Property(e => e.CategoryId)
                .HasComment("Equipment Category")
                .HasColumnName("category_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.Cost)
                .HasComment("Cost")
                .HasColumnName("cost");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId)
                .HasComment("Assigned Department")
                .HasColumnName("department_id");
            entity.Property(e => e.EffectiveDate)
                .HasComment("Effective Date")
                .HasColumnName("effective_date");
            entity.Property(e => e.EmployeeId)
                .HasComment("Assigned Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.EquipmentAssignTo)
                .HasComment("Used By")
                .HasColumnType("character varying")
                .HasColumnName("equipment_assign_to");
            entity.Property(e => e.Location)
                .HasComment("Location")
                .HasColumnType("character varying")
                .HasColumnName("location");
            entity.Property(e => e.MaintenanceCount)
                .HasComment("Maintenance Count")
                .HasColumnName("maintenance_count");
            entity.Property(e => e.MaintenanceDuration)
                .HasComment("Maintenance Duration")
                .HasColumnName("maintenance_duration");
            entity.Property(e => e.MaintenanceOpenCount)
                .HasComment("Current Maintenance")
                .HasColumnName("maintenance_open_count");
            entity.Property(e => e.MaintenanceTeamId)
                .HasComment("Maintenance Team")
                .HasColumnName("maintenance_team_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Model)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.Name)
                .HasComment("Equipment Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NextActionDate)
                .HasComment("Date of the next preventive maintenance")
                .HasColumnName("next_action_date");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.OwnerUserId)
                .HasComment("Owner")
                .HasColumnName("owner_user_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Vendor")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerRef)
                .HasComment("Vendor Reference")
                .HasColumnType("character varying")
                .HasColumnName("partner_ref");
            entity.Property(e => e.Period)
                .HasComment("Days between each preventive maintenance")
                .HasColumnName("period");
            entity.Property(e => e.ScrapDate)
                .HasComment("Scrap Date")
                .HasColumnName("scrap_date");
            entity.Property(e => e.SerialNo)
                .HasComment("Serial Number")
                .HasColumnType("character varying")
                .HasColumnName("serial_no");
            entity.Property(e => e.TechnicianUserId)
                .HasComment("Technician")
                .HasColumnName("technician_user_id");
            entity.Property(e => e.WarrantyDate)
                .HasComment("Warranty Expiration Date")
                .HasColumnName("warranty_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MaintenanceEquipmentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_employee_id_fkey");

            entity.HasOne(d => d.MaintenanceTeam).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.MaintenanceTeamId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_equipment_maintenance_team_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_message_main_attachment_id_fkey");

            entity.HasOne(d => d.OwnerUser).WithMany(p => p.MaintenanceEquipmentOwnerUsers)
                .HasForeignKey(d => d.OwnerUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_owner_user_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_partner_id_fkey");

            entity.HasOne(d => d.TechnicianUser).WithMany(p => p.MaintenanceEquipmentTechnicianUsers)
                .HasForeignKey(d => d.TechnicianUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_technician_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MaintenanceEquipmentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceEquipmentCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_equipment_category_pkey");

            entity.ToTable("maintenance_equipment_category", tb => tb.HasComment("Maintenance Equipment Category"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AliasId)
                .HasComment("Alias")
                .HasColumnName("alias_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Fold)
                .HasComment("Folded in Maintenance Pipe")
                .HasColumnName("fold");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Category Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Comments")
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.TechnicianUserId)
                .HasComment("Responsible")
                .HasColumnName("technician_user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.MaintenanceEquipmentCategories)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_equipment_category_alias_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.MaintenanceEquipmentCategories)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MaintenanceEquipmentCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MaintenanceEquipmentCategories)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_message_main_attachment_id_fkey");

            entity.HasOne(d => d.TechnicianUser).WithMany(p => p.MaintenanceEquipmentCategoryTechnicianUsers)
                .HasForeignKey(d => d.TechnicianUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_technician_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MaintenanceEquipmentCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_request_pkey");

            entity.ToTable("maintenance_request", tb => tb.HasComment("Maintenance Request"));

            entity.HasIndex(e => e.EquipmentId, "maintenance_request_equipment_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Archive)
                .HasComment("Archive")
                .HasColumnName("archive");
            entity.Property(e => e.CategoryId)
                .HasComment("Category")
                .HasColumnName("category_id");
            entity.Property(e => e.CloseDate)
                .HasComment("Close Date")
                .HasColumnName("close_date");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.Duration)
                .HasComment("Duration")
                .HasColumnName("duration");
            entity.Property(e => e.EmailCc)
                .HasComment("Email cc")
                .HasColumnType("character varying")
                .HasColumnName("email_cc");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.EquipmentId)
                .HasComment("Equipment")
                .HasColumnName("equipment_id");
            entity.Property(e => e.KanbanState)
                .HasComment("Kanban State")
                .HasColumnType("character varying")
                .HasColumnName("kanban_state");
            entity.Property(e => e.MaintenanceTeamId)
                .HasComment("Team")
                .HasColumnName("maintenance_team_id");
            entity.Property(e => e.MaintenanceType)
                .HasComment("Maintenance Type")
                .HasColumnType("character varying")
                .HasColumnName("maintenance_type");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Subjects")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OwnerUserId)
                .HasComment("Created by User")
                .HasColumnName("owner_user_id");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.RequestDate)
                .HasComment("Request Date")
                .HasColumnName("request_date");
            entity.Property(e => e.ScheduleDate)
                .HasComment("Scheduled Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("schedule_date");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.UserId)
                .HasComment("Technician")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_category_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MaintenanceRequestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_employee_id_fkey");

            entity.HasOne(d => d.Equipment).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.EquipmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_request_equipment_id_fkey");

            entity.HasOne(d => d.MaintenanceTeam).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.MaintenanceTeamId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_request_maintenance_team_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_message_main_attachment_id_fkey");

            entity.HasOne(d => d.OwnerUser).WithMany(p => p.MaintenanceRequestOwnerUsers)
                .HasForeignKey(d => d.OwnerUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_owner_user_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_request_stage_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.MaintenanceRequestUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MaintenanceRequestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_stage_pkey");

            entity.ToTable("maintenance_stage", tb => tb.HasComment("Maintenance Stage"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Done)
                .HasComment("Request Done")
                .HasColumnName("done");
            entity.Property(e => e.Fold)
                .HasComment("Folded in Maintenance Pipe")
                .HasColumnName("fold");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MaintenanceStageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_stage_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MaintenanceStageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_stage_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceTeam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_team_pkey");

            entity.ToTable("maintenance_team", tb => tb.HasComment("Maintenance Teams"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Team Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.MaintenanceTeams)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_team_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MaintenanceTeamCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_team_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MaintenanceTeamWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_team_write_uid_fkey");

            entity.HasMany(d => d.ResUsers).WithMany(p => p.MaintenanceTeams)
                .UsingEntity<Dictionary<string, object>>(
                    "MaintenanceTeamUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("maintenance_team_users_rel_res_users_id_fkey"),
                    l => l.HasOne<MaintenanceTeam>().WithMany()
                        .HasForeignKey("MaintenanceTeamId")
                        .HasConstraintName("maintenance_team_users_rel_maintenance_team_id_fkey"),
                    j =>
                    {
                        j.HasKey("MaintenanceTeamId", "ResUsersId").HasName("maintenance_team_users_rel_pkey");
                        j.ToTable("maintenance_team_users_rel", tb => tb.HasComment("RELATION BETWEEN maintenance_team AND res_users"));
                        j.HasIndex(new[] { "ResUsersId", "MaintenanceTeamId" }, "maintenance_team_users_rel_res_users_id_maintenance_team_id_idx");
                        j.IndexerProperty<int>("MaintenanceTeamId").HasColumnName("maintenance_team_id");
                        j.IndexerProperty<int>("ResUsersId").HasColumnName("res_users_id");
                    });
        });

        modelBuilder.Entity<MrpBom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_bom_pkey");

            entity.ToTable("mrp_bom", tb => tb.HasComment("Bill of Material"));

            entity.HasIndex(e => e.CompanyId, "mrp_bom_company_id_index");

            entity.HasIndex(e => e.ProductId, "mrp_bom_product_id_index");

            entity.HasIndex(e => e.ProductTmplId, "mrp_bom_product_tmpl_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AllowOperationDependencies)
                .HasComment("Operation Dependencies")
                .HasColumnName("allow_operation_dependencies");
            entity.Property(e => e.Code)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.Consumption)
                .HasComment("Flexible Consumption")
                .HasColumnType("character varying")
                .HasColumnName("consumption");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.PickingTypeId)
                .HasComment("Operation Type")
                .HasColumnName("picking_type_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product Variant")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Quantity")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.ReadyToProduce)
                .HasComment("Manufacturing Readiness")
                .HasColumnType("character varying")
                .HasColumnName("ready_to_produce");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Type)
                .HasComment("BoM Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpBomCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_message_main_attachment_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_picking_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_product_uom_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpBomWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_write_uid_fkey");
        });

        modelBuilder.Entity<MrpBomByproduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_bom_byproduct_pkey");

            entity.ToTable("mrp_bom_byproduct", tb => tb.HasComment("Byproduct"));

            entity.HasIndex(e => e.BomId, "mrp_bom_byproduct_bom_id_index");

            entity.HasIndex(e => e.CompanyId, "mrp_bom_byproduct_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BomId)
                .HasComment("BoM")
                .HasColumnName("bom_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CostShare)
                .HasComment("Cost Share (%)")
                .HasColumnName("cost_share");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.OperationId)
                .HasComment("Produced in Operation")
                .HasColumnName("operation_id");
            entity.Property(e => e.ProductId)
                .HasComment("By-product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Quantity")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_bom_byproduct_bom_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpBomByproductCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_create_uid_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_operation_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_byproduct_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_byproduct_product_uom_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpBomByproductWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_write_uid_fkey");

            entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.MrpBomByproducts)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpBomByproductProductTemplateAttributeValueRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_byproduct_product_tem_product_template_attribute_v_fkey"),
                    l => l.HasOne<MrpBomByproduct>().WithMany()
                        .HasForeignKey("MrpBomByproductId")
                        .HasConstraintName("mrp_bom_byproduct_product_template_at_mrp_bom_byproduct_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpBomByproductId", "ProductTemplateAttributeValueId").HasName("mrp_bom_byproduct_product_template_attribute_value_rel_pkey");
                        j.ToTable("mrp_bom_byproduct_product_template_attribute_value_rel", tb => tb.HasComment("RELATION BETWEEN mrp_bom_byproduct AND product_template_attribute_value"));
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpBomByproductId" }, "mrp_bom_byproduct_product_tem_product_template_attribute_va_idx");
                        j.IndexerProperty<int>("MrpBomByproductId").HasColumnName("mrp_bom_byproduct_id");
                        j.IndexerProperty<int>("ProductTemplateAttributeValueId").HasColumnName("product_template_attribute_value_id");
                    });
        });

        modelBuilder.Entity<MrpBomLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_bom_line_pkey");

            entity.ToTable("mrp_bom_line", tb => tb.HasComment("Bill of Material Line"));

            entity.HasIndex(e => e.BomId, "mrp_bom_line_bom_id_index");

            entity.HasIndex(e => e.CompanyId, "mrp_bom_line_company_id_index");

            entity.HasIndex(e => e.ProductTmplId, "mrp_bom_line_product_tmpl_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BomId)
                .HasComment("Parent BoM")
                .HasColumnName("bom_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CostShare)
                .HasComment("Cost Share (%)")
                .HasColumnName("cost_share");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ManualConsumption)
                .HasComment("Manual Consumption")
                .HasColumnName("manual_consumption");
            entity.Property(e => e.OperationId)
                .HasComment("Consumed in Operation")
                .HasColumnName("operation_id");
            entity.Property(e => e.ProductId)
                .HasComment("Component")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Quantity")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Product Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.BomId)
                .HasConstraintName("mrp_bom_line_bom_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpBomLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_create_uid_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_operation_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_line_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_line_product_uom_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpBomLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_write_uid_fkey");

            entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.MrpBomLines)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpBomLineProductTemplateAttributeValueRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_line_product_template_product_template_attribute_v_fkey"),
                    l => l.HasOne<MrpBomLine>().WithMany()
                        .HasForeignKey("MrpBomLineId")
                        .HasConstraintName("mrp_bom_line_product_template_attribute_va_mrp_bom_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpBomLineId", "ProductTemplateAttributeValueId").HasName("mrp_bom_line_product_template_attribute_value_rel_pkey");
                        j.ToTable("mrp_bom_line_product_template_attribute_value_rel", tb => tb.HasComment("RELATION BETWEEN mrp_bom_line AND product_template_attribute_value"));
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpBomLineId" }, "mrp_bom_line_product_template_product_template_attribute_va_idx");
                        j.IndexerProperty<int>("MrpBomLineId").HasColumnName("mrp_bom_line_id");
                        j.IndexerProperty<int>("ProductTemplateAttributeValueId").HasColumnName("product_template_attribute_value_id");
                    });
        });

        modelBuilder.Entity<MrpConsumptionWarning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_consumption_warning_pkey");

            entity.ToTable("mrp_consumption_warning", tb => tb.HasComment("Wizard in case of consumption in warning/strict and more component has been used for a MO (related to the bom)"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpConsumptionWarningCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpConsumptionWarningWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_write_uid_fkey");

            entity.HasMany(d => d.MrpProductions).WithMany(p => p.MrpConsumptionWarnings)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpConsumptionWarningMrpProductionRel",
                    r => r.HasOne<MrpProduction>().WithMany()
                        .HasForeignKey("MrpProductionId")
                        .HasConstraintName("mrp_consumption_warning_mrp_production_r_mrp_production_id_fkey"),
                    l => l.HasOne<MrpConsumptionWarning>().WithMany()
                        .HasForeignKey("MrpConsumptionWarningId")
                        .HasConstraintName("mrp_consumption_warning_mrp_pro_mrp_consumption_warning_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpConsumptionWarningId", "MrpProductionId").HasName("mrp_consumption_warning_mrp_production_rel_pkey");
                        j.ToTable("mrp_consumption_warning_mrp_production_rel", tb => tb.HasComment("RELATION BETWEEN mrp_consumption_warning AND mrp_production"));
                        j.HasIndex(new[] { "MrpProductionId", "MrpConsumptionWarningId" }, "mrp_consumption_warning_mrp_p_mrp_production_id_mrp_consump_idx");
                        j.IndexerProperty<int>("MrpConsumptionWarningId").HasColumnName("mrp_consumption_warning_id");
                        j.IndexerProperty<int>("MrpProductionId").HasColumnName("mrp_production_id");
                    });
        });

        modelBuilder.Entity<MrpConsumptionWarningLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_consumption_warning_line_pkey");

            entity.ToTable("mrp_consumption_warning_line", tb => tb.HasComment("Line of issue consumption"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MrpConsumptionWarningId)
                .HasComment("Parent Wizard")
                .HasColumnName("mrp_consumption_warning_id");
            entity.Property(e => e.MrpProductionId)
                .HasComment("Manufacturing Order")
                .HasColumnName("mrp_production_id");
            entity.Property(e => e.ProductConsumedQtyUom)
                .HasComment("Consumed")
                .HasColumnName("product_consumed_qty_uom");
            entity.Property(e => e.ProductExpectedQtyUom)
                .HasComment("To Consume")
                .HasColumnName("product_expected_qty_uom");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpConsumptionWarningLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_line_create_uid_fkey");

            entity.HasOne(d => d.MrpConsumptionWarning).WithMany(p => p.MrpConsumptionWarningLines)
                .HasForeignKey(d => d.MrpConsumptionWarningId)
                .HasConstraintName("mrp_consumption_warning_line_mrp_consumption_warning_id_fkey");

            entity.HasOne(d => d.MrpProduction).WithMany(p => p.MrpConsumptionWarningLines)
                .HasForeignKey(d => d.MrpProductionId)
                .HasConstraintName("mrp_consumption_warning_line_mrp_production_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpConsumptionWarningLines)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("mrp_consumption_warning_line_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpConsumptionWarningLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_document_pkey");

            entity.ToTable("mrp_document", tb => tb.HasComment("Production Document"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IrAttachmentId)
                .HasComment("Related attachment")
                .HasColumnName("ir_attachment_id");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpDocumentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_document_create_uid_fkey");

            entity.HasOne(d => d.IrAttachment).WithMany(p => p.MrpDocuments)
                .HasForeignKey(d => d.IrAttachmentId)
                .HasConstraintName("mrp_document_ir_attachment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpDocumentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_document_write_uid_fkey");
        });

        modelBuilder.Entity<MrpImmediateProduction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_immediate_production_pkey");

            entity.ToTable("mrp_immediate_production", tb => tb.HasComment("Immediate Production"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpImmediateProductionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpImmediateProductionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_write_uid_fkey");

            entity.HasMany(d => d.MrpProductions).WithMany(p => p.MrpImmediateProductions)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpProductionProductionRel",
                    r => r.HasOne<MrpProduction>().WithMany()
                        .HasForeignKey("MrpProductionId")
                        .HasConstraintName("mrp_production_production_rel_mrp_production_id_fkey"),
                    l => l.HasOne<MrpImmediateProduction>().WithMany()
                        .HasForeignKey("MrpImmediateProductionId")
                        .HasConstraintName("mrp_production_production_rel_mrp_immediate_production_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpImmediateProductionId", "MrpProductionId").HasName("mrp_production_production_rel_pkey");
                        j.ToTable("mrp_production_production_rel", tb => tb.HasComment("RELATION BETWEEN mrp_immediate_production AND mrp_production"));
                        j.HasIndex(new[] { "MrpProductionId", "MrpImmediateProductionId" }, "mrp_production_production_rel_mrp_production_id_mrp_immedia_idx");
                        j.IndexerProperty<int>("MrpImmediateProductionId").HasColumnName("mrp_immediate_production_id");
                        j.IndexerProperty<int>("MrpProductionId").HasColumnName("mrp_production_id");
                    });
        });

        modelBuilder.Entity<MrpImmediateProductionLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_immediate_production_line_pkey");

            entity.ToTable("mrp_immediate_production_line", tb => tb.HasComment("Immediate Production Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ImmediateProductionId)
                .HasComment("Immediate Production")
                .HasColumnName("immediate_production_id");
            entity.Property(e => e.ProductionId)
                .HasComment("Production")
                .HasColumnName("production_id");
            entity.Property(e => e.ToImmediate)
                .HasComment("To Process")
                .HasColumnName("to_immediate");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpImmediateProductionLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_line_create_uid_fkey");

            entity.HasOne(d => d.ImmediateProduction).WithMany(p => p.MrpImmediateProductionLines)
                .HasForeignKey(d => d.ImmediateProductionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_immediate_production_line_immediate_production_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.MrpImmediateProductionLines)
                .HasForeignKey(d => d.ProductionId)
                .HasConstraintName("mrp_immediate_production_line_production_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpImmediateProductionLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProduction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_pkey");

            entity.ToTable("mrp_production", tb => tb.HasComment("Production Order"));

            entity.HasIndex(e => e.CompanyId, "mrp_production_company_id_index");

            entity.HasIndex(e => e.DatePlannedStart, "mrp_production_date_planned_start_index");

            entity.HasIndex(e => new { e.Name, e.CompanyId }, "mrp_production_name_uniq").IsUnique();

            entity.HasIndex(e => e.OrderpointId, "mrp_production_orderpoint_id_index").HasFilter("(orderpoint_id IS NOT NULL)");

            entity.HasIndex(e => e.PickingTypeId, "mrp_production_picking_type_id_index");

            entity.HasIndex(e => e.ReservationState, "mrp_production_reservation_state_index");

            entity.HasIndex(e => e.State, "mrp_production_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllowWorkorderDependencies)
                .HasComment("Allow Work Order Dependencies")
                .HasColumnName("allow_workorder_dependencies");
            entity.Property(e => e.AnalyticAccountId)
                .HasComment("Analytic Account")
                .HasColumnName("analytic_account_id");
            entity.Property(e => e.BackorderSequence)
                .HasComment("Backorder Sequence")
                .HasColumnName("backorder_sequence");
            entity.Property(e => e.BomId)
                .HasComment("Bill of Material")
                .HasColumnName("bom_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.Consumption)
                .HasComment("Consumption")
                .HasColumnType("character varying")
                .HasColumnName("consumption");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateDeadline)
                .HasComment("Deadline")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DateFinished)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_finished");
            entity.Property(e => e.DatePlannedFinished)
                .HasComment("Scheduled End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_finished");
            entity.Property(e => e.DatePlannedStart)
                .HasComment("Scheduled Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_start");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.ExtraCost)
                .HasComment("Extra Unit Cost")
                .HasColumnName("extra_cost");
            entity.Property(e => e.IsLocked)
                .HasComment("Is Locked")
                .HasColumnName("is_locked");
            entity.Property(e => e.IsPlanned)
                .HasComment("Its Operations are Planned")
                .HasColumnName("is_planned");
            entity.Property(e => e.LocationDestId)
                .HasComment("Finished Products Location")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.LocationSrcId)
                .HasComment("Components Location")
                .HasColumnName("location_src_id");
            entity.Property(e => e.LotProducingId)
                .HasComment("Lot/Serial Number")
                .HasColumnName("lot_producing_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OrderpointId)
                .HasComment("Orderpoint")
                .HasColumnName("orderpoint_id");
            entity.Property(e => e.Origin)
                .HasComment("Source")
                .HasColumnType("character varying")
                .HasColumnName("origin");
            entity.Property(e => e.PickingTypeId)
                .HasComment("Operation Type")
                .HasColumnName("picking_type_id");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.ProcurementGroupId)
                .HasComment("Procurement Group")
                .HasColumnName("procurement_group_id");
            entity.Property(e => e.ProductDescriptionVariants)
                .HasComment("Custom Description")
                .HasColumnType("character varying")
                .HasColumnName("product_description_variants");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Quantity To Produce")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductUomId)
                .HasComment("Product Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.ProductUomQty)
                .HasComment("Total Quantity")
                .HasColumnName("product_uom_qty");
            entity.Property(e => e.ProductionLocationId)
                .HasComment("Production Location")
                .HasColumnName("production_location_id");
            entity.Property(e => e.PropagateCancel)
                .HasComment("Propagate cancel and split")
                .HasColumnName("propagate_cancel");
            entity.Property(e => e.QtyProducing)
                .HasComment("Quantity Producing")
                .HasColumnName("qty_producing");
            entity.Property(e => e.ReservationState)
                .HasComment("MO Readiness")
                .HasColumnType("character varying")
                .HasColumnName("reservation_state");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_analytic_account_id_fkey");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_bom_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpProductionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.MrpProductionLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_location_dest_id_fkey");

            entity.HasOne(d => d.LocationSrc).WithMany(p => p.MrpProductionLocationSrcs)
                .HasForeignKey(d => d.LocationSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_location_src_id_fkey");

            entity.HasOne(d => d.LotProducing).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.LotProducingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_lot_producing_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_orderpoint_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_picking_type_id_fkey");

            entity.HasOne(d => d.ProcurementGroup).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.ProcurementGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_procurement_group_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_product_uom_id_fkey");

            entity.HasOne(d => d.ProductionLocation).WithMany(p => p.MrpProductionProductionLocations)
                .HasForeignKey(d => d.ProductionLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_production_location_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.MrpProductionUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpProductionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionBackorder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_backorder_pkey");

            entity.ToTable("mrp_production_backorder", tb => tb.HasComment("Wizard to mark as done or create back order"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpProductionBackorderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpProductionBackorderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_write_uid_fkey");

            entity.HasMany(d => d.MrpProductions).WithMany(p => p.MrpProductionBackorders)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpProductionMrpProductionBackorderRel",
                    r => r.HasOne<MrpProduction>().WithMany()
                        .HasForeignKey("MrpProductionId")
                        .HasConstraintName("mrp_production_mrp_production_backorder__mrp_production_id_fkey"),
                    l => l.HasOne<MrpProductionBackorder>().WithMany()
                        .HasForeignKey("MrpProductionBackorderId")
                        .HasConstraintName("mrp_production_mrp_production__mrp_production_backorder_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpProductionBackorderId", "MrpProductionId").HasName("mrp_production_mrp_production_backorder_rel_pkey");
                        j.ToTable("mrp_production_mrp_production_backorder_rel", tb => tb.HasComment("RELATION BETWEEN mrp_production_backorder AND mrp_production"));
                        j.HasIndex(new[] { "MrpProductionId", "MrpProductionBackorderId" }, "mrp_production_mrp_production_mrp_production_id_mrp_product_idx");
                        j.IndexerProperty<int>("MrpProductionBackorderId").HasColumnName("mrp_production_backorder_id");
                        j.IndexerProperty<int>("MrpProductionId").HasColumnName("mrp_production_id");
                    });
        });

        modelBuilder.Entity<MrpProductionBackorderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_backorder_line_pkey");

            entity.ToTable("mrp_production_backorder_line", tb => tb.HasComment("Backorder Confirmation Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MrpProductionBackorderId)
                .HasComment("MO Backorder")
                .HasColumnName("mrp_production_backorder_id");
            entity.Property(e => e.MrpProductionId)
                .HasComment("Manufacturing Order")
                .HasColumnName("mrp_production_id");
            entity.Property(e => e.ToBackorder)
                .HasComment("To Backorder")
                .HasColumnName("to_backorder");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpProductionBackorderLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_line_create_uid_fkey");

            entity.HasOne(d => d.MrpProductionBackorder).WithMany(p => p.MrpProductionBackorderLines)
                .HasForeignKey(d => d.MrpProductionBackorderId)
                .HasConstraintName("mrp_production_backorder_line_mrp_production_backorder_id_fkey");

            entity.HasOne(d => d.MrpProduction).WithMany(p => p.MrpProductionBackorderLines)
                .HasForeignKey(d => d.MrpProductionId)
                .HasConstraintName("mrp_production_backorder_line_mrp_production_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpProductionBackorderLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionSplit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_split_pkey");

            entity.ToTable("mrp_production_split", tb => tb.HasComment("Wizard to Split a Production"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Counter)
                .HasComment("Split #")
                .HasColumnName("counter");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductionId)
                .HasComment("Manufacturing Order")
                .HasColumnName("production_id");
            entity.Property(e => e.ProductionSplitMultiId)
                .HasComment("Split Productions")
                .HasColumnName("production_split_multi_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpProductionSplitCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_create_uid_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.MrpProductionSplits)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_production_id_fkey");

            entity.HasOne(d => d.ProductionSplitMulti).WithMany(p => p.MrpProductionSplits)
                .HasForeignKey(d => d.ProductionSplitMultiId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_production_split_multi_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpProductionSplitWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionSplitLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_split_line_pkey");

            entity.ToTable("mrp_production_split_line", tb => tb.HasComment("Split Production Detail"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Schedule Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.MrpProductionSplitId)
                .HasComment("Split Production")
                .HasColumnName("mrp_production_split_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity To Produce")
                .HasColumnName("quantity");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpProductionSplitLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_line_create_uid_fkey");

            entity.HasOne(d => d.MrpProductionSplit).WithMany(p => p.MrpProductionSplitLines)
                .HasForeignKey(d => d.MrpProductionSplitId)
                .HasConstraintName("mrp_production_split_line_mrp_production_split_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.MrpProductionSplitLineUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_line_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpProductionSplitLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionSplitMulti>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_split_multi_pkey");

            entity.ToTable("mrp_production_split_multi", tb => tb.HasComment("Wizard to Split Multiple Productions"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpProductionSplitMultiCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_multi_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpProductionSplitMultiWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_multi_write_uid_fkey");
        });

        modelBuilder.Entity<MrpRoutingWorkcenter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_routing_workcenter_pkey");

            entity.ToTable("mrp_routing_workcenter", tb => tb.HasComment("Work Center Usage"));

            entity.HasIndex(e => e.BomId, "mrp_routing_workcenter_bom_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.BomId)
                .HasComment("Bill of Material")
                .HasColumnName("bom_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Operation")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Description")
                .HasColumnName("note");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TimeCycleManual)
                .HasComment("Manual Duration")
                .HasColumnName("time_cycle_manual");
            entity.Property(e => e.TimeMode)
                .HasComment("Duration Computation")
                .HasColumnType("character varying")
                .HasColumnName("time_mode");
            entity.Property(e => e.TimeModeBatch)
                .HasComment("Based on")
                .HasColumnName("time_mode_batch");
            entity.Property(e => e.WorkcenterId)
                .HasComment("Work Center")
                .HasColumnName("workcenter_id");
            entity.Property(e => e.WorksheetGoogleSlide)
                .HasComment("Google Slide")
                .HasColumnType("character varying")
                .HasColumnName("worksheet_google_slide");
            entity.Property(e => e.WorksheetType)
                .HasComment("Worksheet")
                .HasColumnType("character varying")
                .HasColumnName("worksheet_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpRoutingWorkcenters)
                .HasForeignKey(d => d.BomId)
                .HasConstraintName("mrp_routing_workcenter_bom_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpRoutingWorkcenterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_routing_workcenter_create_uid_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpRoutingWorkcenters)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_routing_workcenter_workcenter_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpRoutingWorkcenterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_routing_workcenter_write_uid_fkey");

            entity.HasMany(d => d.BlockedBies).WithMany(p => p.Operations)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpRoutingWorkcenterDependenciesRel",
                    r => r.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_blocked_by_id_fkey"),
                    l => l.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("OperationId")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_operation_id_fkey"),
                    j =>
                    {
                        j.HasKey("OperationId", "BlockedById").HasName("mrp_routing_workcenter_dependencies_rel_pkey");
                        j.ToTable("mrp_routing_workcenter_dependencies_rel", tb => tb.HasComment("RELATION BETWEEN mrp_routing_workcenter AND mrp_routing_workcenter"));
                        j.HasIndex(new[] { "BlockedById", "OperationId" }, "mrp_routing_workcenter_dependenc_blocked_by_id_operation_id_idx");
                        j.IndexerProperty<int>("OperationId").HasColumnName("operation_id");
                        j.IndexerProperty<int>("BlockedById").HasColumnName("blocked_by_id");
                    });

            entity.HasMany(d => d.Operations).WithMany(p => p.BlockedBies)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpRoutingWorkcenterDependenciesRel",
                    r => r.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("OperationId")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_operation_id_fkey"),
                    l => l.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_blocked_by_id_fkey"),
                    j =>
                    {
                        j.HasKey("OperationId", "BlockedById").HasName("mrp_routing_workcenter_dependencies_rel_pkey");
                        j.ToTable("mrp_routing_workcenter_dependencies_rel", tb => tb.HasComment("RELATION BETWEEN mrp_routing_workcenter AND mrp_routing_workcenter"));
                        j.HasIndex(new[] { "BlockedById", "OperationId" }, "mrp_routing_workcenter_dependenc_blocked_by_id_operation_id_idx");
                        j.IndexerProperty<int>("OperationId").HasColumnName("operation_id");
                        j.IndexerProperty<int>("BlockedById").HasColumnName("blocked_by_id");
                    });

            entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.MrpRoutingWorkcenters)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpRoutingWorkcenterProductTemplateAttributeValueRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_routing_workcenter_produc_product_template_attribute_v_fkey"),
                    l => l.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("MrpRoutingWorkcenterId")
                        .HasConstraintName("mrp_routing_workcenter_product_t_mrp_routing_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpRoutingWorkcenterId", "ProductTemplateAttributeValueId").HasName("mrp_routing_workcenter_product_template_attribute_value_re_pkey");
                        j.ToTable("mrp_routing_workcenter_product_template_attribute_value_rel", tb => tb.HasComment("RELATION BETWEEN mrp_routing_workcenter AND product_template_attribute_value"));
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpRoutingWorkcenterId" }, "mrp_routing_workcenter_produc_product_template_attribute_va_idx");
                        j.IndexerProperty<int>("MrpRoutingWorkcenterId").HasColumnName("mrp_routing_workcenter_id");
                        j.IndexerProperty<int>("ProductTemplateAttributeValueId").HasColumnName("product_template_attribute_value_id");
                    });
        });

        modelBuilder.Entity<MrpUnbuild>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_unbuild_pkey");

            entity.ToTable("mrp_unbuild", tb => tb.HasComment("Unbuild Order"));

            entity.HasIndex(e => e.CompanyId, "mrp_unbuild_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BomId)
                .HasComment("Bill of Material")
                .HasColumnName("bom_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationDestId)
                .HasComment("Destination Location")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId)
                .HasComment("Source Location")
                .HasColumnName("location_id");
            entity.Property(e => e.LotId)
                .HasComment("Lot/Serial Number")
                .HasColumnName("lot_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoId)
                .HasComment("Manufacturing Order")
                .HasColumnName("mo_id");
            entity.Property(e => e.Name)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Quantity")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_bom_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpUnbuildCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.MrpUnbuildLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.MrpUnbuildLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_lot_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Mo).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.MoId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_mo_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_product_uom_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpUnbuildWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_pkey");

            entity.ToTable("mrp_workcenter", tb => tb.HasComment("Work Center"));

            entity.HasIndex(e => e.CompanyId, "mrp_workcenter_company_id_index");

            entity.HasIndex(e => e.ResourceCalendarId, "mrp_workcenter_resource_calendar_id_index");

            entity.HasIndex(e => e.ResourceId, "mrp_workcenter_resource_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Code)
                .HasComment("Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CostsHour)
                .HasComment("Cost per hour")
                .HasColumnName("costs_hour");
            entity.Property(e => e.CostsHourAccountId)
                .HasComment("Analytic Account")
                .HasColumnName("costs_hour_account_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultCapacity)
                .HasComment("Capacity")
                .HasColumnName("default_capacity");
            entity.Property(e => e.Name)
                .HasComment("Work Center")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Description")
                .HasColumnName("note");
            entity.Property(e => e.OeeTarget)
                .HasComment("OEE Target")
                .HasColumnName("oee_target");
            entity.Property(e => e.ResourceCalendarId)
                .HasComment("Working Hours")
                .HasColumnName("resource_calendar_id");
            entity.Property(e => e.ResourceId)
                .HasComment("Resource")
                .HasColumnName("resource_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TimeEfficiency)
                .HasComment("Time Efficiency")
                .HasColumnName("time_efficiency");
            entity.Property(e => e.TimeStart)
                .HasComment("Setup Time")
                .HasColumnName("time_start");
            entity.Property(e => e.TimeStop)
                .HasComment("Cleanup Time")
                .HasColumnName("time_stop");
            entity.Property(e => e.WorkingState)
                .HasComment("Workcenter Status")
                .HasColumnType("character varying")
                .HasColumnName("working_state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.MrpWorkcenters)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_company_id_fkey");

            entity.HasOne(d => d.CostsHourAccount).WithMany(p => p.MrpWorkcenters)
                .HasForeignKey(d => d.CostsHourAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_costs_hour_account_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpWorkcenterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_create_uid_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.MrpWorkcenters)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_resource_calendar_id_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.MrpWorkcenters)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_resource_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpWorkcenterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_write_uid_fkey");

            entity.HasMany(d => d.AlternativeWorkcenters).WithMany(p => p.Workcenters)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkcenterAlternativeRel",
                    r => r.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("AlternativeWorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_alternative_workcenter_id_fkey"),
                    l => l.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("WorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkcenterId", "AlternativeWorkcenterId").HasName("mrp_workcenter_alternative_rel_pkey");
                        j.ToTable("mrp_workcenter_alternative_rel", tb => tb.HasComment("RELATION BETWEEN mrp_workcenter AND mrp_workcenter"));
                        j.HasIndex(new[] { "AlternativeWorkcenterId", "WorkcenterId" }, "mrp_workcenter_alternative_re_alternative_workcenter_id_wor_idx");
                        j.IndexerProperty<int>("WorkcenterId").HasColumnName("workcenter_id");
                        j.IndexerProperty<int>("AlternativeWorkcenterId").HasColumnName("alternative_workcenter_id");
                    });

            entity.HasMany(d => d.MrpWorkcenterTags).WithMany(p => p.MrpWorkcenters)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkcenterMrpWorkcenterTagRel",
                    r => r.HasOne<MrpWorkcenterTag>().WithMany()
                        .HasForeignKey("MrpWorkcenterTagId")
                        .HasConstraintName("mrp_workcenter_mrp_workcenter_tag_re_mrp_workcenter_tag_id_fkey"),
                    l => l.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("MrpWorkcenterId")
                        .HasConstraintName("mrp_workcenter_mrp_workcenter_tag_rel_mrp_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpWorkcenterId", "MrpWorkcenterTagId").HasName("mrp_workcenter_mrp_workcenter_tag_rel_pkey");
                        j.ToTable("mrp_workcenter_mrp_workcenter_tag_rel", tb => tb.HasComment("RELATION BETWEEN mrp_workcenter AND mrp_workcenter_tag"));
                        j.HasIndex(new[] { "MrpWorkcenterTagId", "MrpWorkcenterId" }, "mrp_workcenter_mrp_workcenter_mrp_workcenter_tag_id_mrp_wor_idx");
                        j.IndexerProperty<int>("MrpWorkcenterId").HasColumnName("mrp_workcenter_id");
                        j.IndexerProperty<int>("MrpWorkcenterTagId").HasColumnName("mrp_workcenter_tag_id");
                    });

            entity.HasMany(d => d.Workcenters).WithMany(p => p.AlternativeWorkcenters)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkcenterAlternativeRel",
                    r => r.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("WorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_workcenter_id_fkey"),
                    l => l.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("AlternativeWorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_alternative_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkcenterId", "AlternativeWorkcenterId").HasName("mrp_workcenter_alternative_rel_pkey");
                        j.ToTable("mrp_workcenter_alternative_rel", tb => tb.HasComment("RELATION BETWEEN mrp_workcenter AND mrp_workcenter"));
                        j.HasIndex(new[] { "AlternativeWorkcenterId", "WorkcenterId" }, "mrp_workcenter_alternative_re_alternative_workcenter_id_wor_idx");
                        j.IndexerProperty<int>("WorkcenterId").HasColumnName("workcenter_id");
                        j.IndexerProperty<int>("AlternativeWorkcenterId").HasColumnName("alternative_workcenter_id");
                    });
        });

        modelBuilder.Entity<MrpWorkcenterCapacity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_capacity_pkey");

            entity.ToTable("mrp_workcenter_capacity", tb => tb.HasComment("Work Center Capacity"));

            entity.HasIndex(e => new { e.WorkcenterId, e.ProductId }, "mrp_workcenter_capacity_unique_product").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Capacity)
                .HasComment("Capacity")
                .HasColumnName("capacity");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.TimeStart)
                .HasComment("Setup Time (minutes)")
                .HasColumnName("time_start");
            entity.Property(e => e.TimeStop)
                .HasComment("Cleanup Time (minutes)")
                .HasColumnName("time_stop");
            entity.Property(e => e.WorkcenterId)
                .HasComment("Work Center")
                .HasColumnName("workcenter_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpWorkcenterCapacityCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_capacity_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpWorkcenterCapacities)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_capacity_product_id_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpWorkcenterCapacities)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_capacity_workcenter_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpWorkcenterCapacityWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_capacity_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterProductivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_productivity_pkey");

            entity.ToTable("mrp_workcenter_productivity", tb => tb.HasComment("Workcenter Productivity Log"));

            entity.HasIndex(e => e.CompanyId, "mrp_workcenter_productivity_company_id_index");

            entity.HasIndex(e => e.WorkcenterId, "mrp_workcenter_productivity_workcenter_id_index");

            entity.HasIndex(e => e.WorkorderId, "mrp_workcenter_productivity_workorder_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CostAlreadyRecorded)
                .HasComment("Cost Recorded")
                .HasColumnName("cost_already_recorded");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateEnd)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.Duration)
                .HasComment("Duration")
                .HasColumnName("duration");
            entity.Property(e => e.LossId)
                .HasComment("Loss Reason")
                .HasColumnName("loss_id");
            entity.Property(e => e.LossType)
                .HasComment("Effectiveness")
                .HasColumnType("character varying")
                .HasColumnName("loss_type");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WorkcenterId)
                .HasComment("Work Center")
                .HasColumnName("workcenter_id");
            entity.Property(e => e.WorkorderId)
                .HasComment("Work Order")
                .HasColumnName("workorder_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.MrpWorkcenterProductivities)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_productivity_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpWorkcenterProductivityCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_create_uid_fkey");

            entity.HasOne(d => d.Loss).WithMany(p => p.MrpWorkcenterProductivities)
                .HasForeignKey(d => d.LossId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_productivity_loss_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.MrpWorkcenterProductivityUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_user_id_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpWorkcenterProductivities)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_productivity_workcenter_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.MrpWorkcenterProductivities)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_workorder_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpWorkcenterProductivityWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterProductivityLoss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_productivity_loss_pkey");

            entity.ToTable("mrp_workcenter_productivity_loss", tb => tb.HasComment("Workcenter Productivity Losses"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LossId)
                .HasComment("Category")
                .HasColumnName("loss_id");
            entity.Property(e => e.LossType)
                .HasComment("Effectiveness Category")
                .HasColumnType("character varying")
                .HasColumnName("loss_type");
            entity.Property(e => e.Manual)
                .HasComment("Is a Blocking Reason")
                .HasColumnName("manual");
            entity.Property(e => e.Name)
                .HasComment("Blocking Reason")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpWorkcenterProductivityLossCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_create_uid_fkey");

            entity.HasOne(d => d.Loss).WithMany(p => p.MrpWorkcenterProductivityLosses)
                .HasForeignKey(d => d.LossId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_loss_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpWorkcenterProductivityLossWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterProductivityLossType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_productivity_loss_type_pkey");

            entity.ToTable("mrp_workcenter_productivity_loss_type", tb => tb.HasComment("MRP Workorder productivity losses"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LossType)
                .HasComment("Category")
                .HasColumnType("character varying")
                .HasColumnName("loss_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpWorkcenterProductivityLossTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpWorkcenterProductivityLossTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_type_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_tag_pkey");

            entity.ToTable("mrp_workcenter_tag", tb => tb.HasComment("Add tag for the workcenter"));

            entity.HasIndex(e => e.Name, "mrp_workcenter_tag_tag_name_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpWorkcenterTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpWorkcenterTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_tag_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkorder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workorder_pkey");

            entity.ToTable("mrp_workorder", tb => tb.HasComment("Work Order"));

            entity.HasIndex(e => e.State, "mrp_workorder_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CostsHour)
                .HasComment("Cost per hour")
                .HasColumnName("costs_hour");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFinished)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_finished");
            entity.Property(e => e.DatePlannedFinished)
                .HasComment("Scheduled End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_finished");
            entity.Property(e => e.DatePlannedStart)
                .HasComment("Scheduled Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_start");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.Duration)
                .HasComment("Real Duration")
                .HasColumnName("duration");
            entity.Property(e => e.DurationExpected)
                .HasComment("Expected Duration")
                .HasColumnName("duration_expected");
            entity.Property(e => e.DurationPercent)
                .HasComment("Duration Deviation (%)")
                .HasColumnName("duration_percent");
            entity.Property(e => e.DurationUnit)
                .HasComment("Duration Per Unit")
                .HasColumnName("duration_unit");
            entity.Property(e => e.LeaveId)
                .HasComment("Leave")
                .HasColumnName("leave_id");
            entity.Property(e => e.MoAnalyticAccountLineId)
                .HasComment("Mo Analytic Account Line")
                .HasColumnName("mo_analytic_account_line_id");
            entity.Property(e => e.Name)
                .HasComment("Work Order")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OperationId)
                .HasComment("Operation")
                .HasColumnName("operation_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.ProductionAvailability)
                .HasComment("Stock Availability")
                .HasColumnType("character varying")
                .HasColumnName("production_availability");
            entity.Property(e => e.ProductionDate)
                .HasComment("Production Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("production_date");
            entity.Property(e => e.ProductionId)
                .HasComment("Manufacturing Order")
                .HasColumnName("production_id");
            entity.Property(e => e.QtyProduced)
                .HasComment("Quantity")
                .HasColumnName("qty_produced");
            entity.Property(e => e.QtyReportedFromPreviousWo)
                .HasComment("Carried Quantity")
                .HasColumnName("qty_reported_from_previous_wo");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WcAnalyticAccountLineId)
                .HasComment("Wc Analytic Account Line")
                .HasColumnName("wc_analytic_account_line_id");
            entity.Property(e => e.WorkcenterId)
                .HasComment("Work Center")
                .HasColumnName("workcenter_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.MrpWorkorderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_create_uid_fkey");

            entity.HasOne(d => d.Leave).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.LeaveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_leave_id_fkey");

            entity.HasOne(d => d.MoAnalyticAccountLine).WithMany(p => p.MrpWorkorderMoAnalyticAccountLines)
                .HasForeignKey(d => d.MoAnalyticAccountLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_mo_analytic_account_line_id_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_operation_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workorder_product_uom_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workorder_production_id_fkey");

            entity.HasOne(d => d.WcAnalyticAccountLine).WithMany(p => p.MrpWorkorderWcAnalyticAccountLines)
                .HasForeignKey(d => d.WcAnalyticAccountLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_wc_analytic_account_line_id_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workorder_workcenter_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.MrpWorkorderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_write_uid_fkey");

            entity.HasMany(d => d.BlockedBies).WithMany(p => p.Workorders)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkorderDependenciesRel",
                    r => r.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_workorder_dependencies_rel_blocked_by_id_fkey"),
                    l => l.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("WorkorderId")
                        .HasConstraintName("mrp_workorder_dependencies_rel_workorder_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkorderId", "BlockedById").HasName("mrp_workorder_dependencies_rel_pkey");
                        j.ToTable("mrp_workorder_dependencies_rel", tb => tb.HasComment("RELATION BETWEEN mrp_workorder AND mrp_workorder"));
                        j.HasIndex(new[] { "BlockedById", "WorkorderId" }, "mrp_workorder_dependencies_rel_blocked_by_id_workorder_id_idx");
                        j.IndexerProperty<int>("WorkorderId").HasColumnName("workorder_id");
                        j.IndexerProperty<int>("BlockedById").HasColumnName("blocked_by_id");
                    });

            entity.HasMany(d => d.Workorders).WithMany(p => p.BlockedBies)
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkorderDependenciesRel",
                    r => r.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("WorkorderId")
                        .HasConstraintName("mrp_workorder_dependencies_rel_workorder_id_fkey"),
                    l => l.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_workorder_dependencies_rel_blocked_by_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkorderId", "BlockedById").HasName("mrp_workorder_dependencies_rel_pkey");
                        j.ToTable("mrp_workorder_dependencies_rel", tb => tb.HasComment("RELATION BETWEEN mrp_workorder AND mrp_workorder"));
                        j.HasIndex(new[] { "BlockedById", "WorkorderId" }, "mrp_workorder_dependencies_rel_blocked_by_id_workorder_id_idx");
                        j.IndexerProperty<int>("WorkorderId").HasColumnName("workorder_id");
                        j.IndexerProperty<int>("BlockedById").HasColumnName("blocked_by_id");
                    });
        });

        modelBuilder.Entity<NoteNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("note_note_pkey");

            entity.ToTable("note_note", tb => tb.HasComment("Note"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateDone)
                .HasComment("Date done")
                .HasColumnName("date_done");
            entity.Property(e => e.Memo)
                .HasComment("Note Content")
                .HasColumnName("memo");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Note Summary")
                .HasColumnName("name");
            entity.Property(e => e.Open)
                .HasComment("Active")
                .HasColumnName("open");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.UserId)
                .HasComment("Owner")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.NoteNotes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.NoteNoteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.NoteNotes)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_message_main_attachment_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.NoteNoteUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.NoteNoteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_write_uid_fkey");

            entity.HasMany(d => d.Stages).WithMany(p => p.Notes)
                .UsingEntity<Dictionary<string, object>>(
                    "NoteStageRel",
                    r => r.HasOne<NoteStage>().WithMany()
                        .HasForeignKey("StageId")
                        .HasConstraintName("note_stage_rel_stage_id_fkey"),
                    l => l.HasOne<NoteNote>().WithMany()
                        .HasForeignKey("NoteId")
                        .HasConstraintName("note_stage_rel_note_id_fkey"),
                    j =>
                    {
                        j.HasKey("NoteId", "StageId").HasName("note_stage_rel_pkey");
                        j.ToTable("note_stage_rel", tb => tb.HasComment("RELATION BETWEEN note_note AND note_stage"));
                        j.HasIndex(new[] { "StageId", "NoteId" }, "note_stage_rel_stage_id_note_id_idx");
                        j.IndexerProperty<int>("NoteId").HasColumnName("note_id");
                        j.IndexerProperty<int>("StageId").HasColumnName("stage_id");
                    });

            entity.HasMany(d => d.Tags).WithMany(p => p.Notes)
                .UsingEntity<Dictionary<string, object>>(
                    "NoteTagsRel",
                    r => r.HasOne<NoteTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("note_tags_rel_tag_id_fkey"),
                    l => l.HasOne<NoteNote>().WithMany()
                        .HasForeignKey("NoteId")
                        .HasConstraintName("note_tags_rel_note_id_fkey"),
                    j =>
                    {
                        j.HasKey("NoteId", "TagId").HasName("note_tags_rel_pkey");
                        j.ToTable("note_tags_rel", tb => tb.HasComment("RELATION BETWEEN note_note AND note_tag"));
                        j.HasIndex(new[] { "TagId", "NoteId" }, "note_tags_rel_tag_id_note_id_idx");
                        j.IndexerProperty<int>("NoteId").HasColumnName("note_id");
                        j.IndexerProperty<int>("TagId").HasColumnName("tag_id");
                    });
        });

        modelBuilder.Entity<NoteStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("note_stage_pkey");

            entity.ToTable("note_stage", tb => tb.HasComment("Note Stage"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Fold)
                .HasComment("Folded by Default")
                .HasColumnName("fold");
            entity.Property(e => e.Name)
                .HasComment("Stage Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.UserId)
                .HasComment("Owner")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.NoteStageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_stage_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.NoteStageUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("note_stage_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.NoteStageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_stage_write_uid_fkey");
        });

        modelBuilder.Entity<NoteTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("note_tag_pkey");

            entity.ToTable("note_tag", tb => tb.HasComment("Note Tag"));

            entity.HasIndex(e => e.Name, "note_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.NoteTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.NoteTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_tag_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentIcon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_icon_pkey");

            entity.ToTable("payment_icon", tb => tb.HasComment("Payment Icon"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PaymentIconCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_icon_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PaymentIconWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_icon_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentLinkWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_link_wizard_pkey");

            entity.ToTable("payment_link_wizard", tb => tb.HasComment("Generate Payment Link"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.AmountMax)
                .HasComment("Amount Max")
                .HasColumnName("amount_max");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Description)
                .HasComment("Payment Ref")
                .HasColumnType("character varying")
                .HasColumnName("description");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PaymentProviderSelection)
                .HasComment("Allow Payment Provider")
                .HasColumnType("character varying")
                .HasColumnName("payment_provider_selection");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PaymentLinkWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.PaymentLinkWizards)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_currency_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PaymentLinkWizards)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PaymentLinkWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentProvider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_provider_pkey");

            entity.ToTable("payment_provider", tb => tb.HasComment("Payment Provider"));

            entity.HasIndex(e => e.CompanyId, "payment_provider_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllowExpressCheckout)
                .HasComment("Allow Express Checkout")
                .HasColumnName("allow_express_checkout");
            entity.Property(e => e.AllowTokenization)
                .HasComment("Allow Saving Payment Methods")
                .HasColumnName("allow_tokenization");
            entity.Property(e => e.AuthMsg)
                .HasComment("Authorize Message")
                .HasColumnType("jsonb")
                .HasColumnName("auth_msg");
            entity.Property(e => e.CancelMsg)
                .HasComment("Canceled Message")
                .HasColumnType("jsonb")
                .HasColumnName("cancel_msg");
            entity.Property(e => e.CaptureManually)
                .HasComment("Capture Amount Manually")
                .HasColumnName("capture_manually");
            entity.Property(e => e.Code)
                .HasComment("Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DisplayAs)
                .HasComment("Displayed as")
                .HasColumnType("jsonb")
                .HasColumnName("display_as");
            entity.Property(e => e.DoneMsg)
                .HasComment("Done Message")
                .HasColumnType("jsonb")
                .HasColumnName("done_msg");
            entity.Property(e => e.ExpressCheckoutFormViewId)
                .HasComment("Express Checkout Form Template")
                .HasColumnName("express_checkout_form_view_id");
            entity.Property(e => e.FeesActive)
                .HasComment("Add Extra Fees")
                .HasColumnName("fees_active");
            entity.Property(e => e.FeesDomFixed)
                .HasComment("Fixed domestic fees")
                .HasColumnName("fees_dom_fixed");
            entity.Property(e => e.FeesDomVar)
                .HasComment("Variable domestic fees (in percents)")
                .HasColumnName("fees_dom_var");
            entity.Property(e => e.FeesIntFixed)
                .HasComment("Fixed international fees")
                .HasColumnName("fees_int_fixed");
            entity.Property(e => e.FeesIntVar)
                .HasComment("Variable international fees (in percents)")
                .HasColumnName("fees_int_var");
            entity.Property(e => e.InlineFormViewId)
                .HasComment("Inline Form Template")
                .HasColumnName("inline_form_view_id");
            entity.Property(e => e.IsPublished)
                .HasComment("Published")
                .HasColumnName("is_published");
            entity.Property(e => e.MaximumAmount)
                .HasComment("Maximum Amount")
                .HasColumnName("maximum_amount");
            entity.Property(e => e.ModuleId)
                .HasComment("Corresponding Module")
                .HasColumnName("module_id");
            entity.Property(e => e.ModuleState)
                .HasComment("Installation State")
                .HasColumnType("character varying")
                .HasColumnName("module_state");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PendingMsg)
                .HasComment("Pending Message")
                .HasColumnType("jsonb")
                .HasColumnName("pending_msg");
            entity.Property(e => e.PreMsg)
                .HasComment("Help Message")
                .HasColumnType("jsonb")
                .HasColumnName("pre_msg");
            entity.Property(e => e.RedirectFormViewId)
                .HasComment("Redirect Form Template")
                .HasColumnName("redirect_form_view_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SoReferenceType)
                .HasComment("Communication")
                .HasColumnType("character varying")
                .HasColumnName("so_reference_type");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TokenInlineFormViewId)
                .HasComment("Token Inline Form Template")
                .HasColumnName("token_inline_form_view_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.PaymentProviders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PaymentProviderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_create_uid_fkey");

            entity.HasOne(d => d.ExpressCheckoutFormView).WithMany(p => p.PaymentProviderExpressCheckoutFormViews)
                .HasForeignKey(d => d.ExpressCheckoutFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_express_checkout_form_view_id_fkey");

            entity.HasOne(d => d.InlineFormView).WithMany(p => p.PaymentProviderInlineFormViews)
                .HasForeignKey(d => d.InlineFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_inline_form_view_id_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.PaymentProviders)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_module_id_fkey");

            entity.HasOne(d => d.RedirectFormView).WithMany(p => p.PaymentProviderRedirectFormViews)
                .HasForeignKey(d => d.RedirectFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_redirect_form_view_id_fkey");

            entity.HasOne(d => d.TokenInlineFormView).WithMany(p => p.PaymentProviderTokenInlineFormViews)
                .HasForeignKey(d => d.TokenInlineFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_token_inline_form_view_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.PaymentProviders)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PaymentProviderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_write_uid_fkey");

            entity.HasMany(d => d.Countries).WithMany(p => p.Payments)
                .UsingEntity<Dictionary<string, object>>(
                    "PaymentCountryRel",
                    r => r.HasOne<ResCountry>().WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("payment_country_rel_country_id_fkey"),
                    l => l.HasOne<PaymentProvider>().WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("payment_country_rel_payment_id_fkey"),
                    j =>
                    {
                        j.HasKey("PaymentId", "CountryId").HasName("payment_country_rel_pkey");
                        j.ToTable("payment_country_rel", tb => tb.HasComment("RELATION BETWEEN payment_provider AND res_country"));
                        j.HasIndex(new[] { "CountryId", "PaymentId" }, "payment_country_rel_country_id_payment_id_idx");
                        j.IndexerProperty<int>("PaymentId").HasColumnName("payment_id");
                        j.IndexerProperty<int>("CountryId").HasColumnName("country_id");
                    });

            entity.HasMany(d => d.PaymentIcons).WithMany(p => p.PaymentProviders)
                .UsingEntity<Dictionary<string, object>>(
                    "PaymentIconPaymentProviderRel",
                    r => r.HasOne<PaymentIcon>().WithMany()
                        .HasForeignKey("PaymentIconId")
                        .HasConstraintName("payment_icon_payment_provider_rel_payment_icon_id_fkey"),
                    l => l.HasOne<PaymentProvider>().WithMany()
                        .HasForeignKey("PaymentProviderId")
                        .HasConstraintName("payment_icon_payment_provider_rel_payment_provider_id_fkey"),
                    j =>
                    {
                        j.HasKey("PaymentProviderId", "PaymentIconId").HasName("payment_icon_payment_provider_rel_pkey");
                        j.ToTable("payment_icon_payment_provider_rel", tb => tb.HasComment("RELATION BETWEEN payment_provider AND payment_icon"));
                        j.HasIndex(new[] { "PaymentIconId", "PaymentProviderId" }, "payment_icon_payment_provider_payment_icon_id_payment_provi_idx");
                        j.IndexerProperty<int>("PaymentProviderId").HasColumnName("payment_provider_id");
                        j.IndexerProperty<int>("PaymentIconId").HasColumnName("payment_icon_id");
                    });
        });

        modelBuilder.Entity<PaymentProviderOnboardingWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_provider_onboarding_wizard_pkey");

            entity.ToTable("payment_provider_onboarding_wizard", tb => tb.HasComment("Payment provider onboarding wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccNumber)
                .HasComment("Account Number")
                .HasColumnType("character varying")
                .HasColumnName("acc_number");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.JournalName)
                .HasComment("Bank Name")
                .HasColumnType("character varying")
                .HasColumnName("journal_name");
            entity.Property(e => e.ManualName)
                .HasComment("Method")
                .HasColumnType("character varying")
                .HasColumnName("manual_name");
            entity.Property(e => e.ManualPostMsg)
                .HasComment("Payment Instructions")
                .HasColumnName("manual_post_msg");
            entity.Property(e => e.PaymentMethod)
                .HasComment("Payment Method")
                .HasColumnType("character varying")
                .HasColumnName("payment_method");
            entity.Property(e => e.PaypalEmailAccount)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("paypal_email_account");
            entity.Property(e => e.PaypalPdtToken)
                .HasComment("PDT Identity Token")
                .HasColumnType("character varying")
                .HasColumnName("paypal_pdt_token");
            entity.Property(e => e.PaypalSellerAccount)
                .HasComment("Merchant Account ID")
                .HasColumnType("character varying")
                .HasColumnName("paypal_seller_account");
            entity.Property(e => e.PaypalUserType)
                .HasComment("Paypal User Type")
                .HasColumnType("character varying")
                .HasColumnName("paypal_user_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PaymentProviderOnboardingWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_onboarding_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PaymentProviderOnboardingWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_onboarding_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentRefundWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_refund_wizard_pkey");

            entity.ToTable("payment_refund_wizard", tb => tb.HasComment("Payment Refund Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AmountToRefund)
                .HasComment("Refund Amount")
                .HasColumnName("amount_to_refund");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PaymentId)
                .HasComment("Payment")
                .HasColumnName("payment_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PaymentRefundWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_refund_wizard_create_uid_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.PaymentRefundWizards)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_refund_wizard_payment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PaymentRefundWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_refund_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_token_pkey");

            entity.ToTable("payment_token", tb => tb.HasComment("Payment Token"));

            entity.HasIndex(e => e.CompanyId, "payment_token_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PaymentDetails)
                .HasComment("Payment Details")
                .HasColumnType("character varying")
                .HasColumnName("payment_details");
            entity.Property(e => e.ProviderId)
                .HasComment("Provider")
                .HasColumnName("provider_id");
            entity.Property(e => e.ProviderRef)
                .HasComment("Provider Reference")
                .HasColumnType("character varying")
                .HasColumnName("provider_ref");
            entity.Property(e => e.Verified)
                .HasComment("Verified")
                .HasColumnName("verified");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.PaymentTokens)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_token_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PaymentTokenCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_token_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PaymentTokens)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_token_partner_id_fkey");

            entity.HasOne(d => d.Provider).WithMany(p => p.PaymentTokens)
                .HasForeignKey(d => d.ProviderId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_token_provider_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PaymentTokenWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_token_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_transaction_pkey");

            entity.ToTable("payment_transaction", tb => tb.HasComment("Payment Transaction"));

            entity.HasIndex(e => e.CompanyId, "payment_transaction_company_id_index");

            entity.HasIndex(e => e.Operation, "payment_transaction_operation_index");

            entity.HasIndex(e => e.Reference, "payment_transaction_reference_uniq").IsUnique();

            entity.HasIndex(e => e.State, "payment_transaction_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.CallbackHash)
                .HasComment("Callback Hash")
                .HasColumnType("character varying")
                .HasColumnName("callback_hash");
            entity.Property(e => e.CallbackIsDone)
                .HasComment("Callback Done")
                .HasColumnName("callback_is_done");
            entity.Property(e => e.CallbackMethod)
                .HasComment("Callback Method")
                .HasColumnType("character varying")
                .HasColumnName("callback_method");
            entity.Property(e => e.CallbackModelId)
                .HasComment("Callback Document Model")
                .HasColumnName("callback_model_id");
            entity.Property(e => e.CallbackResId)
                .HasComment("Callback Record ID")
                .HasColumnName("callback_res_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Fees)
                .HasComment("Fees")
                .HasColumnName("fees");
            entity.Property(e => e.IsDonation)
                .HasComment("Is donation")
                .HasColumnName("is_donation");
            entity.Property(e => e.IsPostProcessed)
                .HasComment("Is Post-processed")
                .HasColumnName("is_post_processed");
            entity.Property(e => e.LandingRoute)
                .HasComment("Landing Route")
                .HasColumnType("character varying")
                .HasColumnName("landing_route");
            entity.Property(e => e.LastStateChange)
                .HasComment("Last State Change Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_state_change");
            entity.Property(e => e.Operation)
                .HasComment("Operation")
                .HasColumnType("character varying")
                .HasColumnName("operation");
            entity.Property(e => e.PartnerAddress)
                .HasComment("Address")
                .HasColumnType("character varying")
                .HasColumnName("partner_address");
            entity.Property(e => e.PartnerCity)
                .HasComment("City")
                .HasColumnType("character varying")
                .HasColumnName("partner_city");
            entity.Property(e => e.PartnerCountryId)
                .HasComment("Country")
                .HasColumnName("partner_country_id");
            entity.Property(e => e.PartnerEmail)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("partner_email");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerLang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("partner_lang");
            entity.Property(e => e.PartnerName)
                .HasComment("Partner Name")
                .HasColumnType("character varying")
                .HasColumnName("partner_name");
            entity.Property(e => e.PartnerPhone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("partner_phone");
            entity.Property(e => e.PartnerStateId)
                .HasComment("State")
                .HasColumnName("partner_state_id");
            entity.Property(e => e.PartnerZip)
                .HasComment("Zip")
                .HasColumnType("character varying")
                .HasColumnName("partner_zip");
            entity.Property(e => e.PaymentId)
                .HasComment("Payment")
                .HasColumnName("payment_id");
            entity.Property(e => e.ProviderId)
                .HasComment("Provider")
                .HasColumnName("provider_id");
            entity.Property(e => e.ProviderReference)
                .HasComment("Provider Reference")
                .HasColumnType("character varying")
                .HasColumnName("provider_reference");
            entity.Property(e => e.Reference)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("reference");
            entity.Property(e => e.SourceTransactionId)
                .HasComment("Source Transaction")
                .HasColumnName("source_transaction_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.StateMessage)
                .HasComment("Message")
                .HasColumnName("state_message");
            entity.Property(e => e.TokenId)
                .HasComment("Payment Token")
                .HasColumnName("token_id");
            entity.Property(e => e.Tokenize)
                .HasComment("Create Token")
                .HasColumnName("tokenize");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CallbackModel).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.CallbackModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_callback_model_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PaymentTransactionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_currency_id_fkey");

            entity.HasOne(d => d.PartnerCountry).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.PartnerCountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_partner_country_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_partner_id_fkey");

            entity.HasOne(d => d.PartnerState).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.PartnerStateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_partner_state_id_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_payment_id_fkey");

            entity.HasOne(d => d.Provider).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.ProviderId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_provider_id_fkey");

            entity.HasOne(d => d.SourceTransaction).WithMany(p => p.InverseSourceTransaction)
                .HasForeignKey(d => d.SourceTransactionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_source_transaction_id_fkey");

            entity.HasOne(d => d.Token).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.TokenId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_token_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PaymentTransactionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_write_uid_fkey");

            entity.HasMany(d => d.SaleOrders).WithMany(p => p.Transactions)
                .UsingEntity<Dictionary<string, object>>(
                    "SaleOrderTransactionRel",
                    r => r.HasOne<SaleOrder>().WithMany()
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("sale_order_transaction_rel_sale_order_id_fkey"),
                    l => l.HasOne<PaymentTransaction>().WithMany()
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("sale_order_transaction_rel_transaction_id_fkey"),
                    j =>
                    {
                        j.HasKey("TransactionId", "SaleOrderId").HasName("sale_order_transaction_rel_pkey");
                        j.ToTable("sale_order_transaction_rel", tb => tb.HasComment("RELATION BETWEEN payment_transaction AND sale_order"));
                        j.HasIndex(new[] { "SaleOrderId", "TransactionId" }, "sale_order_transaction_rel_sale_order_id_transaction_id_idx");
                        j.IndexerProperty<int>("TransactionId").HasColumnName("transaction_id");
                        j.IndexerProperty<int>("SaleOrderId").HasColumnName("sale_order_id");
                    });
        });

        modelBuilder.Entity<PhoneBlacklist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("phone_blacklist_pkey");

            entity.ToTable("phone_blacklist", tb => tb.HasComment("Phone Blacklist"));

            entity.HasIndex(e => e.Number, "phone_blacklist_unique_number").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Number)
                .HasComment("Phone Number")
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PhoneBlacklistCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.PhoneBlacklists)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_message_main_attachment_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PhoneBlacklistWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_write_uid_fkey");
        });

        modelBuilder.Entity<PhoneBlacklistRemove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("phone_blacklist_remove_pkey");

            entity.ToTable("phone_blacklist_remove", tb => tb.HasComment("Remove phone from blacklist"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Phone)
                .HasComment("Phone Number")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.Reason)
                .HasComment("Reason")
                .HasColumnType("character varying")
                .HasColumnName("reason");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PhoneBlacklistRemoveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_remove_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PhoneBlacklistRemoveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_remove_write_uid_fkey");
        });

        modelBuilder.Entity<PickingLabelType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("picking_label_type_pkey");

            entity.ToTable("picking_label_type", tb => tb.HasComment("Choose whether to print product or lot/sn labels"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LabelType)
                .HasComment("Labels to print")
                .HasColumnType("character varying")
                .HasColumnName("label_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PickingLabelTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("picking_label_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PickingLabelTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("picking_label_type_write_uid_fkey");

            entity.HasMany(d => d.StockPickings).WithMany(p => p.PickingLabelTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "PickingLabelTypeStockPickingRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("picking_label_type_stock_picking_rel_stock_picking_id_fkey"),
                    l => l.HasOne<PickingLabelType>().WithMany()
                        .HasForeignKey("PickingLabelTypeId")
                        .HasConstraintName("picking_label_type_stock_picking_rel_picking_label_type_id_fkey"),
                    j =>
                    {
                        j.HasKey("PickingLabelTypeId", "StockPickingId").HasName("picking_label_type_stock_picking_rel_pkey");
                        j.ToTable("picking_label_type_stock_picking_rel", tb => tb.HasComment("RELATION BETWEEN picking_label_type AND stock_picking"));
                        j.HasIndex(new[] { "StockPickingId", "PickingLabelTypeId" }, "picking_label_type_stock_pick_stock_picking_id_picking_labe_idx");
                        j.IndexerProperty<int>("PickingLabelTypeId").HasColumnName("picking_label_type_id");
                        j.IndexerProperty<int>("StockPickingId").HasColumnName("stock_picking_id");
                    });
        });

        modelBuilder.Entity<PortalShare>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("portal_share_pkey");

            entity.ToTable("portal_share", tb => tb.HasComment("Portal Sharing"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PortalShareCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_share_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PortalShareWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_share_write_uid_fkey");

            entity.HasMany(d => d.ResPartners).WithMany(p => p.PortalShares)
                .UsingEntity<Dictionary<string, object>>(
                    "PortalShareResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("portal_share_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<PortalShare>().WithMany()
                        .HasForeignKey("PortalShareId")
                        .HasConstraintName("portal_share_res_partner_rel_portal_share_id_fkey"),
                    j =>
                    {
                        j.HasKey("PortalShareId", "ResPartnerId").HasName("portal_share_res_partner_rel_pkey");
                        j.ToTable("portal_share_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN portal_share AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "PortalShareId" }, "portal_share_res_partner_rel_res_partner_id_portal_share_id_idx");
                        j.IndexerProperty<int>("PortalShareId").HasColumnName("portal_share_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<PortalWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("portal_wizard_pkey");

            entity.ToTable("portal_wizard", tb => tb.HasComment("Grant Portal Access"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WelcomeMessage)
                .HasComment("Invitation Message")
                .HasColumnName("welcome_message");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PortalWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PortalWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_write_uid_fkey");

            entity.HasMany(d => d.ResPartners).WithMany(p => p.PortalWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "PortalWizardResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("portal_wizard_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<PortalWizard>().WithMany()
                        .HasForeignKey("PortalWizardId")
                        .HasConstraintName("portal_wizard_res_partner_rel_portal_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("PortalWizardId", "ResPartnerId").HasName("portal_wizard_res_partner_rel_pkey");
                        j.ToTable("portal_wizard_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN portal_wizard AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "PortalWizardId" }, "portal_wizard_res_partner_rel_res_partner_id_portal_wizard__idx");
                        j.IndexerProperty<int>("PortalWizardId").HasColumnName("portal_wizard_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<PortalWizardUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("portal_wizard_user_pkey");

            entity.ToTable("portal_wizard_user", tb => tb.HasComment("Portal User Config"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.PartnerId)
                .HasComment("Contact")
                .HasColumnName("partner_id");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PortalWizardUserCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_user_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PortalWizardUsers)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("portal_wizard_user_partner_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.PortalWizardUsers)
                .HasForeignKey(d => d.WizardId)
                .HasConstraintName("portal_wizard_user_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PortalWizardUserWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_user_write_uid_fkey");
        });

        modelBuilder.Entity<PosBill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_bill_pkey");

            entity.ToTable("pos_bill", tb => tb.HasComment("Coins/Bills"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Value)
                .HasComment("Coin/Bill Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosBillCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_bill_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosBillWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_bill_write_uid_fkey");
        });

        modelBuilder.Entity<PosCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_category_pkey");

            entity.ToTable("pos_category", tb => tb.HasComment("Point of Sale Category"));

            entity.HasIndex(e => e.ParentId, "pos_category_parent_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Category Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Category")
                .HasColumnName("parent_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_category_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_category_write_uid_fkey");
        });

        modelBuilder.Entity<PosCloseSessionWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_close_session_wizard_pkey");

            entity.ToTable("pos_close_session_wizard", tb => tb.HasComment("Close Session Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Destination account")
                .HasColumnName("account_id");
            entity.Property(e => e.AccountReadonly)
                .HasComment("Destination account is readonly")
                .HasColumnName("account_readonly");
            entity.Property(e => e.AmountToBalance)
                .HasComment("Amount to balance")
                .HasColumnName("amount_to_balance");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Message)
                .HasComment("Information message")
                .HasColumnName("message");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.PosCloseSessionWizards)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_close_session_wizard_account_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosCloseSessionWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_close_session_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosCloseSessionWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_close_session_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PosConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_config_pkey");

            entity.ToTable("pos_config", tb => tb.HasComment("Point of Sale Configuration"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AmountAuthorizedDiff)
                .HasComment("Amount Authorized Difference")
                .HasColumnName("amount_authorized_diff");
            entity.Property(e => e.CashRounding)
                .HasComment("Cash Rounding")
                .HasColumnName("cash_rounding");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CrmTeamId)
                .HasComment("Sales Team")
                .HasColumnName("crm_team_id");
            entity.Property(e => e.DefaultFiscalPositionId)
                .HasComment("Default Fiscal Position")
                .HasColumnName("default_fiscal_position_id");
            entity.Property(e => e.DownPaymentProductId)
                .HasComment("Down Payment Product")
                .HasColumnName("down_payment_product_id");
            entity.Property(e => e.EpsonPrinterIp)
                .HasComment("Epson Printer IP")
                .HasColumnType("character varying")
                .HasColumnName("epson_printer_ip");
            entity.Property(e => e.GroupPosManagerId)
                .HasComment("Point of Sale Manager Group")
                .HasColumnName("group_pos_manager_id");
            entity.Property(e => e.GroupPosUserId)
                .HasComment("Point of Sale User Group")
                .HasColumnName("group_pos_user_id");
            entity.Property(e => e.IfaceBigScrollbars)
                .HasComment("Large Scrollbars")
                .HasColumnName("iface_big_scrollbars");
            entity.Property(e => e.IfaceCashdrawer)
                .HasComment("Cashdrawer")
                .HasColumnName("iface_cashdrawer");
            entity.Property(e => e.IfaceCustomerFacingDisplayLocal)
                .HasComment("Local Customer Facing Display")
                .HasColumnName("iface_customer_facing_display_local");
            entity.Property(e => e.IfaceCustomerFacingDisplayViaProxy)
                .HasComment("Customer Facing Display")
                .HasColumnName("iface_customer_facing_display_via_proxy");
            entity.Property(e => e.IfaceElectronicScale)
                .HasComment("Electronic Scale")
                .HasColumnName("iface_electronic_scale");
            entity.Property(e => e.IfacePrintAuto)
                .HasComment("Automatic Receipt Printing")
                .HasColumnName("iface_print_auto");
            entity.Property(e => e.IfacePrintSkipScreen)
                .HasComment("Skip Preview Screen")
                .HasColumnName("iface_print_skip_screen");
            entity.Property(e => e.IfacePrintViaProxy)
                .HasComment("Print via Proxy")
                .HasColumnName("iface_print_via_proxy");
            entity.Property(e => e.IfaceScanViaProxy)
                .HasComment("Scan via Proxy")
                .HasColumnName("iface_scan_via_proxy");
            entity.Property(e => e.IfaceStartCategId)
                .HasComment("Initial Category")
                .HasColumnName("iface_start_categ_id");
            entity.Property(e => e.IfaceTaxIncluded)
                .HasComment("Tax Display")
                .HasColumnType("character varying")
                .HasColumnName("iface_tax_included");
            entity.Property(e => e.IfaceTipproduct)
                .HasComment("Product tips")
                .HasColumnName("iface_tipproduct");
            entity.Property(e => e.InvoiceJournalId)
                .HasComment("Invoice Journal")
                .HasColumnName("invoice_journal_id");
            entity.Property(e => e.IsHeaderOrFooter)
                .HasComment("Custom Header & Footer")
                .HasColumnName("is_header_or_footer");
            entity.Property(e => e.IsMarginsCostsAccessibleToEveryUser)
                .HasComment("Margins & Costs")
                .HasColumnName("is_margins_costs_accessible_to_every_user");
            entity.Property(e => e.IsPosbox)
                .HasComment("PosBox")
                .HasColumnName("is_posbox");
            entity.Property(e => e.JournalId)
                .HasComment("Point of Sale Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.LimitCategories)
                .HasComment("Restrict Categories")
                .HasColumnName("limit_categories");
            entity.Property(e => e.LimitedPartnersAmount)
                .HasComment("Limited Partners Amount")
                .HasColumnName("limited_partners_amount");
            entity.Property(e => e.LimitedPartnersLoading)
                .HasComment("Limited Partners Loading")
                .HasColumnName("limited_partners_loading");
            entity.Property(e => e.LimitedProductsAmount)
                .HasComment("Limited Products Amount")
                .HasColumnName("limited_products_amount");
            entity.Property(e => e.LimitedProductsLoading)
                .HasComment("Limited Product Loading")
                .HasColumnName("limited_products_loading");
            entity.Property(e => e.ManualDiscount)
                .HasComment("Line Discounts")
                .HasColumnName("manual_discount");
            entity.Property(e => e.ModulePosDiscount)
                .HasComment("Global Discounts")
                .HasColumnName("module_pos_discount");
            entity.Property(e => e.ModulePosHr)
                .HasComment("Module Pos Hr")
                .HasColumnName("module_pos_hr");
            entity.Property(e => e.ModulePosMercury)
                .HasComment("Integrated Card Payments")
                .HasColumnName("module_pos_mercury");
            entity.Property(e => e.ModulePosRestaurant)
                .HasComment("Is a Bar/Restaurant")
                .HasColumnName("module_pos_restaurant");
            entity.Property(e => e.Name)
                .HasComment("Point of Sale")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OnlyRoundCashMethod)
                .HasComment("Only apply rounding on cash")
                .HasColumnName("only_round_cash_method");
            entity.Property(e => e.OtherDevices)
                .HasComment("Other Devices")
                .HasColumnName("other_devices");
            entity.Property(e => e.PartnerLoadBackground)
                .HasComment("Partner Load Background")
                .HasColumnName("partner_load_background");
            entity.Property(e => e.PickingPolicy)
                .HasComment("Shipping Policy")
                .HasColumnType("character varying")
                .HasColumnName("picking_policy");
            entity.Property(e => e.PickingTypeId)
                .HasComment("Operation Type")
                .HasColumnName("picking_type_id");
            entity.Property(e => e.PricelistId)
                .HasComment("Default Pricelist")
                .HasColumnName("pricelist_id");
            entity.Property(e => e.ProductLoadBackground)
                .HasComment("Product Load Background")
                .HasColumnName("product_load_background");
            entity.Property(e => e.ProxyIp)
                .HasMaxLength(45)
                .HasComment("IP Address")
                .HasColumnName("proxy_ip");
            entity.Property(e => e.ReceiptFooter)
                .HasComment("Receipt Footer")
                .HasColumnName("receipt_footer");
            entity.Property(e => e.ReceiptHeader)
                .HasComment("Receipt Header")
                .HasColumnName("receipt_header");
            entity.Property(e => e.RestrictPriceControl)
                .HasComment("Restrict Price Modifications to Managers")
                .HasColumnName("restrict_price_control");
            entity.Property(e => e.RoundingMethod)
                .HasComment("Cash rounding")
                .HasColumnName("rounding_method");
            entity.Property(e => e.RouteId)
                .HasComment("Spefic route for products delivered later.")
                .HasColumnName("route_id");
            entity.Property(e => e.SequenceId)
                .HasComment("Order IDs Sequence")
                .HasColumnName("sequence_id");
            entity.Property(e => e.SequenceLineId)
                .HasComment("Order Line IDs Sequence")
                .HasColumnName("sequence_line_id");
            entity.Property(e => e.SetMaximumDifference)
                .HasComment("Set Maximum Difference")
                .HasColumnName("set_maximum_difference");
            entity.Property(e => e.ShipLater)
                .HasComment("Ship Later")
                .HasColumnName("ship_later");
            entity.Property(e => e.StartCategory)
                .HasComment("Start Category")
                .HasColumnName("start_category");
            entity.Property(e => e.TaxRegimeSelection)
                .HasComment("Tax Regime Selection value")
                .HasColumnName("tax_regime_selection");
            entity.Property(e => e.TipProductId)
                .HasComment("Tip Product")
                .HasColumnName("tip_product_id");
            entity.Property(e => e.UsePricelist)
                .HasComment("Use a pricelist.")
                .HasColumnName("use_pricelist");
            entity.Property(e => e.Uuid)
                .HasComment("Uuid")
                .HasColumnType("character varying")
                .HasColumnName("uuid");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosConfigCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_create_uid_fkey");

            entity.HasOne(d => d.CrmTeam).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.CrmTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_crm_team_id_fkey");

            entity.HasOne(d => d.DefaultFiscalPosition).WithMany(p => p.PosConfigsNavigation)
                .HasForeignKey(d => d.DefaultFiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_default_fiscal_position_id_fkey");

            entity.HasOne(d => d.DownPaymentProduct).WithMany(p => p.PosConfigDownPaymentProducts)
                .HasForeignKey(d => d.DownPaymentProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_down_payment_product_id_fkey");

            entity.HasOne(d => d.GroupPosManager).WithMany(p => p.PosConfigGroupPosManagers)
                .HasForeignKey(d => d.GroupPosManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_group_pos_manager_id_fkey");

            entity.HasOne(d => d.GroupPosUser).WithMany(p => p.PosConfigGroupPosUsers)
                .HasForeignKey(d => d.GroupPosUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_group_pos_user_id_fkey");

            entity.HasOne(d => d.IfaceStartCateg).WithMany(p => p.PosConfigsNavigation)
                .HasForeignKey(d => d.IfaceStartCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_iface_start_categ_id_fkey");

            entity.HasOne(d => d.InvoiceJournal).WithMany(p => p.PosConfigInvoiceJournals)
                .HasForeignKey(d => d.InvoiceJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_invoice_journal_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.PosConfigJournals)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_journal_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_picking_type_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_pricelist_id_fkey");

            entity.HasOne(d => d.RoundingMethodNavigation).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.RoundingMethod)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_rounding_method_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_route_id_fkey");

            entity.HasOne(d => d.Sequence).WithMany(p => p.PosConfigSequences)
                .HasForeignKey(d => d.SequenceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_sequence_id_fkey");

            entity.HasOne(d => d.SequenceLine).WithMany(p => p.PosConfigSequenceLines)
                .HasForeignKey(d => d.SequenceLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_sequence_line_id_fkey");

            entity.HasOne(d => d.TipProduct).WithMany(p => p.PosConfigTipProducts)
                .HasForeignKey(d => d.TipProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_tip_product_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_warehouse_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosConfigWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_write_uid_fkey");

            entity.HasMany(d => d.AccountFiscalPositions).WithMany(p => p.PosConfigs)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionPosConfigRel",
                    r => r.HasOne<AccountFiscalPosition>().WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .HasConstraintName("account_fiscal_position_pos_con_account_fiscal_position_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("account_fiscal_position_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "AccountFiscalPositionId").HasName("account_fiscal_position_pos_config_rel_pkey");
                        j.ToTable("account_fiscal_position_pos_config_rel", tb => tb.HasComment("RELATION BETWEEN pos_config AND account_fiscal_position"));
                        j.HasIndex(new[] { "AccountFiscalPositionId", "PosConfigId" }, "account_fiscal_position_pos_c_account_fiscal_position_id_po_idx");
                        j.IndexerProperty<int>("PosConfigId").HasColumnName("pos_config_id");
                        j.IndexerProperty<int>("AccountFiscalPositionId").HasColumnName("account_fiscal_position_id");
                    });

            entity.HasMany(d => d.HrEmployees).WithMany(p => p.PosConfigs)
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeePosConfigRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_pos_config_rel_hr_employee_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("hr_employee_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "HrEmployeeId").HasName("hr_employee_pos_config_rel_pkey");
                        j.ToTable("hr_employee_pos_config_rel", tb => tb.HasComment("RELATION BETWEEN pos_config AND hr_employee"));
                        j.HasIndex(new[] { "HrEmployeeId", "PosConfigId" }, "hr_employee_pos_config_rel_hr_employee_id_pos_config_id_idx");
                        j.IndexerProperty<int>("PosConfigId").HasColumnName("pos_config_id");
                        j.IndexerProperty<int>("HrEmployeeId").HasColumnName("hr_employee_id");
                    });

            entity.HasMany(d => d.PosBills).WithMany(p => p.PosConfigs)
                .UsingEntity<Dictionary<string, object>>(
                    "PosBillPosConfigRel",
                    r => r.HasOne<PosBill>().WithMany()
                        .HasForeignKey("PosBillId")
                        .HasConstraintName("pos_bill_pos_config_rel_pos_bill_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_bill_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "PosBillId").HasName("pos_bill_pos_config_rel_pkey");
                        j.ToTable("pos_bill_pos_config_rel", tb => tb.HasComment("RELATION BETWEEN pos_config AND pos_bill"));
                        j.HasIndex(new[] { "PosBillId", "PosConfigId" }, "pos_bill_pos_config_rel_pos_bill_id_pos_config_id_idx");
                        j.IndexerProperty<int>("PosConfigId").HasColumnName("pos_config_id");
                        j.IndexerProperty<int>("PosBillId").HasColumnName("pos_bill_id");
                    });

            entity.HasMany(d => d.PosCategories).WithMany(p => p.PosConfigs)
                .UsingEntity<Dictionary<string, object>>(
                    "PosCategoryPosConfigRel",
                    r => r.HasOne<PosCategory>().WithMany()
                        .HasForeignKey("PosCategoryId")
                        .HasConstraintName("pos_category_pos_config_rel_pos_category_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_category_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "PosCategoryId").HasName("pos_category_pos_config_rel_pkey");
                        j.ToTable("pos_category_pos_config_rel", tb => tb.HasComment("RELATION BETWEEN pos_config AND pos_category"));
                        j.HasIndex(new[] { "PosCategoryId", "PosConfigId" }, "pos_category_pos_config_rel_pos_category_id_pos_config_id_idx");
                        j.IndexerProperty<int>("PosConfigId").HasColumnName("pos_config_id");
                        j.IndexerProperty<int>("PosCategoryId").HasColumnName("pos_category_id");
                    });

            entity.HasMany(d => d.PosPaymentMethods).WithMany(p => p.PosConfigs)
                .UsingEntity<Dictionary<string, object>>(
                    "PosConfigPosPaymentMethodRel",
                    r => r.HasOne<PosPaymentMethod>().WithMany()
                        .HasForeignKey("PosPaymentMethodId")
                        .HasConstraintName("pos_config_pos_payment_method_rel_pos_payment_method_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_config_pos_payment_method_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "PosPaymentMethodId").HasName("pos_config_pos_payment_method_rel_pkey");
                        j.ToTable("pos_config_pos_payment_method_rel", tb => tb.HasComment("RELATION BETWEEN pos_config AND pos_payment_method"));
                        j.HasIndex(new[] { "PosPaymentMethodId", "PosConfigId" }, "pos_config_pos_payment_method_pos_payment_method_id_pos_con_idx");
                        j.IndexerProperty<int>("PosConfigId").HasColumnName("pos_config_id");
                        j.IndexerProperty<int>("PosPaymentMethodId").HasColumnName("pos_payment_method_id");
                    });

            entity.HasMany(d => d.ProductPricelists).WithMany(p => p.PosConfigsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "PosConfigProductPricelistRel",
                    r => r.HasOne<ProductPricelist>().WithMany()
                        .HasForeignKey("ProductPricelistId")
                        .HasConstraintName("pos_config_product_pricelist_rel_product_pricelist_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_config_product_pricelist_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "ProductPricelistId").HasName("pos_config_product_pricelist_rel_pkey");
                        j.ToTable("pos_config_product_pricelist_rel", tb => tb.HasComment("RELATION BETWEEN pos_config AND product_pricelist"));
                        j.HasIndex(new[] { "ProductPricelistId", "PosConfigId" }, "pos_config_product_pricelist__product_pricelist_id_pos_conf_idx");
                        j.IndexerProperty<int>("PosConfigId").HasColumnName("pos_config_id");
                        j.IndexerProperty<int>("ProductPricelistId").HasColumnName("product_pricelist_id");
                    });
        });

        modelBuilder.Entity<PosDetailsWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_details_wizard_pkey");

            entity.ToTable("pos_details_wizard", tb => tb.HasComment("Point of Sale Details Report"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EndDate)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.StartDate)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosDetailsWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_details_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosDetailsWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_details_wizard_write_uid_fkey");

            entity.HasMany(d => d.PosConfigs).WithMany(p => p.PosDetailsWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "PosDetailConfig",
                    r => r.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_detail_configs_pos_config_id_fkey"),
                    l => l.HasOne<PosDetailsWizard>().WithMany()
                        .HasForeignKey("PosDetailsWizardId")
                        .HasConstraintName("pos_detail_configs_pos_details_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosDetailsWizardId", "PosConfigId").HasName("pos_detail_configs_pkey");
                        j.ToTable("pos_detail_configs", tb => tb.HasComment("RELATION BETWEEN pos_details_wizard AND pos_config"));
                        j.HasIndex(new[] { "PosConfigId", "PosDetailsWizardId" }, "pos_detail_configs_pos_config_id_pos_details_wizard_id_idx");
                        j.IndexerProperty<int>("PosDetailsWizardId").HasColumnName("pos_details_wizard_id");
                        j.IndexerProperty<int>("PosConfigId").HasColumnName("pos_config_id");
                    });
        });

        modelBuilder.Entity<PosMakePayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_make_payment_pkey");

            entity.ToTable("pos_make_payment", tb => tb.HasComment("Point of Sale Make Payment Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.ConfigId)
                .HasComment("Point of Sale Configuration")
                .HasColumnName("config_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PaymentDate)
                .HasComment("Payment Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("payment_date");
            entity.Property(e => e.PaymentMethodId)
                .HasComment("Payment Method")
                .HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentName)
                .HasComment("Payment Reference")
                .HasColumnType("character varying")
                .HasColumnName("payment_name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Config).WithMany(p => p.PosMakePayments)
                .HasForeignKey(d => d.ConfigId)
                .HasConstraintName("pos_make_payment_config_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosMakePaymentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_make_payment_create_uid_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PosMakePayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("pos_make_payment_payment_method_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosMakePaymentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_make_payment_write_uid_fkey");
        });

        modelBuilder.Entity<PosOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_order_pkey");

            entity.ToTable("pos_order", tb => tb.HasComment("Point of Sale Orders"));

            entity.HasIndex(e => e.AccountMove, "pos_order_account_move_index").HasFilter("(account_move IS NOT NULL)");

            entity.HasIndex(e => e.DateOrder, "pos_order_date_order_index");

            entity.HasIndex(e => e.PartnerId, "pos_order_partner_id_index").HasFilter("(partner_id IS NOT NULL)");

            entity.HasIndex(e => e.SessionId, "pos_order_session_id_index");

            entity.HasIndex(e => e.State, "pos_order_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.AccountMove)
                .HasComment("Invoice")
                .HasColumnName("account_move");
            entity.Property(e => e.AmountPaid)
                .HasComment("Paid")
                .HasColumnName("amount_paid");
            entity.Property(e => e.AmountReturn)
                .HasComment("Returned")
                .HasColumnName("amount_return");
            entity.Property(e => e.AmountTax)
                .HasComment("Taxes")
                .HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal)
                .HasComment("Total")
                .HasColumnName("amount_total");
            entity.Property(e => e.Cashier)
                .HasComment("Cashier")
                .HasColumnType("character varying")
                .HasColumnName("cashier");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CrmTeamId)
                .HasComment("Sales Team")
                .HasColumnName("crm_team_id");
            entity.Property(e => e.CurrencyRate)
                .HasComment("Currency Rate")
                .HasColumnName("currency_rate");
            entity.Property(e => e.DateOrder)
                .HasComment("Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_order");
            entity.Property(e => e.EmployeeId)
                .HasComment("Employee")
                .HasColumnName("employee_id");
            entity.Property(e => e.FiscalPositionId)
                .HasComment("Fiscal Position")
                .HasColumnName("fiscal_position_id");
            entity.Property(e => e.IsTipped)
                .HasComment("Is this already tipped?")
                .HasColumnName("is_tipped");
            entity.Property(e => e.Name)
                .HasComment("Order Ref")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NbPrint)
                .HasComment("Number of Print")
                .HasColumnName("nb_print");
            entity.Property(e => e.Note)
                .HasComment("Internal Notes")
                .HasColumnName("note");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PosReference)
                .HasComment("Receipt Number")
                .HasColumnType("character varying")
                .HasColumnName("pos_reference");
            entity.Property(e => e.PricelistId)
                .HasComment("Pricelist")
                .HasColumnName("pricelist_id");
            entity.Property(e => e.ProcurementGroupId)
                .HasComment("Procurement Group")
                .HasColumnName("procurement_group_id");
            entity.Property(e => e.SaleJournal)
                .HasComment("Sales Journal")
                .HasColumnName("sale_journal");
            entity.Property(e => e.SequenceNumber)
                .HasComment("Sequence Number")
                .HasColumnName("sequence_number");
            entity.Property(e => e.SessionId)
                .HasComment("Session")
                .HasColumnName("session_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TipAmount)
                .HasComment("Tip Amount")
                .HasColumnName("tip_amount");
            entity.Property(e => e.ToInvoice)
                .HasComment("To invoice")
                .HasColumnName("to_invoice");
            entity.Property(e => e.ToShip)
                .HasComment("To ship")
                .HasColumnName("to_ship");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMoveNavigation).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.AccountMove)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_account_move_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosOrderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_create_uid_fkey");

            entity.HasOne(d => d.CrmTeam).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.CrmTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_crm_team_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_employee_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_fiscal_position_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_partner_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_pricelist_id_fkey");

            entity.HasOne(d => d.ProcurementGroup).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.ProcurementGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_procurement_group_id_fkey");

            entity.HasOne(d => d.SaleJournalNavigation).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.SaleJournal)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_sale_journal_fkey");

            entity.HasOne(d => d.Session).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_session_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.PosOrderUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosOrderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_write_uid_fkey");
        });

        modelBuilder.Entity<PosOrderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_order_line_pkey");

            entity.ToTable("pos_order_line", tb => tb.HasComment("Point of Sale Order Lines"));

            entity.HasIndex(e => e.OrderId, "pos_order_line_order_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomerNote)
                .HasComment("Customer Note")
                .HasColumnType("character varying")
                .HasColumnName("customer_note");
            entity.Property(e => e.Discount)
                .HasComment("Discount (%)")
                .HasColumnName("discount");
            entity.Property(e => e.DownPaymentDetails)
                .HasComment("Down Payment Details")
                .HasColumnName("down_payment_details");
            entity.Property(e => e.FullProductName)
                .HasComment("Full Product Name")
                .HasColumnType("character varying")
                .HasColumnName("full_product_name");
            entity.Property(e => e.IsTotalCostComputed)
                .HasComment("Is Total Cost Computed")
                .HasColumnName("is_total_cost_computed");
            entity.Property(e => e.Name)
                .HasComment("Line No")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Notice)
                .HasComment("Discount Notice")
                .HasColumnType("character varying")
                .HasColumnName("notice");
            entity.Property(e => e.OrderId)
                .HasComment("Order Ref")
                .HasColumnName("order_id");
            entity.Property(e => e.PriceExtra)
                .HasComment("Price extra")
                .HasColumnName("price_extra");
            entity.Property(e => e.PriceSubtotal)
                .HasComment("Subtotal w/o Tax")
                .HasColumnName("price_subtotal");
            entity.Property(e => e.PriceSubtotalIncl)
                .HasComment("Subtotal")
                .HasColumnName("price_subtotal_incl");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Qty)
                .HasComment("Quantity")
                .HasColumnName("qty");
            entity.Property(e => e.RefundedOrderlineId)
                .HasComment("Refunded Order Line")
                .HasColumnName("refunded_orderline_id");
            entity.Property(e => e.SaleOrderLineId)
                .HasComment("Source Sale Order Line")
                .HasColumnName("sale_order_line_id");
            entity.Property(e => e.SaleOrderOriginId)
                .HasComment("Linked Sale Order")
                .HasColumnName("sale_order_origin_id");
            entity.Property(e => e.TotalCost)
                .HasComment("Total cost")
                .HasColumnName("total_cost");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosOrderLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_create_uid_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("pos_order_line_order_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_line_product_id_fkey");

            entity.HasOne(d => d.RefundedOrderline).WithMany(p => p.InverseRefundedOrderline)
                .HasForeignKey(d => d.RefundedOrderlineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_refunded_orderline_id_fkey");

            entity.HasOne(d => d.SaleOrderLine).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.SaleOrderLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_sale_order_line_id_fkey");

            entity.HasOne(d => d.SaleOrderOrigin).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.SaleOrderOriginId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_sale_order_origin_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosOrderLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_write_uid_fkey");

            entity.HasMany(d => d.AccountTaxes).WithMany(p => p.PosOrderLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxPosOrderLineRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_pos_order_line_rel_account_tax_id_fkey"),
                    l => l.HasOne<PosOrderLine>().WithMany()
                        .HasForeignKey("PosOrderLineId")
                        .HasConstraintName("account_tax_pos_order_line_rel_pos_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosOrderLineId", "AccountTaxId").HasName("account_tax_pos_order_line_rel_pkey");
                        j.ToTable("account_tax_pos_order_line_rel", tb => tb.HasComment("RELATION BETWEEN pos_order_line AND account_tax"));
                        j.HasIndex(new[] { "AccountTaxId", "PosOrderLineId" }, "account_tax_pos_order_line_re_account_tax_id_pos_order_line_idx");
                        j.IndexerProperty<int>("PosOrderLineId").HasColumnName("pos_order_line_id");
                        j.IndexerProperty<int>("AccountTaxId").HasColumnName("account_tax_id");
                    });
        });

        modelBuilder.Entity<PosPackOperationLot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_pack_operation_lot_pkey");

            entity.ToTable("pos_pack_operation_lot", tb => tb.HasComment("Specify product lot/serial number in pos order line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LotName)
                .HasComment("Lot Name")
                .HasColumnType("character varying")
                .HasColumnName("lot_name");
            entity.Property(e => e.PosOrderLineId)
                .HasComment("Pos Order Line")
                .HasColumnName("pos_order_line_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosPackOperationLotCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_pack_operation_lot_create_uid_fkey");

            entity.HasOne(d => d.PosOrderLine).WithMany(p => p.PosPackOperationLots)
                .HasForeignKey(d => d.PosOrderLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_pack_operation_lot_pos_order_line_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosPackOperationLotWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_pack_operation_lot_write_uid_fkey");
        });

        modelBuilder.Entity<PosPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_payment_pkey");

            entity.ToTable("pos_payment", tb => tb.HasComment("Point of Sale Payments"));

            entity.HasIndex(e => e.SessionId, "pos_payment_session_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountMoveId)
                .HasComment("Account Move")
                .HasColumnName("account_move_id");
            entity.Property(e => e.Amount)
                .HasComment("Amount")
                .HasColumnName("amount");
            entity.Property(e => e.CardType)
                .HasComment("Type of card used")
                .HasColumnType("character varying")
                .HasColumnName("card_type");
            entity.Property(e => e.CardholderName)
                .HasComment("Cardholder Name")
                .HasColumnType("character varying")
                .HasColumnName("cardholder_name");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsChange)
                .HasComment("Is this payment change?")
                .HasColumnName("is_change");
            entity.Property(e => e.Name)
                .HasComment("Label")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PaymentDate)
                .HasComment("Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("payment_date");
            entity.Property(e => e.PaymentMethodId)
                .HasComment("Payment Method")
                .HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentStatus)
                .HasComment("Payment Status")
                .HasColumnType("character varying")
                .HasColumnName("payment_status");
            entity.Property(e => e.PosOrderId)
                .HasComment("Order")
                .HasColumnName("pos_order_id");
            entity.Property(e => e.SessionId)
                .HasComment("Session")
                .HasColumnName("session_id");
            entity.Property(e => e.Ticket)
                .HasComment("Payment Receipt Info")
                .HasColumnType("character varying")
                .HasColumnName("ticket");
            entity.Property(e => e.TransactionId)
                .HasComment("Payment Transaction ID")
                .HasColumnType("character varying")
                .HasColumnName("transaction_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMove).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.AccountMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_account_move_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosPaymentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_create_uid_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_payment_method_id_fkey");

            entity.HasOne(d => d.PosOrder).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.PosOrderId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_pos_order_id_fkey");

            entity.HasOne(d => d.Session).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_session_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosPaymentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_write_uid_fkey");
        });

        modelBuilder.Entity<PosPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_payment_method_pkey");

            entity.ToTable("pos_payment_method", tb => tb.HasComment("Point of Sale Payment Methods"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsCashCount)
                .HasComment("Cash")
                .HasColumnName("is_cash_count");
            entity.Property(e => e.JournalId)
                .HasComment("Journal")
                .HasColumnName("journal_id");
            entity.Property(e => e.Name)
                .HasComment("Method")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OutstandingAccountId)
                .HasComment("Outstanding Account")
                .HasColumnName("outstanding_account_id");
            entity.Property(e => e.ReceivableAccountId)
                .HasComment("Intermediary Account")
                .HasColumnName("receivable_account_id");
            entity.Property(e => e.SplitTransactions)
                .HasComment("Identify Customer")
                .HasColumnName("split_transactions");
            entity.Property(e => e.UsePaymentTerminal)
                .HasComment("Use a Payment Terminal")
                .HasColumnType("character varying")
                .HasColumnName("use_payment_terminal");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.PosPaymentMethods)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_method_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosPaymentMethodCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_method_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.PosPaymentMethods)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_method_journal_id_fkey");

            entity.HasOne(d => d.OutstandingAccount).WithMany(p => p.PosPaymentMethodOutstandingAccounts)
                .HasForeignKey(d => d.OutstandingAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_method_outstanding_account_id_fkey");

            entity.HasOne(d => d.ReceivableAccount).WithMany(p => p.PosPaymentMethodReceivableAccounts)
                .HasForeignKey(d => d.ReceivableAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_method_receivable_account_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosPaymentMethodWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_method_write_uid_fkey");
        });

        modelBuilder.Entity<PosSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_session_pkey");

            entity.ToTable("pos_session", tb => tb.HasComment("Point of Sale Session"));

            entity.HasIndex(e => e.ConfigId, "pos_session_config_id_index");

            entity.HasIndex(e => e.MoveId, "pos_session_move_id_index");

            entity.HasIndex(e => e.State, "pos_session_state_index");

            entity.HasIndex(e => e.Name, "pos_session_uniq_name").IsUnique();

            entity.HasIndex(e => e.UserId, "pos_session_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CashJournalId)
                .HasComment("Cash Journal")
                .HasColumnName("cash_journal_id");
            entity.Property(e => e.CashRealTransaction)
                .HasComment("Transaction")
                .HasColumnName("cash_real_transaction");
            entity.Property(e => e.CashRegisterBalanceEndReal)
                .HasComment("Ending Balance")
                .HasColumnName("cash_register_balance_end_real");
            entity.Property(e => e.CashRegisterBalanceStart)
                .HasComment("Starting Balance")
                .HasColumnName("cash_register_balance_start");
            entity.Property(e => e.ConfigId)
                .HasComment("Point of Sale")
                .HasColumnName("config_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LoginNumber)
                .HasComment("Login Sequence Number")
                .HasColumnName("login_number");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId)
                .HasComment("Journal Entry")
                .HasColumnName("move_id");
            entity.Property(e => e.Name)
                .HasComment("Session ID")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OpeningNotes)
                .HasComment("Opening Notes")
                .HasColumnName("opening_notes");
            entity.Property(e => e.Rescue)
                .HasComment("Recovery Session")
                .HasColumnName("rescue");
            entity.Property(e => e.SequenceNumber)
                .HasComment("Order Sequence Number")
                .HasColumnName("sequence_number");
            entity.Property(e => e.StartAt)
                .HasComment("Opening Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_at");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.StopAt)
                .HasComment("Closing Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("stop_at");
            entity.Property(e => e.UpdateStockAtClosing)
                .HasComment("Stock should be updated at closing")
                .HasColumnName("update_stock_at_closing");
            entity.Property(e => e.UserId)
                .HasComment("Opened By")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CashJournal).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.CashJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_cash_journal_id_fkey");

            entity.HasOne(d => d.Config).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.ConfigId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_session_config_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosSessionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_move_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.PosSessionUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_session_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosSessionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_write_uid_fkey");
        });

        modelBuilder.Entity<PosSessionCheckProductWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_session_check_product_wizard_pkey");

            entity.ToTable("pos_session_check_product_wizard", tb => tb.HasComment("Verify if there are any products for the PoS"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PosSessionCheckProductWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_check_product_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PosSessionCheckProductWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_check_product_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PrivacyLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("privacy_log_pkey");

            entity.ToTable("privacy_log", tb => tb.HasComment("Privacy Log"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdditionalNote)
                .HasComment("Additional Note")
                .HasColumnName("additional_note");
            entity.Property(e => e.AnonymizedEmail)
                .HasComment("Anonymized Email")
                .HasColumnType("character varying")
                .HasColumnName("anonymized_email");
            entity.Property(e => e.AnonymizedName)
                .HasComment("Anonymized Name")
                .HasColumnType("character varying")
                .HasColumnName("anonymized_name");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.ExecutionDetails)
                .HasComment("Execution Details")
                .HasColumnName("execution_details");
            entity.Property(e => e.RecordsDescription)
                .HasComment("Found Records")
                .HasColumnName("records_description");
            entity.Property(e => e.UserId)
                .HasComment("Handled By")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PrivacyLogCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_log_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.PrivacyLogUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("privacy_log_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PrivacyLogWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_log_write_uid_fkey");
        });

        modelBuilder.Entity<PrivacyLookupWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("privacy_lookup_wizard_pkey");

            entity.ToTable("privacy_lookup_wizard", tb => tb.HasComment("Privacy Lookup Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.ExecutionDetails)
                .HasComment("Execution Details")
                .HasColumnName("execution_details");
            entity.Property(e => e.LogId)
                .HasComment("Log")
                .HasColumnName("log_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PrivacyLookupWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_create_uid_fkey");

            entity.HasOne(d => d.Log).WithMany(p => p.PrivacyLookupWizards)
                .HasForeignKey(d => d.LogId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_log_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PrivacyLookupWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PrivacyLookupWizardLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("privacy_lookup_wizard_line_pkey");

            entity.ToTable("privacy_lookup_wizard_line", tb => tb.HasComment("Privacy Lookup Wizard Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ExecutionDetails)
                .HasComment("Execution Details")
                .HasColumnType("character varying")
                .HasColumnName("execution_details");
            entity.Property(e => e.HasActive)
                .HasComment("Has Active")
                .HasColumnName("has_active");
            entity.Property(e => e.IsActive)
                .HasComment("Is Active")
                .HasColumnName("is_active");
            entity.Property(e => e.IsUnlinked)
                .HasComment("Is Unlinked")
                .HasColumnName("is_unlinked");
            entity.Property(e => e.ResId)
                .HasComment("Resource ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Document Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.ResModelId)
                .HasComment("Related Document Model")
                .HasColumnName("res_model_id");
            entity.Property(e => e.ResName)
                .HasComment("Resource name")
                .HasColumnType("character varying")
                .HasColumnName("res_name");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PrivacyLookupWizardLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_line_create_uid_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.PrivacyLookupWizardLines)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("privacy_lookup_wizard_line_res_model_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.PrivacyLookupWizardLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_line_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PrivacyLookupWizardLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_line_write_uid_fkey");
        });

        modelBuilder.Entity<ProcurementGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("procurement_group_pkey");

            entity.ToTable("procurement_group", tb => tb.HasComment("Procurement Group"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MoveType)
                .HasComment("Delivery Type")
                .HasColumnType("character varying")
                .HasColumnName("move_type");
            entity.Property(e => e.Name)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PosOrderId)
                .HasComment("POS Order")
                .HasColumnName("pos_order_id");
            entity.Property(e => e.SaleId)
                .HasComment("Sale Order")
                .HasColumnName("sale_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProcurementGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ProcurementGroups)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_partner_id_fkey");

            entity.HasOne(d => d.PosOrder).WithMany(p => p.ProcurementGroups)
                .HasForeignKey(d => d.PosOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_pos_order_id_fkey");

            entity.HasOne(d => d.Sale).WithMany(p => p.ProcurementGroups)
                .HasForeignKey(d => d.SaleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_sale_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProcurementGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_write_uid_fkey");
        });

        modelBuilder.Entity<ProductAttribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_attribute_pkey");

            entity.ToTable("product_attribute", tb => tb.HasComment("Product Attribute"));

            entity.HasIndex(e => e.Sequence, "product_attribute_sequence_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CreateVariant)
                .HasComment("Variants Creation Mode")
                .HasColumnType("character varying")
                .HasColumnName("create_variant");
            entity.Property(e => e.DisplayType)
                .HasComment("Display Type")
                .HasColumnType("character varying")
                .HasColumnName("display_type");
            entity.Property(e => e.Name)
                .HasComment("Attribute")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Visibility)
                .HasComment("Visibility")
                .HasColumnType("character varying")
                .HasColumnName("visibility");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductAttributeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductAttributeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_write_uid_fkey");

            entity.HasMany(d => d.ProductTemplates).WithMany(p => p.ProductAttributes)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAttributeProductTemplateRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_attribute_product_template_rel_product_template_id_fkey"),
                    l => l.HasOne<ProductAttribute>().WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .HasConstraintName("product_attribute_product_template_re_product_attribute_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductAttributeId", "ProductTemplateId").HasName("product_attribute_product_template_rel_pkey");
                        j.ToTable("product_attribute_product_template_rel", tb => tb.HasComment("RELATION BETWEEN product_attribute AND product_template"));
                        j.HasIndex(new[] { "ProductTemplateId", "ProductAttributeId" }, "product_attribute_product_tem_product_template_id_product_a_idx");
                        j.IndexerProperty<int>("ProductAttributeId").HasColumnName("product_attribute_id");
                        j.IndexerProperty<int>("ProductTemplateId").HasColumnName("product_template_id");
                    });
        });

        modelBuilder.Entity<ProductAttributeCustomValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_attribute_custom_value_pkey");

            entity.ToTable("product_attribute_custom_value", tb => tb.HasComment("Product Attribute Custom Value"));

            entity.HasIndex(e => new { e.CustomProductTemplateAttributeValueId, e.SaleOrderLineId }, "product_attribute_custom_value_sol_custom_value_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomProductTemplateAttributeValueId)
                .HasComment("Attribute Value")
                .HasColumnName("custom_product_template_attribute_value_id");
            entity.Property(e => e.CustomValue)
                .HasComment("Custom Value")
                .HasColumnType("character varying")
                .HasColumnName("custom_value");
            entity.Property(e => e.SaleOrderLineId)
                .HasComment("Sales Order Line")
                .HasColumnName("sale_order_line_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductAttributeCustomValueCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_custom_value_create_uid_fkey");

            entity.HasOne(d => d.CustomProductTemplateAttributeValue).WithMany(p => p.ProductAttributeCustomValues)
                .HasForeignKey(d => d.CustomProductTemplateAttributeValueId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_attribute_custom_valu_custom_product_template_attr_fkey");

            entity.HasOne(d => d.SaleOrderLine).WithMany(p => p.ProductAttributeCustomValues)
                .HasForeignKey(d => d.SaleOrderLineId)
                .HasConstraintName("product_attribute_custom_value_sale_order_line_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductAttributeCustomValueWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_custom_value_write_uid_fkey");
        });

        modelBuilder.Entity<ProductAttributeValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_attribute_value_pkey");

            entity.ToTable("product_attribute_value", tb => tb.HasComment("Attribute Value"));

            entity.HasIndex(e => e.AttributeId, "product_attribute_value_attribute_id_index");

            entity.HasIndex(e => e.Sequence, "product_attribute_value_sequence_index");

            entity.HasIndex(e => new { e.Name, e.AttributeId }, "product_attribute_value_value_company_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AttributeId)
                .HasComment("Attribute")
                .HasColumnName("attribute_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.HtmlColor)
                .HasComment("Color")
                .HasColumnType("character varying")
                .HasColumnName("html_color");
            entity.Property(e => e.IsCustom)
                .HasComment("Is custom value")
                .HasColumnName("is_custom");
            entity.Property(e => e.Name)
                .HasComment("Value")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductAttributeValues)
                .HasForeignKey(d => d.AttributeId)
                .HasConstraintName("product_attribute_value_attribute_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductAttributeValueCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_value_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductAttributeValueWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_value_write_uid_fkey");

            entity.HasMany(d => d.ProductTemplateAttributeLines).WithMany(p => p.ProductAttributeValues)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAttributeValueProductTemplateAttributeLineRel",
                    r => r.HasOne<ProductTemplateAttributeLine>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeLineId")
                        .HasConstraintName("product_attribute_value_produ_product_template_attribute_l_fkey"),
                    l => l.HasOne<ProductAttributeValue>().WithMany()
                        .HasForeignKey("ProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_attribute_value_product_product_attribute_value_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductAttributeValueId", "ProductTemplateAttributeLineId").HasName("product_attribute_value_product_template_attribute_line_re_pkey");
                        j.ToTable("product_attribute_value_product_template_attribute_line_rel", tb => tb.HasComment("RELATION BETWEEN product_attribute_value AND product_template_attribute_line"));
                        j.HasIndex(new[] { "ProductTemplateAttributeLineId", "ProductAttributeValueId" }, "product_attribute_value_produ_product_template_attribute_li_idx");
                        j.IndexerProperty<int>("ProductAttributeValueId").HasColumnName("product_attribute_value_id");
                        j.IndexerProperty<int>("ProductTemplateAttributeLineId").HasColumnName("product_template_attribute_line_id");
                    });
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_category_pkey");

            entity.ToTable("product_category", tb => tb.HasComment("Product Category"));

            entity.HasIndex(e => e.Name, "product_category_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ParentId, "product_category_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "product_category_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompleteName)
                .HasComment("Complete Name")
                .HasColumnType("character varying")
                .HasColumnName("complete_name");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PackagingReserveMethod)
                .HasComment("Reserve Packagings")
                .HasColumnType("character varying")
                .HasColumnName("packaging_reserve_method");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Category")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.RemovalStrategyId)
                .HasComment("Force Removal Strategy")
                .HasColumnName("removal_strategy_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_category_parent_id_fkey");

            entity.HasOne(d => d.RemovalStrategy).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.RemovalStrategyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_category_removal_strategy_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_category_write_uid_fkey");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_image_pkey");

            entity.ToTable("product_image", tb => tb.HasComment("Product Image"));

            entity.HasIndex(e => e.ProductTmplId, "product_image_product_tmpl_id_index");

            entity.HasIndex(e => e.ProductVariantId, "product_image_product_variant_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CanImage1024BeZoomed)
                .HasComment("Can Image 1024 be zoomed")
                .HasColumnName("can_image_1024_be_zoomed");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductVariantId)
                .HasComment("Product Variant")
                .HasColumnName("product_variant_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.VideoUrl)
                .HasComment("Video URL")
                .HasColumnType("character varying")
                .HasColumnName("video_url");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductImageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_image_create_uid_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_image_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductVariantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_image_product_variant_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductImageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_image_write_uid_fkey");
        });

        modelBuilder.Entity<ProductLabelLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_label_layout_pkey");

            entity.ToTable("product_label_layout", tb => tb.HasComment("Choose the sheet layout to print the labels"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomQuantity)
                .HasComment("Quantity")
                .HasColumnName("custom_quantity");
            entity.Property(e => e.ExtraHtml)
                .HasComment("Extra Content")
                .HasColumnName("extra_html");
            entity.Property(e => e.PickingQuantity)
                .HasComment("Quantity to print")
                .HasColumnType("character varying")
                .HasColumnName("picking_quantity");
            entity.Property(e => e.PrintFormat)
                .HasComment("Format")
                .HasColumnType("character varying")
                .HasColumnName("print_format");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductLabelLayoutCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_label_layout_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductLabelLayoutWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_label_layout_write_uid_fkey");

            entity.HasMany(d => d.ProductProducts).WithMany(p => p.ProductLabelLayouts)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductLabelLayoutProductProductRel",
                    r => r.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_label_layout_product_product_re_product_product_id_fkey"),
                    l => l.HasOne<ProductLabelLayout>().WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .HasConstraintName("product_label_layout_product_produ_product_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductLabelLayoutId", "ProductProductId").HasName("product_label_layout_product_product_rel_pkey");
                        j.ToTable("product_label_layout_product_product_rel", tb => tb.HasComment("RELATION BETWEEN product_label_layout AND product_product"));
                        j.HasIndex(new[] { "ProductProductId", "ProductLabelLayoutId" }, "product_label_layout_product__product_product_id_product_la_idx");
                        j.IndexerProperty<int>("ProductLabelLayoutId").HasColumnName("product_label_layout_id");
                        j.IndexerProperty<int>("ProductProductId").HasColumnName("product_product_id");
                    });

            entity.HasMany(d => d.ProductTemplates).WithMany(p => p.ProductLabelLayouts)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductLabelLayoutProductTemplateRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_label_layout_product_template__product_template_id_fkey"),
                    l => l.HasOne<ProductLabelLayout>().WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .HasConstraintName("product_label_layout_product_templ_product_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductLabelLayoutId", "ProductTemplateId").HasName("product_label_layout_product_template_rel_pkey");
                        j.ToTable("product_label_layout_product_template_rel", tb => tb.HasComment("RELATION BETWEEN product_label_layout AND product_template"));
                        j.HasIndex(new[] { "ProductTemplateId", "ProductLabelLayoutId" }, "product_label_layout_product__product_template_id_product_l_idx");
                        j.IndexerProperty<int>("ProductLabelLayoutId").HasColumnName("product_label_layout_id");
                        j.IndexerProperty<int>("ProductTemplateId").HasColumnName("product_template_id");
                    });

            entity.HasMany(d => d.StockMoveLines).WithMany(p => p.ProductLabelLayouts)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductLabelLayoutStockMoveLineRel",
                    r => r.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("StockMoveLineId")
                        .HasConstraintName("product_label_layout_stock_move_line_re_stock_move_line_id_fkey"),
                    l => l.HasOne<ProductLabelLayout>().WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .HasConstraintName("product_label_layout_stock_move_li_product_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductLabelLayoutId", "StockMoveLineId").HasName("product_label_layout_stock_move_line_rel_pkey");
                        j.ToTable("product_label_layout_stock_move_line_rel", tb => tb.HasComment("RELATION BETWEEN product_label_layout AND stock_move_line"));
                        j.HasIndex(new[] { "StockMoveLineId", "ProductLabelLayoutId" }, "product_label_layout_stock_mo_stock_move_line_id_product_la_idx");
                        j.IndexerProperty<int>("ProductLabelLayoutId").HasColumnName("product_label_layout_id");
                        j.IndexerProperty<int>("StockMoveLineId").HasColumnName("stock_move_line_id");
                    });
        });

        modelBuilder.Entity<ProductPackaging>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_packaging_pkey");

            entity.ToTable("product_packaging", tb => tb.HasComment("Product Packaging"));

            entity.HasIndex(e => e.Barcode, "product_packaging_barcode_uniq").IsUnique();

            entity.HasIndex(e => e.CompanyId, "product_packaging_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Barcode)
                .HasComment("Barcode")
                .HasColumnType("character varying")
                .HasColumnName("barcode");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Product Packaging")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PackageTypeId)
                .HasComment("Package Type")
                .HasColumnName("package_type_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Purchase)
                .HasComment("Purchase")
                .HasColumnName("purchase");
            entity.Property(e => e.Qty)
                .HasComment("Contained Quantity")
                .HasColumnName("qty");
            entity.Property(e => e.Sales)
                .HasComment("Sales")
                .HasColumnName("sales");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductPackagings)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductPackagingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_create_uid_fkey");

            entity.HasOne(d => d.PackageType).WithMany(p => p.ProductPackagings)
                .HasForeignKey(d => d.PackageTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_package_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductPackagings)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductPackagingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_write_uid_fkey");
        });

        modelBuilder.Entity<ProductPricelist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_pricelist_pkey");

            entity.ToTable("product_pricelist", tb => tb.HasComment("Pricelist"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Code)
                .HasComment("E-commerce Promotional Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DiscountPolicy)
                .HasComment("Discount Policy")
                .HasColumnType("character varying")
                .HasColumnName("discount_policy");
            entity.Property(e => e.Name)
                .HasComment("Pricelist Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Selectable)
                .HasComment("Selectable")
                .HasColumnName("selectable");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductPricelists)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductPricelistCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.ProductPricelists)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_pricelist_currency_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductPricelists)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_pricelist_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductPricelistWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_write_uid_fkey");

            entity.HasMany(d => d.ResCountryGroups).WithMany(p => p.Pricelists)
                .UsingEntity<Dictionary<string, object>>(
                    "ResCountryGroupPricelistRel",
                    r => r.HasOne<ResCountryGroup>().WithMany()
                        .HasForeignKey("ResCountryGroupId")
                        .HasConstraintName("res_country_group_pricelist_rel_res_country_group_id_fkey"),
                    l => l.HasOne<ProductPricelist>().WithMany()
                        .HasForeignKey("PricelistId")
                        .HasConstraintName("res_country_group_pricelist_rel_pricelist_id_fkey"),
                    j =>
                    {
                        j.HasKey("PricelistId", "ResCountryGroupId").HasName("res_country_group_pricelist_rel_pkey");
                        j.ToTable("res_country_group_pricelist_rel", tb => tb.HasComment("RELATION BETWEEN product_pricelist AND res_country_group"));
                        j.HasIndex(new[] { "ResCountryGroupId", "PricelistId" }, "res_country_group_pricelist_r_res_country_group_id_pricelis_idx");
                        j.IndexerProperty<int>("PricelistId").HasColumnName("pricelist_id");
                        j.IndexerProperty<int>("ResCountryGroupId").HasColumnName("res_country_group_id");
                    });
        });

        modelBuilder.Entity<ProductPricelistItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_pricelist_item_pkey");

            entity.ToTable("product_pricelist_item", tb => tb.HasComment("Pricelist Rule"));

            entity.HasIndex(e => e.ComputePrice, "product_pricelist_item_compute_price_index");

            entity.HasIndex(e => e.PricelistId, "product_pricelist_item_pricelist_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AppliedOn)
                .HasComment("Apply On")
                .HasColumnType("character varying")
                .HasColumnName("applied_on");
            entity.Property(e => e.Base)
                .HasComment("Based on")
                .HasColumnType("character varying")
                .HasColumnName("base");
            entity.Property(e => e.BasePricelistId)
                .HasComment("Other Pricelist")
                .HasColumnName("base_pricelist_id");
            entity.Property(e => e.CategId)
                .HasComment("Product Category")
                .HasColumnName("categ_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.ComputePrice)
                .HasComment("Compute Price")
                .HasColumnType("character varying")
                .HasColumnName("compute_price");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DateEnd)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.FixedPrice)
                .HasComment("Fixed Price")
                .HasColumnName("fixed_price");
            entity.Property(e => e.MinQuantity)
                .HasComment("Min. Quantity")
                .HasColumnName("min_quantity");
            entity.Property(e => e.PercentPrice)
                .HasComment("Percentage Price")
                .HasColumnName("percent_price");
            entity.Property(e => e.PriceDiscount)
                .HasComment("Price Discount")
                .HasColumnName("price_discount");
            entity.Property(e => e.PriceMaxMargin)
                .HasComment("Max. Price Margin")
                .HasColumnName("price_max_margin");
            entity.Property(e => e.PriceMinMargin)
                .HasComment("Min. Price Margin")
                .HasColumnName("price_min_margin");
            entity.Property(e => e.PriceRound)
                .HasComment("Price Rounding")
                .HasColumnName("price_round");
            entity.Property(e => e.PriceSurcharge)
                .HasComment("Price Surcharge")
                .HasColumnName("price_surcharge");
            entity.Property(e => e.PricelistId)
                .HasComment("Pricelist")
                .HasColumnName("pricelist_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product Variant")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.BasePricelist).WithMany(p => p.ProductPricelistItemBasePricelists)
                .HasForeignKey(d => d.BasePricelistId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_base_pricelist_id_fkey");

            entity.HasOne(d => d.Categ).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.CategId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_pricelist_item_categ_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductPricelistItemCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_currency_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.ProductPricelistItemPricelists)
                .HasForeignKey(d => d.PricelistId)
                .HasConstraintName("product_pricelist_item_pricelist_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_pricelist_item_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_pricelist_item_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductPricelistItemWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_write_uid_fkey");
        });

        modelBuilder.Entity<ProductProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_product_pkey");

            entity.ToTable("product_product", tb => tb.HasComment("Product Variant"));

            entity.HasIndex(e => e.Barcode, "product_product_barcode_index").HasFilter("(barcode IS NOT NULL)");

            entity.HasIndex(e => e.CombinationIndices, "product_product_combination_indices_index");

            entity.HasIndex(e => new { e.ProductTmplId, e.CombinationIndices }, "product_product_combination_unique")
                .IsUnique()
                .HasFilter("(active IS TRUE)");

            entity.HasIndex(e => e.DefaultCode, "product_product_default_code_index");

            entity.HasIndex(e => e.ProductTmplId, "product_product_product_tmpl_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Barcode)
                .HasComment("Barcode")
                .HasColumnType("character varying")
                .HasColumnName("barcode");
            entity.Property(e => e.BaseUnitCount)
                .HasComment("Base Unit Count")
                .HasColumnName("base_unit_count");
            entity.Property(e => e.BaseUnitId)
                .HasComment("Custom Unit of Measure")
                .HasColumnName("base_unit_id");
            entity.Property(e => e.CanImageVariant1024BeZoomed)
                .HasComment("Can Variant Image 1024 be zoomed")
                .HasColumnName("can_image_variant_1024_be_zoomed");
            entity.Property(e => e.CombinationIndices)
                .HasComment("Combination Indices")
                .HasColumnType("character varying")
                .HasColumnName("combination_indices");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultCode)
                .HasComment("Internal Reference")
                .HasColumnType("character varying")
                .HasColumnName("default_code");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.Volume)
                .HasComment("Volume")
                .HasColumnName("volume");
            entity.Property(e => e.Weight)
                .HasComment("Weight")
                .HasColumnName("weight");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.BaseUnit).WithMany(p => p.ProductProducts)
                .HasForeignKey(d => d.BaseUnitId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_base_unit_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductProductCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProductProducts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductProducts)
                .HasForeignKey(d => d.ProductTmplId)
                .HasConstraintName("product_product_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductProductWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_write_uid_fkey");

            entity.HasMany(d => d.ProductTags).WithMany(p => p.ProductProducts)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTagProductProductRel",
                    r => r.HasOne<ProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .HasConstraintName("product_tag_product_product_rel_product_tag_id_fkey"),
                    l => l.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_tag_product_product_rel_product_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductProductId", "ProductTagId").HasName("product_tag_product_product_rel_pkey");
                        j.ToTable("product_tag_product_product_rel", tb => tb.HasComment("RELATION BETWEEN product_product AND product_tag"));
                        j.HasIndex(new[] { "ProductTagId", "ProductProductId" }, "product_tag_product_product_r_product_tag_id_product_produc_idx");
                        j.IndexerProperty<int>("ProductProductId").HasColumnName("product_product_id");
                        j.IndexerProperty<int>("ProductTagId").HasColumnName("product_tag_id");
                    });

            entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.ProductProducts)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductVariantCombination",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_variant_combination_product_template_attribute_val_fkey"),
                    l => l.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_variant_combination_product_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductProductId", "ProductTemplateAttributeValueId").HasName("product_variant_combination_pkey");
                        j.ToTable("product_variant_combination", tb => tb.HasComment("RELATION BETWEEN product_product AND product_template_attribute_value"));
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "ProductProductId" }, "product_variant_combination_product_template_attribute_valu_idx");
                        j.IndexerProperty<int>("ProductProductId").HasColumnName("product_product_id");
                        j.IndexerProperty<int>("ProductTemplateAttributeValueId").HasColumnName("product_template_attribute_value_id");
                    });

            entity.HasMany(d => d.ResPartners).WithMany(p => p.ProductProducts)
                .UsingEntity<Dictionary<string, object>>(
                    "StockNotificationProductPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("stock_notification_product_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("stock_notification_product_partner_rel_product_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductProductId", "ResPartnerId").HasName("stock_notification_product_partner_rel_pkey");
                        j.ToTable("stock_notification_product_partner_rel", tb => tb.HasComment("RELATION BETWEEN product_product AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "ProductProductId" }, "stock_notification_product_pa_res_partner_id_product_produc_idx");
                        j.IndexerProperty<int>("ProductProductId").HasColumnName("product_product_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<ProductPublicCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_public_category_pkey");

            entity.ToTable("product_public_category", tb => tb.HasComment("Website Product Category"));

            entity.HasIndex(e => e.ParentId, "product_public_category_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "product_public_category_parent_path_index");

            entity.HasIndex(e => e.Sequence, "product_public_category_sequence_index");

            entity.HasIndex(e => e.WebsiteId, "product_public_category_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Category")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteDescription)
                .HasComment("Category Description")
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductPublicCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_public_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_public_category_parent_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductPublicCategories)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_public_category_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductPublicCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_public_category_write_uid_fkey");

            entity.HasMany(d => d.ProductTemplates).WithMany(p => p.ProductPublicCategories)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductPublicCategoryProductTemplateRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_public_category_product_templa_product_template_id_fkey"),
                    l => l.HasOne<ProductPublicCategory>().WithMany()
                        .HasForeignKey("ProductPublicCategoryId")
                        .HasConstraintName("product_public_category_product_product_public_category_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductPublicCategoryId", "ProductTemplateId").HasName("product_public_category_product_template_rel_pkey");
                        j.ToTable("product_public_category_product_template_rel", tb => tb.HasComment("RELATION BETWEEN product_public_category AND product_template"));
                        j.HasIndex(new[] { "ProductTemplateId", "ProductPublicCategoryId" }, "product_public_category_produ_product_template_id_product_p_idx");
                        j.IndexerProperty<int>("ProductPublicCategoryId").HasColumnName("product_public_category_id");
                        j.IndexerProperty<int>("ProductTemplateId").HasColumnName("product_template_id");
                    });
        });

        modelBuilder.Entity<ProductRemoval>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_removal_pkey");

            entity.ToTable("product_removal", tb => tb.HasComment("Removal Strategy"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Method)
                .HasComment("Method")
                .HasColumnType("character varying")
                .HasColumnName("method");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductRemovalCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_removal_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductRemovalWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_removal_write_uid_fkey");
        });

        modelBuilder.Entity<ProductReplenish>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_replenish_pkey");

            entity.ToTable("product_replenish", tb => tb.HasComment("Product Replenish"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DatePlanned)
                .HasComment("Scheduled Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned");
            entity.Property(e => e.ProductHasVariants)
                .HasComment("Has variants")
                .HasColumnName("product_has_variants");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_replenish_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductReplenishCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_replenish_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("product_replenish_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.ProductTmplId)
                .HasConstraintName("product_replenish_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.ProductUomId)
                .HasConstraintName("product_replenish_product_uom_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.WarehouseId)
                .HasConstraintName("product_replenish_warehouse_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductReplenishWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_replenish_write_uid_fkey");

            entity.HasMany(d => d.StockRoutes).WithMany(p => p.ProductReplenishes)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductReplenishStockRouteRel",
                    r => r.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("StockRouteId")
                        .HasConstraintName("product_replenish_stock_route_rel_stock_route_id_fkey"),
                    l => l.HasOne<ProductReplenish>().WithMany()
                        .HasForeignKey("ProductReplenishId")
                        .HasConstraintName("product_replenish_stock_route_rel_product_replenish_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductReplenishId", "StockRouteId").HasName("product_replenish_stock_route_rel_pkey");
                        j.ToTable("product_replenish_stock_route_rel", tb => tb.HasComment("RELATION BETWEEN product_replenish AND stock_route"));
                        j.HasIndex(new[] { "StockRouteId", "ProductReplenishId" }, "product_replenish_stock_route_stock_route_id_product_replen_idx");
                        j.IndexerProperty<int>("ProductReplenishId").HasColumnName("product_replenish_id");
                        j.IndexerProperty<int>("StockRouteId").HasColumnName("stock_route_id");
                    });
        });

        modelBuilder.Entity<ProductRibbon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_ribbon_pkey");

            entity.ToTable("product_ribbon", tb => tb.HasComment("Product ribbon"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BgColor)
                .HasComment("Ribbon background color")
                .HasColumnType("character varying")
                .HasColumnName("bg_color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Html)
                .HasComment("Ribbon html")
                .HasColumnType("jsonb")
                .HasColumnName("html");
            entity.Property(e => e.HtmlClass)
                .HasComment("Ribbon class")
                .HasColumnType("character varying")
                .HasColumnName("html_class");
            entity.Property(e => e.TextColor)
                .HasComment("Ribbon text color")
                .HasColumnType("character varying")
                .HasColumnName("text_color");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductRibbonCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_ribbon_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductRibbonWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_ribbon_write_uid_fkey");
        });

        modelBuilder.Entity<ProductSupplierinfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_supplierinfo_pkey");

            entity.ToTable("product_supplierinfo", tb => tb.HasComment("Supplier Pricelist"));

            entity.HasIndex(e => e.CompanyId, "product_supplierinfo_company_id_index");

            entity.HasIndex(e => e.ProductTmplId, "product_supplierinfo_product_tmpl_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DateEnd)
                .HasComment("End Date")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnName("date_start");
            entity.Property(e => e.Delay)
                .HasComment("Delivery Lead Time")
                .HasColumnName("delay");
            entity.Property(e => e.MinQty)
                .HasComment("Quantity")
                .HasColumnName("min_qty");
            entity.Property(e => e.PartnerId)
                .HasComment("Vendor")
                .HasColumnName("partner_id");
            entity.Property(e => e.Price)
                .HasComment("Price")
                .HasColumnName("price");
            entity.Property(e => e.ProductCode)
                .HasComment("Vendor Product Code")
                .HasColumnType("character varying")
                .HasColumnName("product_code");
            entity.Property(e => e.ProductId)
                .HasComment("Product Variant")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductName)
                .HasComment("Vendor Product Name")
                .HasColumnType("character varying")
                .HasColumnName("product_name");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductSupplierinfos)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductSupplierinfoCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.ProductSupplierinfos)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_supplierinfo_currency_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ProductSupplierinfos)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("product_supplierinfo_partner_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductSupplierinfos)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductSupplierinfos)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_supplierinfo_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductSupplierinfoWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_write_uid_fkey");
        });

        modelBuilder.Entity<ProductTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_tag_pkey");

            entity.ToTable("product_tag", tb => tb.HasComment("Product Tag"));

            entity.HasIndex(e => e.Name, "product_tag_name_uniq").IsUnique();

            entity.HasIndex(e => e.WebsiteId, "product_tag_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RibbonId)
                .HasComment("Ribbon")
                .HasColumnName("ribbon_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_tag_create_uid_fkey");

            entity.HasOne(d => d.Ribbon).WithMany(p => p.ProductTags)
                .HasForeignKey(d => d.RibbonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_tag_ribbon_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductTags)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_tag_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_tag_write_uid_fkey");
        });

        modelBuilder.Entity<ProductTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_pkey");

            entity.ToTable("product_template", tb => tb.HasComment("Product"));

            entity.HasIndex(e => e.CompanyId, "product_template_company_id_index");

            entity.HasIndex(e => e.IsPublished, "product_template_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "product_template_website_id_index");

            entity.HasIndex(e => e.WebsiteSequence, "product_template_website_sequence_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AllowOutOfStockOrder)
                .HasComment("Continue selling when out-of-stock")
                .HasColumnName("allow_out_of_stock_order");
            entity.Property(e => e.AvailableInPos)
                .HasComment("Available in POS")
                .HasColumnName("available_in_pos");
            entity.Property(e => e.AvailableThreshold)
                .HasComment("Show Threshold")
                .HasColumnName("available_threshold");
            entity.Property(e => e.BaseUnitCount)
                .HasComment("Base Unit Count")
                .HasColumnName("base_unit_count");
            entity.Property(e => e.BaseUnitId)
                .HasComment("Custom Unit of Measure")
                .HasColumnName("base_unit_id");
            entity.Property(e => e.CanBeExpensed)
                .HasDefaultValueSql("false")
                .HasColumnName("can_be_expensed");
            entity.Property(e => e.CanImage1024BeZoomed)
                .HasComment("Can Image 1024 be zoomed")
                .HasColumnName("can_image_1024_be_zoomed");
            entity.Property(e => e.CategId)
                .HasComment("Product Category")
                .HasColumnName("categ_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CompareListPrice)
                .HasComment("Compare to Price")
                .HasColumnName("compare_list_price");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DaysToPrepareMo)
                .HasComment("Days to prepare Manufacturing Order")
                .HasColumnName("days_to_prepare_mo");
            entity.Property(e => e.DefaultCode)
                .HasComment("Internal Reference")
                .HasColumnType("character varying")
                .HasColumnName("default_code");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.DescriptionPicking)
                .HasComment("Description on Picking")
                .HasColumnType("jsonb")
                .HasColumnName("description_picking");
            entity.Property(e => e.DescriptionPickingin)
                .HasComment("Description on Receptions")
                .HasColumnType("jsonb")
                .HasColumnName("description_pickingin");
            entity.Property(e => e.DescriptionPickingout)
                .HasComment("Description on Delivery Orders")
                .HasColumnType("jsonb")
                .HasColumnName("description_pickingout");
            entity.Property(e => e.DescriptionPurchase)
                .HasComment("Purchase Description")
                .HasColumnType("jsonb")
                .HasColumnName("description_purchase");
            entity.Property(e => e.DescriptionSale)
                .HasComment("Sales Description")
                .HasColumnType("jsonb")
                .HasColumnName("description_sale");
            entity.Property(e => e.DetailedType)
                .HasComment("Product Type")
                .HasColumnType("character varying")
                .HasColumnName("detailed_type");
            entity.Property(e => e.ExpensePolicy)
                .HasComment("Re-Invoice Expenses")
                .HasColumnType("character varying")
                .HasColumnName("expense_policy");
            entity.Property(e => e.HasConfigurableAttributes)
                .HasComment("Is a configurable product")
                .HasColumnName("has_configurable_attributes");
            entity.Property(e => e.InvoicePolicy)
                .HasComment("Invoicing Policy")
                .HasColumnType("character varying")
                .HasColumnName("invoice_policy");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.ListPrice)
                .HasComment("Sales Price")
                .HasColumnName("list_price");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OutOfStockMessage)
                .HasComment("Out-of-Stock Message")
                .HasColumnType("jsonb")
                .HasColumnName("out_of_stock_message");
            entity.Property(e => e.PosCategId)
                .HasComment("Point of Sale Category")
                .HasColumnName("pos_categ_id");
            entity.Property(e => e.Priority)
                .HasComment("Favorite")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.ProduceDelay)
                .HasComment("Manufacturing Lead Time")
                .HasColumnName("produce_delay");
            entity.Property(e => e.PurchaseLineWarn)
                .HasComment("Purchase Order Line Warning")
                .HasColumnType("character varying")
                .HasColumnName("purchase_line_warn");
            entity.Property(e => e.PurchaseLineWarnMsg)
                .HasComment("Message for Purchase Order Line")
                .HasColumnName("purchase_line_warn_msg");
            entity.Property(e => e.PurchaseMethod)
                .HasComment("Control Policy")
                .HasColumnType("character varying")
                .HasColumnName("purchase_method");
            entity.Property(e => e.PurchaseOk)
                .HasComment("Can be Purchased")
                .HasColumnName("purchase_ok");
            entity.Property(e => e.RatingLastValue)
                .HasComment("Rating Last Value")
                .HasColumnName("rating_last_value");
            entity.Property(e => e.SaleDelay)
                .HasComment("Customer Lead Time")
                .HasColumnName("sale_delay");
            entity.Property(e => e.SaleLineWarn)
                .HasComment("Sales Order Line")
                .HasColumnType("character varying")
                .HasColumnName("sale_line_warn");
            entity.Property(e => e.SaleLineWarnMsg)
                .HasComment("Message for Sales Order Line")
                .HasColumnName("sale_line_warn_msg");
            entity.Property(e => e.SaleOk)
                .HasComment("Can be Sold")
                .HasColumnName("sale_ok");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ServiceTracking)
                .HasComment("Create on Order")
                .HasColumnType("character varying")
                .HasColumnName("service_tracking");
            entity.Property(e => e.ServiceType)
                .HasComment("Track Service")
                .HasColumnType("character varying")
                .HasColumnName("service_type");
            entity.Property(e => e.ShowAvailability)
                .HasComment("Show availability Qty")
                .HasColumnName("show_availability");
            entity.Property(e => e.ToWeight)
                .HasComment("To Weigh With Scale")
                .HasColumnName("to_weight");
            entity.Property(e => e.Tracking)
                .HasComment("Tracking")
                .HasColumnType("character varying")
                .HasColumnName("tracking");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UomId)
                .HasComment("Unit of Measure")
                .HasColumnName("uom_id");
            entity.Property(e => e.UomPoId)
                .HasComment("Purchase UoM")
                .HasColumnName("uom_po_id");
            entity.Property(e => e.Volume)
                .HasComment("Volume")
                .HasColumnName("volume");
            entity.Property(e => e.WebsiteDescription)
                .HasComment("Description for the website")
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WebsiteRibbonId)
                .HasComment("Ribbon")
                .HasColumnName("website_ribbon_id");
            entity.Property(e => e.WebsiteSequence)
                .HasComment("Website Sequence")
                .HasColumnName("website_sequence");
            entity.Property(e => e.WebsiteSizeX)
                .HasComment("Size X")
                .HasColumnName("website_size_x");
            entity.Property(e => e.WebsiteSizeY)
                .HasComment("Size Y")
                .HasColumnName("website_size_y");
            entity.Property(e => e.Weight)
                .HasComment("Weight")
                .HasColumnName("weight");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.BaseUnit).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.BaseUnitId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_base_unit_id_fkey");

            entity.HasOne(d => d.Categ).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.CategId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_categ_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_message_main_attachment_id_fkey");

            entity.HasOne(d => d.PosCateg).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.PosCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_pos_categ_id_fkey");

            entity.HasOne(d => d.Uom).WithMany(p => p.ProductTemplateUoms)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_uom_id_fkey");

            entity.HasOne(d => d.UomPo).WithMany(p => p.ProductTemplateUomPos)
                .HasForeignKey(d => d.UomPoId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_uom_po_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_website_id_fkey");

            entity.HasOne(d => d.WebsiteRibbon).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.WebsiteRibbonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_website_ribbon_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_write_uid_fkey");

            entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.ProductTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTagProductTemplateRel",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_account_tag_product_templat_account_account_tag_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("account_account_tag_product_template_r_product_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductTemplateId", "AccountAccountTagId").HasName("account_account_tag_product_template_rel_pkey");
                        j.ToTable("account_account_tag_product_template_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND account_account_tag"));
                        j.HasIndex(new[] { "AccountAccountTagId", "ProductTemplateId" }, "account_account_tag_product_t_account_account_tag_id_produc_idx");
                        j.IndexerProperty<int>("ProductTemplateId").HasColumnName("product_template_id");
                        j.IndexerProperty<int>("AccountAccountTagId").HasColumnName("account_account_tag_id");
                    });

            entity.HasMany(d => d.Dests).WithMany(p => p.Srcs)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAccessoryRel",
                    r => r.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_accessory_rel_dest_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_accessory_rel_src_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_accessory_rel_pkey");
                        j.ToTable("product_accessory_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND product_product"));
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_accessory_rel_dest_id_src_id_idx");
                        j.IndexerProperty<int>("SrcId").HasColumnName("src_id");
                        j.IndexerProperty<int>("DestId").HasColumnName("dest_id");
                    });

            entity.HasMany(d => d.Dests1).WithMany(p => p.SrcsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductOptionalRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_optional_rel_dest_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_optional_rel_src_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_optional_rel_pkey");
                        j.ToTable("product_optional_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND product_template"));
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_optional_rel_dest_id_src_id_idx");
                        j.IndexerProperty<int>("SrcId").HasColumnName("src_id");
                        j.IndexerProperty<int>("DestId").HasColumnName("dest_id");
                    });

            entity.HasMany(d => d.DestsNavigation).WithMany(p => p.Srcs)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAlternativeRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_alternative_rel_dest_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_alternative_rel_src_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_alternative_rel_pkey");
                        j.ToTable("product_alternative_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND product_template"));
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_alternative_rel_dest_id_src_id_idx");
                        j.IndexerProperty<int>("SrcId").HasColumnName("src_id");
                        j.IndexerProperty<int>("DestId").HasColumnName("dest_id");
                    });

            entity.HasMany(d => d.ProductTags).WithMany(p => p.ProductTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTagProductTemplateRel",
                    r => r.HasOne<ProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .HasConstraintName("product_tag_product_template_rel_product_tag_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_tag_product_template_rel_product_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductTemplateId", "ProductTagId").HasName("product_tag_product_template_rel_pkey");
                        j.ToTable("product_tag_product_template_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND product_tag"));
                        j.HasIndex(new[] { "ProductTagId", "ProductTemplateId" }, "product_tag_product_template__product_tag_id_product_templa_idx");
                        j.IndexerProperty<int>("ProductTemplateId").HasColumnName("product_template_id");
                        j.IndexerProperty<int>("ProductTagId").HasColumnName("product_tag_id");
                    });

            entity.HasMany(d => d.Srcs).WithMany(p => p.DestsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAlternativeRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_alternative_rel_src_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_alternative_rel_dest_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_alternative_rel_pkey");
                        j.ToTable("product_alternative_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND product_template"));
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_alternative_rel_dest_id_src_id_idx");
                        j.IndexerProperty<int>("SrcId").HasColumnName("src_id");
                        j.IndexerProperty<int>("DestId").HasColumnName("dest_id");
                    });

            entity.HasMany(d => d.SrcsNavigation).WithMany(p => p.Dests1)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductOptionalRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_optional_rel_src_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_optional_rel_dest_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_optional_rel_pkey");
                        j.ToTable("product_optional_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND product_template"));
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_optional_rel_dest_id_src_id_idx");
                        j.IndexerProperty<int>("SrcId").HasColumnName("src_id");
                        j.IndexerProperty<int>("DestId").HasColumnName("dest_id");
                    });

            entity.HasMany(d => d.Taxes).WithMany(p => p.Prods)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductSupplierTaxesRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("product_supplier_taxes_rel_tax_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProdId")
                        .HasConstraintName("product_supplier_taxes_rel_prod_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProdId", "TaxId").HasName("product_supplier_taxes_rel_pkey");
                        j.ToTable("product_supplier_taxes_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND account_tax"));
                        j.HasIndex(new[] { "TaxId", "ProdId" }, "product_supplier_taxes_rel_tax_id_prod_id_idx");
                        j.IndexerProperty<int>("ProdId").HasColumnName("prod_id");
                        j.IndexerProperty<int>("TaxId").HasColumnName("tax_id");
                    });

            entity.HasMany(d => d.TaxesNavigation).WithMany(p => p.ProdsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTaxesRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("product_taxes_rel_tax_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProdId")
                        .HasConstraintName("product_taxes_rel_prod_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProdId", "TaxId").HasName("product_taxes_rel_pkey");
                        j.ToTable("product_taxes_rel", tb => tb.HasComment("RELATION BETWEEN product_template AND account_tax"));
                        j.HasIndex(new[] { "TaxId", "ProdId" }, "product_taxes_rel_tax_id_prod_id_idx");
                        j.IndexerProperty<int>("ProdId").HasColumnName("prod_id");
                        j.IndexerProperty<int>("TaxId").HasColumnName("tax_id");
                    });
        });

        modelBuilder.Entity<ProductTemplateAttributeExclusion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_attribute_exclusion_pkey");

            entity.ToTable("product_template_attribute_exclusion", tb => tb.HasComment("Product Template Attribute Exclusion"));

            entity.HasIndex(e => e.ProductTemplateAttributeValueId, "product_template_attribute_exclusion_product_template_attribute");

            entity.HasIndex(e => e.ProductTmplId, "product_template_attribute_exclusion_product_tmpl_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductTemplateAttributeValueId)
                .HasComment("Attribute Value")
                .HasColumnName("product_template_attribute_value_id");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductTemplateAttributeExclusionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_exclusion_create_uid_fkey");

            entity.HasOne(d => d.ProductTemplateAttributeValue).WithMany(p => p.ProductTemplateAttributeExclusionsNavigation)
                .HasForeignKey(d => d.ProductTemplateAttributeValueId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_template_attribute_ex_product_template_attribute_v_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductTemplateAttributeExclusions)
                .HasForeignKey(d => d.ProductTmplId)
                .HasConstraintName("product_template_attribute_exclusion_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductTemplateAttributeExclusionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_exclusion_write_uid_fkey");

            entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.ProductTemplateAttributeExclusions)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAttrExclusionValueIdsRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .HasConstraintName("product_attr_exclusion_value__product_template_attribute_v_fkey"),
                    l => l.HasOne<ProductTemplateAttributeExclusion>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeExclusionId")
                        .HasConstraintName("product_attr_exclusion_value__product_template_attribute_e_fkey"),
                    j =>
                    {
                        j.HasKey("ProductTemplateAttributeExclusionId", "ProductTemplateAttributeValueId").HasName("product_attr_exclusion_value_ids_rel_pkey");
                        j.ToTable("product_attr_exclusion_value_ids_rel", tb => tb.HasComment("RELATION BETWEEN product_template_attribute_exclusion AND product_template_attribute_value"));
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "ProductTemplateAttributeExclusionId" }, "product_attr_exclusion_value__product_template_attribute_va_idx");
                        j.IndexerProperty<int>("ProductTemplateAttributeExclusionId").HasColumnName("product_template_attribute_exclusion_id");
                        j.IndexerProperty<int>("ProductTemplateAttributeValueId").HasColumnName("product_template_attribute_value_id");
                    });
        });

        modelBuilder.Entity<ProductTemplateAttributeLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_attribute_line_pkey");

            entity.ToTable("product_template_attribute_line", tb => tb.HasComment("Product Template Attribute Line"));

            entity.HasIndex(e => e.AttributeId, "product_template_attribute_line_attribute_id_index");

            entity.HasIndex(e => e.ProductTmplId, "product_template_attribute_line_product_tmpl_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AttributeId)
                .HasComment("Attribute")
                .HasColumnName("attribute_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.ValueCount)
                .HasComment("Value Count")
                .HasColumnName("value_count");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductTemplateAttributeLines)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_attribute_line_attribute_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductTemplateAttributeLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_line_create_uid_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductTemplateAttributeLines)
                .HasForeignKey(d => d.ProductTmplId)
                .HasConstraintName("product_template_attribute_line_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductTemplateAttributeLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_line_write_uid_fkey");
        });

        modelBuilder.Entity<ProductTemplateAttributeValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_attribute_value_pkey");

            entity.ToTable("product_template_attribute_value", tb => tb.HasComment("Product Template Attribute Value"));

            entity.HasIndex(e => e.AttributeId, "product_template_attribute_value_attribute_id_index");

            entity.HasIndex(e => e.AttributeLineId, "product_template_attribute_value_attribute_line_id_index");

            entity.HasIndex(e => new { e.AttributeLineId, e.ProductAttributeValueId }, "product_template_attribute_value_attribute_value_unique").IsUnique();

            entity.HasIndex(e => e.ProductAttributeValueId, "product_template_attribute_value_product_attribute_value_id_ind");

            entity.HasIndex(e => e.ProductTmplId, "product_template_attribute_value_product_tmpl_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AttributeId)
                .HasComment("Attribute")
                .HasColumnName("attribute_id");
            entity.Property(e => e.AttributeLineId)
                .HasComment("Attribute Line")
                .HasColumnName("attribute_line_id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PriceExtra)
                .HasComment("Value Price Extra")
                .HasColumnName("price_extra");
            entity.Property(e => e.ProductAttributeValueId)
                .HasComment("Attribute Value")
                .HasColumnName("product_attribute_value_id");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.PtavActive)
                .HasComment("Active")
                .HasColumnName("ptav_active");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_attribute_id_fkey");

            entity.HasOne(d => d.AttributeLine).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.AttributeLineId)
                .HasConstraintName("product_template_attribute_value_attribute_line_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProductTemplateAttributeValueCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_create_uid_fkey");

            entity.HasOne(d => d.ProductAttributeValue).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.ProductAttributeValueId)
                .HasConstraintName("product_template_attribute_valu_product_attribute_value_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProductTemplateAttributeValueWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectCollaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_collaborator_pkey");

            entity.ToTable("project_collaborator", tb => tb.HasComment("Collaborators in project shared"));

            entity.HasIndex(e => new { e.ProjectId, e.PartnerId }, "project_collaborator_unique_collaborator").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PartnerId)
                .HasComment("Collaborator")
                .HasColumnName("partner_id");
            entity.Property(e => e.ProjectId)
                .HasComment("Project Shared")
                .HasColumnName("project_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectCollaboratorCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_collaborator_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ProjectCollaborators)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_collaborator_partner_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectCollaborators)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_collaborator_project_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectCollaboratorWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_collaborator_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectMilestone>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_milestone_pkey");

            entity.ToTable("project_milestone", tb => tb.HasComment("Project Milestone"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Deadline)
                .HasComment("Deadline")
                .HasColumnName("deadline");
            entity.Property(e => e.IsReached)
                .HasComment("Reached")
                .HasColumnName("is_reached");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ProjectId)
                .HasComment("Project")
                .HasColumnName("project_id");
            entity.Property(e => e.QuantityPercentage)
                .HasComment("Quantity")
                .HasColumnName("quantity_percentage");
            entity.Property(e => e.ReachedDate)
                .HasComment("Reached Date")
                .HasColumnName("reached_date");
            entity.Property(e => e.SaleLineId)
                .HasComment("Sales Order Item")
                .HasColumnName("sale_line_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectMilestoneCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectMilestones)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectMilestones)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("project_milestone_project_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.ProjectMilestones)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_sale_line_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectMilestoneWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectProject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_project_pkey");

            entity.ToTable("project_project", tb => tb.HasComment("Project"));

            entity.HasIndex(e => e.Date, "project_project_date_index");

            entity.HasIndex(e => e.SaleLineId, "project_project_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.HasIndex(e => e.StageId, "project_project_stage_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AliasId)
                .HasComment("Alias")
                .HasColumnName("alias_id");
            entity.Property(e => e.AllowBillable)
                .HasComment("Billable")
                .HasColumnName("allow_billable");
            entity.Property(e => e.AllowMilestones)
                .HasComment("Milestones")
                .HasColumnName("allow_milestones");
            entity.Property(e => e.AllowRecurringTasks)
                .HasComment("Recurring Tasks")
                .HasColumnName("allow_recurring_tasks");
            entity.Property(e => e.AllowSubtasks)
                .HasComment("Sub-tasks")
                .HasColumnName("allow_subtasks");
            entity.Property(e => e.AllowTaskDependencies)
                .HasComment("Task Dependencies")
                .HasColumnName("allow_task_dependencies");
            entity.Property(e => e.AnalyticAccountId)
                .HasComment("Analytic Account")
                .HasColumnName("analytic_account_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Expiration Date")
                .HasColumnName("date");
            entity.Property(e => e.DateStart)
                .HasComment("Start Date")
                .HasColumnName("date_start");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.LabelTasks)
                .HasComment("Use Tasks as")
                .HasColumnType("jsonb")
                .HasColumnName("label_tasks");
            entity.Property(e => e.LastUpdateId)
                .HasComment("Last Update")
                .HasColumnName("last_update_id");
            entity.Property(e => e.LastUpdateStatus)
                .HasComment("Last Update Status")
                .HasColumnType("character varying")
                .HasColumnName("last_update_status");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PartnerEmail)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("partner_email");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerPhone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("partner_phone");
            entity.Property(e => e.PrivacyVisibility)
                .HasComment("Visibility")
                .HasColumnType("character varying")
                .HasColumnName("privacy_visibility");
            entity.Property(e => e.RatingActive)
                .HasComment("Customer Ratings")
                .HasColumnName("rating_active");
            entity.Property(e => e.RatingRequestDeadline)
                .HasComment("Rating Request Deadline")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("rating_request_deadline");
            entity.Property(e => e.RatingStatus)
                .HasComment("Customer Ratings Status")
                .HasColumnType("character varying")
                .HasColumnName("rating_status");
            entity.Property(e => e.RatingStatusPeriod)
                .HasComment("Rating Frequency")
                .HasColumnType("character varying")
                .HasColumnName("rating_status_period");
            entity.Property(e => e.SaleLineId)
                .HasComment("Sales Order Item")
                .HasColumnName("sale_line_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.TaskPropertiesDefinition)
                .HasComment("Task Properties")
                .HasColumnType("jsonb")
                .HasColumnName("task_properties_definition");
            entity.Property(e => e.UserId)
                .HasComment("Project Manager")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_project_alias_id_fkey");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_analytic_account_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_project_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectProjectCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_create_uid_fkey");

            entity.HasOne(d => d.LastUpdate).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.LastUpdateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_last_update_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_partner_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_sale_line_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_project_stage_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ProjectProjectUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectProjectWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_write_uid_fkey");

            entity.HasMany(d => d.ProjectTags).WithMany(p => p.ProjectProjects)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectProjectProjectTagsRel",
                    r => r.HasOne<ProjectTag>().WithMany()
                        .HasForeignKey("ProjectTagsId")
                        .HasConstraintName("project_project_project_tags_rel_project_tags_id_fkey"),
                    l => l.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectProjectId")
                        .HasConstraintName("project_project_project_tags_rel_project_project_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectProjectId", "ProjectTagsId").HasName("project_project_project_tags_rel_pkey");
                        j.ToTable("project_project_project_tags_rel", tb => tb.HasComment("RELATION BETWEEN project_project AND project_tags"));
                        j.HasIndex(new[] { "ProjectTagsId", "ProjectProjectId" }, "project_project_project_tags__project_tags_id_project_proje_idx");
                        j.IndexerProperty<int>("ProjectProjectId").HasColumnName("project_project_id");
                        j.IndexerProperty<int>("ProjectTagsId").HasColumnName("project_tags_id");
                    });

            entity.HasMany(d => d.Users).WithMany(p => p.Projects)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("project_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("project_favorite_user_rel_project_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectId", "UserId").HasName("project_favorite_user_rel_pkey");
                        j.ToTable("project_favorite_user_rel", tb => tb.HasComment("RELATION BETWEEN project_project AND res_users"));
                        j.HasIndex(new[] { "UserId", "ProjectId" }, "project_favorite_user_rel_user_id_project_id_idx");
                        j.IndexerProperty<int>("ProjectId").HasColumnName("project_id");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                    });
        });

        modelBuilder.Entity<ProjectProjectStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_project_stage_pkey");

            entity.ToTable("project_project_stage", tb => tb.HasComment("Project Stage"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Fold)
                .HasComment("Folded in Kanban")
                .HasColumnName("fold");
            entity.Property(e => e.MailTemplateId)
                .HasComment("Email Template")
                .HasColumnName("mail_template_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SmsTemplateId)
                .HasComment("SMS Template")
                .HasColumnName("sms_template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectProjectStageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.ProjectProjectStages)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_mail_template_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.ProjectProjectStages)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_sms_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectProjectStageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectShareWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_share_wizard_pkey");

            entity.ToTable("project_share_wizard", tb => tb.HasComment("Project Sharing"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessMode)
                .HasComment("Access Mode")
                .HasColumnType("character varying")
                .HasColumnName("access_mode");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DisplayAccessMode)
                .HasComment("Display Access Mode")
                .HasColumnName("display_access_mode");
            entity.Property(e => e.Note)
                .HasComment("Note")
                .HasColumnName("note");
            entity.Property(e => e.ResId)
                .HasComment("Related Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectShareWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_share_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectShareWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_share_wizard_write_uid_fkey");

            entity.HasMany(d => d.ResPartners).WithMany(p => p.ProjectShareWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectShareWizardResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("project_share_wizard_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<ProjectShareWizard>().WithMany()
                        .HasForeignKey("ProjectShareWizardId")
                        .HasConstraintName("project_share_wizard_res_partner_r_project_share_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectShareWizardId", "ResPartnerId").HasName("project_share_wizard_res_partner_rel_pkey");
                        j.ToTable("project_share_wizard_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN project_share_wizard AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "ProjectShareWizardId" }, "project_share_wizard_res_part_res_partner_id_project_share__idx");
                        j.IndexerProperty<int>("ProjectShareWizardId").HasColumnName("project_share_wizard_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<ProjectTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_tags_pkey");

            entity.ToTable("project_tags", tb => tb.HasComment("Project Tags"));

            entity.HasIndex(e => e.Name, "project_tags_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_tags_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_tags_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_pkey");

            entity.ToTable("project_task", tb => tb.HasComment("Task"));

            entity.HasIndex(e => e.AncestorId, "project_task_ancestor_id_index").HasFilter("(ancestor_id IS NOT NULL)");

            entity.HasIndex(e => e.DateDeadline, "project_task_date_deadline_index");

            entity.HasIndex(e => e.DateEnd, "project_task_date_end_index");

            entity.HasIndex(e => e.DateLastStageUpdate, "project_task_date_last_stage_update_index");

            entity.HasIndex(e => e.DisplayProjectId, "project_task_display_project_id_index");

            entity.HasIndex(e => e.EmailFrom, "project_task_email_from_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.IsClosed, "project_task_is_closed_index");

            entity.HasIndex(e => e.MilestoneId, "project_task_milestone_id_index").HasFilter("(milestone_id IS NOT NULL)");

            entity.HasIndex(e => e.Name, "project_task_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ParentId, "project_task_parent_id_index");

            entity.HasIndex(e => e.Priority, "project_task_priority_index");

            entity.HasIndex(e => e.ProjectId, "project_task_project_id_index");

            entity.HasIndex(e => e.SaleLineId, "project_task_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.HasIndex(e => e.StageId, "project_task_stage_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AnalyticAccountId)
                .HasComment("Analytic Account")
                .HasColumnName("analytic_account_id");
            entity.Property(e => e.AncestorId)
                .HasComment("Ancestor Task")
                .HasColumnName("ancestor_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateAssign)
                .HasComment("Assigning Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_assign");
            entity.Property(e => e.DateDeadline)
                .HasComment("Deadline")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DateEnd)
                .HasComment("Ending Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateLastStageUpdate)
                .HasComment("Last Stage Update")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_stage_update");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.DisplayProjectId)
                .HasComment("Display Project")
                .HasColumnName("display_project_id");
            entity.Property(e => e.DisplayedImageId)
                .HasComment("Cover Image")
                .HasColumnName("displayed_image_id");
            entity.Property(e => e.EmailCc)
                .HasComment("Email cc")
                .HasColumnType("character varying")
                .HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom)
                .HasComment("Email From")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.IsAnalyticAccountIdChanged)
                .HasComment("Is Analytic Account Manually Changed")
                .HasColumnName("is_analytic_account_id_changed");
            entity.Property(e => e.IsBlocked)
                .HasComment("Is Blocked")
                .HasColumnName("is_blocked");
            entity.Property(e => e.IsClosed)
                .HasComment("Closing Stage")
                .HasColumnName("is_closed");
            entity.Property(e => e.KanbanState)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("kanban_state");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MilestoneId)
                .HasComment("Milestone")
                .HasColumnName("milestone_id");
            entity.Property(e => e.Name)
                .HasComment("Title")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Task")
                .HasColumnName("parent_id");
            entity.Property(e => e.PartnerEmail)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("partner_email");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerPhone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("partner_phone");
            entity.Property(e => e.PlannedHours)
                .HasComment("Initially Planned Hours")
                .HasColumnName("planned_hours");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.ProjectId)
                .HasComment("Project")
                .HasColumnName("project_id");
            entity.Property(e => e.RatingLastValue)
                .HasComment("Rating Last Value")
                .HasColumnName("rating_last_value");
            entity.Property(e => e.RecurrenceId)
                .HasComment("Recurrence")
                .HasColumnName("recurrence_id");
            entity.Property(e => e.RecurringTask)
                .HasComment("Recurrent")
                .HasColumnName("recurring_task");
            entity.Property(e => e.SaleLineId)
                .HasComment("Sales Order Item")
                .HasColumnName("sale_line_id");
            entity.Property(e => e.SaleOrderId)
                .HasComment("Sales Order")
                .HasColumnName("sale_order_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.TaskProperties)
                .HasComment("Properties")
                .HasColumnType("jsonb")
                .HasColumnName("task_properties");
            entity.Property(e => e.WorkingDaysClose)
                .HasComment("Working Days to Close")
                .HasColumnName("working_days_close");
            entity.Property(e => e.WorkingDaysOpen)
                .HasComment("Working Days to Assign")
                .HasColumnName("working_days_open");
            entity.Property(e => e.WorkingHoursClose)
                .HasComment("Working Hours to Close")
                .HasColumnName("working_hours_close");
            entity.Property(e => e.WorkingHoursOpen)
                .HasComment("Working Hours to Assign")
                .HasColumnName("working_hours_open");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_analytic_account_id_fkey");

            entity.HasOne(d => d.Ancestor).WithMany(p => p.InverseAncestor)
                .HasForeignKey(d => d.AncestorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_ancestor_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_task_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectTaskCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_create_uid_fkey");

            entity.HasOne(d => d.DisplayProject).WithMany(p => p.ProjectTaskDisplayProjects)
                .HasForeignKey(d => d.DisplayProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_display_project_id_fkey");

            entity.HasOne(d => d.DisplayedImage).WithMany(p => p.ProjectTaskDisplayedImages)
                .HasForeignKey(d => d.DisplayedImageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_displayed_image_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectTaskMessageMainAttachments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Milestone).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.MilestoneId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_milestone_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_parent_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_partner_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectTaskProjects)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_project_id_fkey");

            entity.HasOne(d => d.Recurrence).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.RecurrenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_recurrence_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_sale_line_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_sale_order_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_task_stage_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectTaskWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_write_uid_fkey");

            entity.HasMany(d => d.DependsOns).WithMany(p => p.Tasks)
                .UsingEntity<Dictionary<string, object>>(
                    "TaskDependenciesRel",
                    r => r.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("DependsOnId")
                        .HasConstraintName("task_dependencies_rel_depends_on_id_fkey"),
                    l => l.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("TaskId")
                        .HasConstraintName("task_dependencies_rel_task_id_fkey"),
                    j =>
                    {
                        j.HasKey("TaskId", "DependsOnId").HasName("task_dependencies_rel_pkey");
                        j.ToTable("task_dependencies_rel", tb => tb.HasComment("RELATION BETWEEN project_task AND project_task"));
                        j.HasIndex(new[] { "DependsOnId", "TaskId" }, "task_dependencies_rel_depends_on_id_task_id_idx");
                        j.IndexerProperty<int>("TaskId").HasColumnName("task_id");
                        j.IndexerProperty<int>("DependsOnId").HasColumnName("depends_on_id");
                    });

            entity.HasMany(d => d.ProjectTags).WithMany(p => p.ProjectTasks)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectTagsProjectTaskRel",
                    r => r.HasOne<ProjectTag>().WithMany()
                        .HasForeignKey("ProjectTagsId")
                        .HasConstraintName("project_tags_project_task_rel_project_tags_id_fkey"),
                    l => l.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .HasConstraintName("project_tags_project_task_rel_project_task_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectTaskId", "ProjectTagsId").HasName("project_tags_project_task_rel_pkey");
                        j.ToTable("project_tags_project_task_rel", tb => tb.HasComment("RELATION BETWEEN project_task AND project_tags"));
                        j.HasIndex(new[] { "ProjectTagsId", "ProjectTaskId" }, "project_tags_project_task_rel_project_tags_id_project_task__idx");
                        j.IndexerProperty<int>("ProjectTaskId").HasColumnName("project_task_id");
                        j.IndexerProperty<int>("ProjectTagsId").HasColumnName("project_tags_id");
                    });

            entity.HasMany(d => d.Tasks).WithMany(p => p.DependsOns)
                .UsingEntity<Dictionary<string, object>>(
                    "TaskDependenciesRel",
                    r => r.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("TaskId")
                        .HasConstraintName("task_dependencies_rel_task_id_fkey"),
                    l => l.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("DependsOnId")
                        .HasConstraintName("task_dependencies_rel_depends_on_id_fkey"),
                    j =>
                    {
                        j.HasKey("TaskId", "DependsOnId").HasName("task_dependencies_rel_pkey");
                        j.ToTable("task_dependencies_rel", tb => tb.HasComment("RELATION BETWEEN project_task AND project_task"));
                        j.HasIndex(new[] { "DependsOnId", "TaskId" }, "task_dependencies_rel_depends_on_id_task_id_idx");
                        j.IndexerProperty<int>("TaskId").HasColumnName("task_id");
                        j.IndexerProperty<int>("DependsOnId").HasColumnName("depends_on_id");
                    });
        });

        modelBuilder.Entity<ProjectTaskRecurrence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_recurrence_pkey");

            entity.ToTable("project_task_recurrence", tb => tb.HasComment("Task Recurrence"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Fri)
                .HasComment("Fri")
                .HasColumnName("fri");
            entity.Property(e => e.Mon)
                .HasComment("Mon")
                .HasColumnName("mon");
            entity.Property(e => e.NextRecurrenceDate)
                .HasComment("Next Recurrence Date")
                .HasColumnName("next_recurrence_date");
            entity.Property(e => e.RecurrenceLeft)
                .HasComment("Number of Tasks Left to Create")
                .HasColumnName("recurrence_left");
            entity.Property(e => e.RepeatDay)
                .HasComment("Repeat Day")
                .HasColumnType("character varying")
                .HasColumnName("repeat_day");
            entity.Property(e => e.RepeatInterval)
                .HasComment("Repeat Every")
                .HasColumnName("repeat_interval");
            entity.Property(e => e.RepeatMonth)
                .HasComment("Repeat Month")
                .HasColumnType("character varying")
                .HasColumnName("repeat_month");
            entity.Property(e => e.RepeatNumber)
                .HasComment("Repetitions")
                .HasColumnName("repeat_number");
            entity.Property(e => e.RepeatOnMonth)
                .HasComment("Repeat On Month")
                .HasColumnType("character varying")
                .HasColumnName("repeat_on_month");
            entity.Property(e => e.RepeatOnYear)
                .HasComment("Repeat On Year")
                .HasColumnType("character varying")
                .HasColumnName("repeat_on_year");
            entity.Property(e => e.RepeatType)
                .HasComment("Until")
                .HasColumnType("character varying")
                .HasColumnName("repeat_type");
            entity.Property(e => e.RepeatUnit)
                .HasComment("Repeat Unit")
                .HasColumnType("character varying")
                .HasColumnName("repeat_unit");
            entity.Property(e => e.RepeatUntil)
                .HasComment("End Date")
                .HasColumnName("repeat_until");
            entity.Property(e => e.RepeatWeek)
                .HasComment("Repeat Week")
                .HasColumnType("character varying")
                .HasColumnName("repeat_week");
            entity.Property(e => e.RepeatWeekday)
                .HasComment("Day Of The Week")
                .HasColumnType("character varying")
                .HasColumnName("repeat_weekday");
            entity.Property(e => e.Sat)
                .HasComment("Sat")
                .HasColumnName("sat");
            entity.Property(e => e.Sun)
                .HasComment("Sun")
                .HasColumnName("sun");
            entity.Property(e => e.Thu)
                .HasComment("Thu")
                .HasColumnName("thu");
            entity.Property(e => e.Tue)
                .HasComment("Tue")
                .HasColumnName("tue");
            entity.Property(e => e.Wed)
                .HasComment("Wed")
                .HasColumnName("wed");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectTaskRecurrenceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_recurrence_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectTaskRecurrenceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_recurrence_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectTaskType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_type_pkey");

            entity.ToTable("project_task_type", tb => tb.HasComment("Task Stage"));

            entity.HasIndex(e => e.UserId, "project_task_type_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AutoValidationKanbanState)
                .HasComment("Automatic Kanban Status")
                .HasColumnName("auto_validation_kanban_state");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Fold)
                .HasComment("Folded in Kanban")
                .HasColumnName("fold");
            entity.Property(e => e.LegendBlocked)
                .HasComment("Red Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_blocked");
            entity.Property(e => e.LegendDone)
                .HasComment("Green Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_done");
            entity.Property(e => e.LegendNormal)
                .HasComment("Grey Kanban Label")
                .HasColumnType("jsonb")
                .HasColumnName("legend_normal");
            entity.Property(e => e.MailTemplateId)
                .HasComment("Email Template")
                .HasColumnName("mail_template_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RatingTemplateId)
                .HasComment("Rating Email Template")
                .HasColumnName("rating_template_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SmsTemplateId)
                .HasComment("SMS Template")
                .HasColumnName("sms_template_id");
            entity.Property(e => e.UserId)
                .HasComment("Stage Owner")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectTaskTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.ProjectTaskTypeMailTemplates)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_mail_template_id_fkey");

            entity.HasOne(d => d.RatingTemplate).WithMany(p => p.ProjectTaskTypeRatingTemplates)
                .HasForeignKey(d => d.RatingTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_rating_template_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.ProjectTaskTypes)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_sms_template_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ProjectTaskTypeUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectTaskTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_write_uid_fkey");

            entity.HasMany(d => d.Projects).WithMany(p => p.Types)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectTaskTypeRel",
                    r => r.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("project_task_type_rel_project_id_fkey"),
                    l => l.HasOne<ProjectTaskType>().WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("project_task_type_rel_type_id_fkey"),
                    j =>
                    {
                        j.HasKey("TypeId", "ProjectId").HasName("project_task_type_rel_pkey");
                        j.ToTable("project_task_type_rel", tb => tb.HasComment("RELATION BETWEEN project_task_type AND project_project"));
                        j.HasIndex(new[] { "ProjectId", "TypeId" }, "project_task_type_rel_project_id_type_id_idx");
                        j.IndexerProperty<int>("TypeId").HasColumnName("type_id");
                        j.IndexerProperty<int>("ProjectId").HasColumnName("project_id");
                    });
        });

        modelBuilder.Entity<ProjectTaskTypeDeleteWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_type_delete_wizard_pkey");

            entity.ToTable("project_task_type_delete_wizard", tb => tb.HasComment("Project Stage Delete Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectTaskTypeDeleteWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_delete_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectTaskTypeDeleteWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_delete_wizard_write_uid_fkey");

            entity.HasMany(d => d.ProjectProjects).WithMany(p => p.ProjectTaskTypeDeleteWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectProjectProjectTaskTypeDeleteWizardRel",
                    r => r.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectProjectId")
                        .HasConstraintName("project_project_project_task_type_delet_project_project_id_fkey"),
                    l => l.HasOne<ProjectTaskTypeDeleteWizard>().WithMany()
                        .HasForeignKey("ProjectTaskTypeDeleteWizardId")
                        .HasConstraintName("project_project_project_task__project_task_type_delete_wiz_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectTaskTypeDeleteWizardId", "ProjectProjectId").HasName("project_project_project_task_type_delete_wizard_rel_pkey");
                        j.ToTable("project_project_project_task_type_delete_wizard_rel", tb => tb.HasComment("RELATION BETWEEN project_task_type_delete_wizard AND project_project"));
                        j.HasIndex(new[] { "ProjectProjectId", "ProjectTaskTypeDeleteWizardId" }, "project_project_project_task__project_project_id_project_ta_idx");
                        j.IndexerProperty<int>("ProjectTaskTypeDeleteWizardId").HasColumnName("project_task_type_delete_wizard_id");
                        j.IndexerProperty<int>("ProjectProjectId").HasColumnName("project_project_id");
                    });

            entity.HasMany(d => d.ProjectTaskTypes).WithMany(p => p.ProjectTaskTypeDeleteWizards)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectTaskTypeProjectTaskTypeDeleteWizardRel",
                    r => r.HasOne<ProjectTaskType>().WithMany()
                        .HasForeignKey("ProjectTaskTypeId")
                        .HasConstraintName("project_task_type_project_task_type_d_project_task_type_id_fkey"),
                    l => l.HasOne<ProjectTaskTypeDeleteWizard>().WithMany()
                        .HasForeignKey("ProjectTaskTypeDeleteWizardId")
                        .HasConstraintName("project_task_type_project_tas_project_task_type_delete_wiz_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectTaskTypeDeleteWizardId", "ProjectTaskTypeId").HasName("project_task_type_project_task_type_delete_wizard_rel_pkey");
                        j.ToTable("project_task_type_project_task_type_delete_wizard_rel", tb => tb.HasComment("RELATION BETWEEN project_task_type_delete_wizard AND project_task_type"));
                        j.HasIndex(new[] { "ProjectTaskTypeId", "ProjectTaskTypeDeleteWizardId" }, "project_task_type_project_tas_project_task_type_id_project__idx");
                        j.IndexerProperty<int>("ProjectTaskTypeDeleteWizardId").HasColumnName("project_task_type_delete_wizard_id");
                        j.IndexerProperty<int>("ProjectTaskTypeId").HasColumnName("project_task_type_id");
                    });
        });

        modelBuilder.Entity<ProjectTaskUserRel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_user_rel_pkey");

            entity.ToTable("project_task_user_rel", tb => tb.HasComment("Personal Task Stage"));

            entity.HasIndex(e => new { e.TaskId, e.UserId }, "project_task_user_rel_project_personal_stage_unique").IsUnique();

            entity.HasIndex(e => e.TaskId, "project_task_user_rel_task_id_index");

            entity.HasIndex(e => e.UserId, "project_task_user_rel_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.TaskId)
                .HasComment("Task")
                .HasColumnName("task_id");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectTaskUserRelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_user_rel_create_uid_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProjectTaskUserRels)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_task_user_rel_stage_id_fkey");

            entity.HasOne(d => d.Task).WithMany(p => p.ProjectTaskUserRels)
                .HasForeignKey(d => d.TaskId)
                .HasConstraintName("project_task_user_rel_task_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ProjectTaskUserRelUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("project_task_user_rel_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectTaskUserRelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_user_rel_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_update_pkey");

            entity.ToTable("project_update", tb => tb.HasComment("Project Update"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnName("description");
            entity.Property(e => e.EmailCc)
                .HasComment("Email cc")
                .HasColumnType("character varying")
                .HasColumnName("email_cc");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Title")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Progress)
                .HasComment("Progress")
                .HasColumnName("progress");
            entity.Property(e => e.ProjectId)
                .HasComment("Project")
                .HasColumnName("project_id");
            entity.Property(e => e.Status)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserId)
                .HasComment("Author")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ProjectUpdateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_update_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectUpdates)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_update_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectUpdates)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_update_project_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ProjectUpdateUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_update_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ProjectUpdateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_update_write_uid_fkey");
        });

        modelBuilder.Entity<PurchaseBillUnion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("purchase_bill_union");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("purchase_order_id");
            entity.Property(e => e.Reference)
                .HasColumnType("character varying")
                .HasColumnName("reference");
            entity.Property(e => e.VendorBillId).HasColumnName("vendor_bill_id");
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("purchase_order_pkey");

            entity.ToTable("purchase_order", tb => tb.HasComment("Purchase Order"));

            entity.HasIndex(e => e.CompanyId, "purchase_order_company_id_index");

            entity.HasIndex(e => e.DateApprove, "purchase_order_date_approve_index");

            entity.HasIndex(e => e.DateOrder, "purchase_order_date_order_index");

            entity.HasIndex(e => e.DatePlanned, "purchase_order_date_planned_index");

            entity.HasIndex(e => e.Name, "purchase_order_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.Priority, "purchase_order_priority_index");

            entity.HasIndex(e => e.State, "purchase_order_state_index");

            entity.HasIndex(e => e.UserId, "purchase_order_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.AmountTax)
                .HasComment("Taxes")
                .HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal)
                .HasComment("Total")
                .HasColumnName("amount_total");
            entity.Property(e => e.AmountUntaxed)
                .HasComment("Untaxed Amount")
                .HasColumnName("amount_untaxed");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.CurrencyRate)
                .HasComment("Currency Rate")
                .HasColumnName("currency_rate");
            entity.Property(e => e.DateApprove)
                .HasComment("Confirmation Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_approve");
            entity.Property(e => e.DateCalendarStart)
                .HasComment("Date Calendar Start")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_calendar_start");
            entity.Property(e => e.DateOrder)
                .HasComment("Order Deadline")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_order");
            entity.Property(e => e.DatePlanned)
                .HasComment("Expected Arrival")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned");
            entity.Property(e => e.DestAddressId)
                .HasComment("Dropship Address")
                .HasColumnName("dest_address_id");
            entity.Property(e => e.EffectiveDate)
                .HasComment("Arrival")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("effective_date");
            entity.Property(e => e.FiscalPositionId)
                .HasComment("Fiscal Position")
                .HasColumnName("fiscal_position_id");
            entity.Property(e => e.GroupId)
                .HasComment("Procurement Group")
                .HasColumnName("group_id");
            entity.Property(e => e.IncotermId)
                .HasComment("Incoterm")
                .HasColumnName("incoterm_id");
            entity.Property(e => e.IncotermLocation)
                .HasComment("Incoterm Location")
                .HasColumnType("character varying")
                .HasColumnName("incoterm_location");
            entity.Property(e => e.InvoiceCount)
                .HasComment("Bill Count")
                .HasColumnName("invoice_count");
            entity.Property(e => e.InvoiceStatus)
                .HasComment("Billing Status")
                .HasColumnType("character varying")
                .HasColumnName("invoice_status");
            entity.Property(e => e.MailReceptionConfirmed)
                .HasComment("Reception Confirmed")
                .HasColumnName("mail_reception_confirmed");
            entity.Property(e => e.MailReminderConfirmed)
                .HasComment("Reminder Confirmed")
                .HasColumnName("mail_reminder_confirmed");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Order Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Notes)
                .HasComment("Terms and Conditions")
                .HasColumnName("notes");
            entity.Property(e => e.Origin)
                .HasComment("Source Document")
                .HasColumnType("character varying")
                .HasColumnName("origin");
            entity.Property(e => e.PartnerId)
                .HasComment("Vendor")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerRef)
                .HasComment("Vendor Reference")
                .HasColumnType("character varying")
                .HasColumnName("partner_ref");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Payment Terms")
                .HasColumnName("payment_term_id");
            entity.Property(e => e.PickingTypeId)
                .HasComment("Deliver To")
                .HasColumnName("picking_type_id");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.ReceiptStatus)
                .HasComment("Receipt Status")
                .HasColumnType("character varying")
                .HasColumnName("receipt_status");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserId)
                .HasComment("Buyer")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PurchaseOrderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_currency_id_fkey");

            entity.HasOne(d => d.DestAddress).WithMany(p => p.PurchaseOrderDestAddresses)
                .HasForeignKey(d => d.DestAddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_dest_address_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_fiscal_position_id_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_group_id_fkey");

            entity.HasOne(d => d.Incoterm).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.IncotermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_incoterm_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PurchaseOrderPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_partner_id_fkey");

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.PaymentTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_payment_term_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_picking_type_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.PurchaseOrderUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PurchaseOrderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_write_uid_fkey");

            entity.HasMany(d => d.AccountMoves).WithMany(p => p.PurchaseOrders)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMovePurchaseOrderRel",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("AccountMoveId")
                        .HasConstraintName("account_move_purchase_order_rel_account_move_id_fkey"),
                    l => l.HasOne<PurchaseOrder>().WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("account_move_purchase_order_rel_purchase_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("PurchaseOrderId", "AccountMoveId").HasName("account_move_purchase_order_rel_pkey");
                        j.ToTable("account_move_purchase_order_rel", tb => tb.HasComment("RELATION BETWEEN purchase_order AND account_move"));
                        j.HasIndex(new[] { "AccountMoveId", "PurchaseOrderId" }, "account_move_purchase_order_r_account_move_id_purchase_orde_idx");
                        j.IndexerProperty<int>("PurchaseOrderId").HasColumnName("purchase_order_id");
                        j.IndexerProperty<int>("AccountMoveId").HasColumnName("account_move_id");
                    });

            entity.HasMany(d => d.StockPickings).WithMany(p => p.PurchaseOrders)
                .UsingEntity<Dictionary<string, object>>(
                    "PurchaseOrderStockPickingRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("purchase_order_stock_picking_rel_stock_picking_id_fkey"),
                    l => l.HasOne<PurchaseOrder>().WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("purchase_order_stock_picking_rel_purchase_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("PurchaseOrderId", "StockPickingId").HasName("purchase_order_stock_picking_rel_pkey");
                        j.ToTable("purchase_order_stock_picking_rel", tb => tb.HasComment("RELATION BETWEEN purchase_order AND stock_picking"));
                        j.HasIndex(new[] { "StockPickingId", "PurchaseOrderId" }, "purchase_order_stock_picking__stock_picking_id_purchase_ord_idx");
                        j.IndexerProperty<int>("PurchaseOrderId").HasColumnName("purchase_order_id");
                        j.IndexerProperty<int>("StockPickingId").HasColumnName("stock_picking_id");
                    });
        });

        modelBuilder.Entity<PurchaseOrderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("purchase_order_line_pkey");

            entity.ToTable("purchase_order_line", tb => tb.HasComment("Purchase Order Line"));

            entity.HasIndex(e => e.AnalyticDistribution, "purchase_order_line_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.DatePlanned, "purchase_order_line_date_planned_index");

            entity.HasIndex(e => e.OrderId, "purchase_order_line_order_id_index");

            entity.HasIndex(e => e.OrderpointId, "purchase_order_line_orderpoint_id_index").HasFilter("(orderpoint_id IS NOT NULL)");

            entity.HasIndex(e => e.ProductId, "purchase_order_line_product_id_index").HasFilter("(product_id IS NOT NULL)");

            entity.HasIndex(e => e.SaleLineId, "purchase_order_line_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnalyticDistribution)
                .HasComment("Analytic")
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DatePlanned)
                .HasComment("Expected Arrival")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned");
            entity.Property(e => e.DisplayType)
                .HasComment("Display Type")
                .HasColumnType("character varying")
                .HasColumnName("display_type");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnName("name");
            entity.Property(e => e.OrderId)
                .HasComment("Order Reference")
                .HasColumnName("order_id");
            entity.Property(e => e.OrderpointId)
                .HasComment("Orderpoint")
                .HasColumnName("orderpoint_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.PriceSubtotal)
                .HasComment("Subtotal")
                .HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTax)
                .HasComment("Tax")
                .HasColumnName("price_tax");
            entity.Property(e => e.PriceTotal)
                .HasComment("Total")
                .HasColumnName("price_total");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.ProductDescriptionVariants)
                .HasComment("Custom Description")
                .HasColumnType("character varying")
                .HasColumnName("product_description_variants");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductPackagingId)
                .HasComment("Packaging")
                .HasColumnName("product_packaging_id");
            entity.Property(e => e.ProductPackagingQty)
                .HasComment("Packaging Quantity")
                .HasColumnName("product_packaging_qty");
            entity.Property(e => e.ProductQty)
                .HasComment("Quantity")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductUom)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty)
                .HasComment("Total Quantity")
                .HasColumnName("product_uom_qty");
            entity.Property(e => e.PropagateCancel)
                .HasComment("Propagate cancellation")
                .HasColumnName("propagate_cancel");
            entity.Property(e => e.QtyInvoiced)
                .HasComment("Billed Qty")
                .HasColumnName("qty_invoiced");
            entity.Property(e => e.QtyReceived)
                .HasComment("Received Qty")
                .HasColumnName("qty_received");
            entity.Property(e => e.QtyReceivedManual)
                .HasComment("Manual Received Qty")
                .HasColumnName("qty_received_manual");
            entity.Property(e => e.QtyReceivedMethod)
                .HasComment("Received Qty Method")
                .HasColumnType("character varying")
                .HasColumnName("qty_received_method");
            entity.Property(e => e.QtyToInvoice)
                .HasComment("To Invoice Quantity")
                .HasColumnName("qty_to_invoice");
            entity.Property(e => e.SaleLineId)
                .HasComment("Origin Sale Item")
                .HasColumnName("sale_line_id");
            entity.Property(e => e.SaleOrderId)
                .HasComment("Sale Order")
                .HasColumnName("sale_order_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.PurchaseOrderLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_currency_id_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("purchase_order_line_order_id_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_orderpoint_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_partner_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_product_id_fkey");

            entity.HasOne(d => d.ProductPackaging).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.ProductPackagingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_product_packaging_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_product_uom_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_sale_line_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_sale_order_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.PurchaseOrderLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_write_uid_fkey");

            entity.HasMany(d => d.AccountTaxes).WithMany(p => p.PurchaseOrderLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxPurchaseOrderLineRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_purchase_order_line_rel_account_tax_id_fkey"),
                    l => l.HasOne<PurchaseOrderLine>().WithMany()
                        .HasForeignKey("PurchaseOrderLineId")
                        .HasConstraintName("account_tax_purchase_order_line_rel_purchase_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("PurchaseOrderLineId", "AccountTaxId").HasName("account_tax_purchase_order_line_rel_pkey");
                        j.ToTable("account_tax_purchase_order_line_rel", tb => tb.HasComment("RELATION BETWEEN purchase_order_line AND account_tax"));
                        j.HasIndex(new[] { "AccountTaxId", "PurchaseOrderLineId" }, "account_tax_purchase_order_li_account_tax_id_purchase_order_idx");
                        j.IndexerProperty<int>("PurchaseOrderLineId").HasColumnName("purchase_order_line_id");
                        j.IndexerProperty<int>("AccountTaxId").HasColumnName("account_tax_id");
                    });
        });

        modelBuilder.Entity<RatingRating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("rating_rating_pkey");

            entity.ToTable("rating_rating", tb => tb.HasComment("Rating"));

            entity.HasIndex(e => e.MessageId, "rating_rating_message_id_index");

            entity.HasIndex(e => e.ParentResId, "rating_rating_parent_res_id_index");

            entity.HasIndex(e => e.ParentResModelId, "rating_rating_parent_res_model_id_index");

            entity.HasIndex(e => e.ParentResModel, "rating_rating_parent_res_model_index");

            entity.HasIndex(e => e.ResId, "rating_rating_res_id_index");

            entity.HasIndex(e => e.ResModelId, "rating_rating_res_model_id_index");

            entity.HasIndex(e => e.ResModel, "rating_rating_res_model_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Consumed)
                .HasComment("Filled Rating")
                .HasColumnName("consumed");
            entity.Property(e => e.CreateDate)
                .HasComment("Submitted on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Feedback)
                .HasComment("Comment")
                .HasColumnName("feedback");
            entity.Property(e => e.IsInternal)
                .HasComment("Visible Internally Only")
                .HasColumnName("is_internal");
            entity.Property(e => e.MessageId)
                .HasComment("Message")
                .HasColumnName("message_id");
            entity.Property(e => e.ParentResId)
                .HasComment("Parent Document")
                .HasColumnName("parent_res_id");
            entity.Property(e => e.ParentResModel)
                .HasComment("Parent Document Model")
                .HasColumnType("character varying")
                .HasColumnName("parent_res_model");
            entity.Property(e => e.ParentResModelId)
                .HasComment("Parent Related Document Model")
                .HasColumnName("parent_res_model_id");
            entity.Property(e => e.ParentResName)
                .HasComment("Parent Document Name")
                .HasColumnType("character varying")
                .HasColumnName("parent_res_name");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PublisherComment)
                .HasComment("Publisher comment")
                .HasColumnName("publisher_comment");
            entity.Property(e => e.PublisherDatetime)
                .HasComment("Commented on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("publisher_datetime");
            entity.Property(e => e.PublisherId)
                .HasComment("Commented by")
                .HasColumnName("publisher_id");
            entity.Property(e => e.RatedPartnerId)
                .HasComment("Rated Operator")
                .HasColumnName("rated_partner_id");
            entity.Property(e => e.Rating)
                .HasComment("Rating Value")
                .HasColumnName("rating");
            entity.Property(e => e.RatingText)
                .HasComment("Rating")
                .HasColumnType("character varying")
                .HasColumnName("rating_text");
            entity.Property(e => e.ResId)
                .HasComment("Document")
                .HasColumnName("res_id");
            entity.Property(e => e.ResModel)
                .HasComment("Document Model")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.ResModelId)
                .HasComment("Related Document Model")
                .HasColumnName("res_model_id");
            entity.Property(e => e.ResName)
                .HasComment("Resource name")
                .HasColumnType("character varying")
                .HasColumnName("res_name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RatingRatingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.RatingRatings)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("rating_rating_message_id_fkey");

            entity.HasOne(d => d.ParentResModelNavigation).WithMany(p => p.RatingRatingParentResModelNavigations)
                .HasForeignKey(d => d.ParentResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("rating_rating_parent_res_model_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.RatingRatingPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_partner_id_fkey");

            entity.HasOne(d => d.Publisher).WithMany(p => p.RatingRatingPublishers)
                .HasForeignKey(d => d.PublisherId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_publisher_id_fkey");

            entity.HasOne(d => d.RatedPartner).WithMany(p => p.RatingRatingRatedPartners)
                .HasForeignKey(d => d.RatedPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_rated_partner_id_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.RatingRatingResModelNavigations)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("rating_rating_res_model_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RatingRatingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_write_uid_fkey");
        });

        modelBuilder.Entity<RegistrationEditor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("registration_editor_pkey");

            entity.ToTable("registration_editor", tb => tb.HasComment("Edit Attendee Details on Sales Confirmation"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.SaleOrderId)
                .HasComment("Sales Order")
                .HasColumnName("sale_order_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RegistrationEditorCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_create_uid_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.RegistrationEditors)
                .HasForeignKey(d => d.SaleOrderId)
                .HasConstraintName("registration_editor_sale_order_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RegistrationEditorWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_write_uid_fkey");
        });

        modelBuilder.Entity<RegistrationEditorLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("registration_editor_line_pkey");

            entity.ToTable("registration_editor_line", tb => tb.HasComment("Edit Attendee Line on Sales Confirmation"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EditorId)
                .HasComment("Editor")
                .HasColumnName("editor_id");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.EventTicketId)
                .HasComment("Event Ticket")
                .HasColumnName("event_ticket_id");
            entity.Property(e => e.Mobile)
                .HasComment("Mobile")
                .HasColumnType("character varying")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.RegistrationId)
                .HasComment("Original Registration")
                .HasColumnName("registration_id");
            entity.Property(e => e.SaleOrderLineId)
                .HasComment("Sales Order Line")
                .HasColumnName("sale_order_line_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RegistrationEditorLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_line_create_uid_fkey");

            entity.HasOne(d => d.Editor).WithMany(p => p.RegistrationEditorLines)
                .HasForeignKey(d => d.EditorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_line_editor_id_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.RegistrationEditorLines)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("registration_editor_line_event_id_fkey");

            entity.HasOne(d => d.EventTicket).WithMany(p => p.RegistrationEditorLines)
                .HasForeignKey(d => d.EventTicketId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_line_event_ticket_id_fkey");

            entity.HasOne(d => d.Registration).WithMany(p => p.RegistrationEditorLines)
                .HasForeignKey(d => d.RegistrationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_line_registration_id_fkey");

            entity.HasOne(d => d.SaleOrderLine).WithMany(p => p.RegistrationEditorLines)
                .HasForeignKey(d => d.SaleOrderLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_line_sale_order_line_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RegistrationEditorLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("registration_editor_line_write_uid_fkey");
        });

        modelBuilder.Entity<RepairFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_fee_pkey");

            entity.ToTable("repair_fee", tb => tb.HasComment("Repair Fees"));

            entity.HasIndex(e => e.CompanyId, "repair_fee_company_id_index");

            entity.HasIndex(e => e.Name, "repair_fee_name_index");

            entity.HasIndex(e => e.RepairId, "repair_fee_repair_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InvoiceLineId)
                .HasComment("Invoice Line")
                .HasColumnName("invoice_line_id");
            entity.Property(e => e.Invoiced)
                .HasComment("Invoiced")
                .HasColumnName("invoiced");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnName("name");
            entity.Property(e => e.PriceSubtotal)
                .HasComment("Subtotal")
                .HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTotal)
                .HasComment("Total")
                .HasColumnName("price_total");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUom)
                .HasComment("Product Unit of Measure")
                .HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty)
                .HasComment("Quantity")
                .HasColumnName("product_uom_qty");
            entity.Property(e => e.RepairId)
                .HasComment("Repair Order Reference")
                .HasColumnName("repair_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RepairFeeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_create_uid_fkey");

            entity.HasOne(d => d.InvoiceLine).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.InvoiceLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_invoice_line_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_product_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_fee_product_uom_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.RepairId)
                .HasConstraintName("repair_fee_repair_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RepairFeeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_write_uid_fkey");

            entity.HasMany(d => d.Taxes).WithMany(p => p.RepairFeeLines)
                .UsingEntity<Dictionary<string, object>>(
                    "RepairFeeLineTax",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("repair_fee_line_tax_tax_id_fkey"),
                    l => l.HasOne<RepairFee>().WithMany()
                        .HasForeignKey("RepairFeeLineId")
                        .HasConstraintName("repair_fee_line_tax_repair_fee_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("RepairFeeLineId", "TaxId").HasName("repair_fee_line_tax_pkey");
                        j.ToTable("repair_fee_line_tax", tb => tb.HasComment("RELATION BETWEEN repair_fee AND account_tax"));
                        j.HasIndex(new[] { "TaxId", "RepairFeeLineId" }, "repair_fee_line_tax_tax_id_repair_fee_line_id_idx");
                        j.IndexerProperty<int>("RepairFeeLineId").HasColumnName("repair_fee_line_id");
                        j.IndexerProperty<int>("TaxId").HasColumnName("tax_id");
                    });
        });

        modelBuilder.Entity<RepairLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_line_pkey");

            entity.ToTable("repair_line", tb => tb.HasComment("Repair Line (parts)"));

            entity.HasIndex(e => e.CompanyId, "repair_line_company_id_index");

            entity.HasIndex(e => e.LocationDestId, "repair_line_location_dest_id_index");

            entity.HasIndex(e => e.LocationId, "repair_line_location_id_index");

            entity.HasIndex(e => e.RepairId, "repair_line_repair_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InvoiceLineId)
                .HasComment("Invoice Line")
                .HasColumnName("invoice_line_id");
            entity.Property(e => e.Invoiced)
                .HasComment("Invoiced")
                .HasColumnName("invoiced");
            entity.Property(e => e.LocationDestId)
                .HasComment("Dest. Location")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId)
                .HasComment("Source Location")
                .HasColumnName("location_id");
            entity.Property(e => e.LotId)
                .HasComment("Lot/Serial")
                .HasColumnName("lot_id");
            entity.Property(e => e.MoveId)
                .HasComment("Inventory Move")
                .HasColumnName("move_id");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnName("name");
            entity.Property(e => e.PriceSubtotal)
                .HasComment("Subtotal")
                .HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTotal)
                .HasComment("Total")
                .HasColumnName("price_total");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUom)
                .HasComment("Product Unit of Measure")
                .HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty)
                .HasComment("Quantity")
                .HasColumnName("product_uom_qty");
            entity.Property(e => e.RepairId)
                .HasComment("Repair Order Reference")
                .HasColumnName("repair_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RepairLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_create_uid_fkey");

            entity.HasOne(d => d.InvoiceLine).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.InvoiceLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_invoice_line_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.RepairLineLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.RepairLineLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_lot_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_move_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_product_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_product_uom_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.RepairId)
                .HasConstraintName("repair_line_repair_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RepairLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_write_uid_fkey");

            entity.HasMany(d => d.Taxes).WithMany(p => p.RepairOperationLines)
                .UsingEntity<Dictionary<string, object>>(
                    "RepairOperationLineTax",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("repair_operation_line_tax_tax_id_fkey"),
                    l => l.HasOne<RepairLine>().WithMany()
                        .HasForeignKey("RepairOperationLineId")
                        .HasConstraintName("repair_operation_line_tax_repair_operation_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("RepairOperationLineId", "TaxId").HasName("repair_operation_line_tax_pkey");
                        j.ToTable("repair_operation_line_tax", tb => tb.HasComment("RELATION BETWEEN repair_line AND account_tax"));
                        j.HasIndex(new[] { "TaxId", "RepairOperationLineId" }, "repair_operation_line_tax_tax_id_repair_operation_line_id_idx");
                        j.IndexerProperty<int>("RepairOperationLineId").HasColumnName("repair_operation_line_id");
                        j.IndexerProperty<int>("TaxId").HasColumnName("tax_id");
                    });
        });

        modelBuilder.Entity<RepairOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_order_pkey");

            entity.ToTable("repair_order", tb => tb.HasComment("Repair Order"));

            entity.HasIndex(e => e.CompanyId, "repair_order_company_id_index");

            entity.HasIndex(e => e.InvoiceMethod, "repair_order_invoice_method_index");

            entity.HasIndex(e => e.LocationId, "repair_order_location_id_index");

            entity.HasIndex(e => e.Name, "repair_order_name").IsUnique();

            entity.HasIndex(e => e.Name, "repair_order_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PartnerId, "repair_order_partner_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressId)
                .HasComment("Delivery Address")
                .HasColumnName("address_id");
            entity.Property(e => e.AmountTax)
                .HasComment("Taxes")
                .HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal)
                .HasComment("Total")
                .HasColumnName("amount_total");
            entity.Property(e => e.AmountUntaxed)
                .HasComment("Untaxed Amount")
                .HasColumnName("amount_untaxed");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Repair Description")
                .HasColumnType("character varying")
                .HasColumnName("description");
            entity.Property(e => e.GuaranteeLimit)
                .HasComment("Warranty Expiration")
                .HasColumnName("guarantee_limit");
            entity.Property(e => e.InternalNotes)
                .HasComment("Internal Notes")
                .HasColumnName("internal_notes");
            entity.Property(e => e.InvoiceId)
                .HasComment("Invoice")
                .HasColumnName("invoice_id");
            entity.Property(e => e.InvoiceMethod)
                .HasComment("Invoice Method")
                .HasColumnType("character varying")
                .HasColumnName("invoice_method");
            entity.Property(e => e.Invoiced)
                .HasComment("Invoiced")
                .HasColumnName("invoiced");
            entity.Property(e => e.LocationId)
                .HasComment("Location")
                .HasColumnName("location_id");
            entity.Property(e => e.LotId)
                .HasComment("Lot/Serial")
                .HasColumnName("lot_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId)
                .HasComment("Inventory Move")
                .HasColumnName("move_id");
            entity.Property(e => e.Name)
                .HasComment("Repair Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerInvoiceId)
                .HasComment("Invoicing Address")
                .HasColumnName("partner_invoice_id");
            entity.Property(e => e.PickingId)
                .HasComment("Return")
                .HasColumnName("picking_id");
            entity.Property(e => e.PricelistId)
                .HasComment("Pricelist")
                .HasColumnName("pricelist_id");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.ProductId)
                .HasComment("Product to Repair")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Product Quantity")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductUom)
                .HasComment("Product Unit of Measure")
                .HasColumnName("product_uom");
            entity.Property(e => e.QuotationNotes)
                .HasComment("Quotation Notes")
                .HasColumnName("quotation_notes");
            entity.Property(e => e.Repaired)
                .HasComment("Repaired")
                .HasColumnName("repaired");
            entity.Property(e => e.SaleOrderId)
                .HasComment("Sale Order")
                .HasColumnName("sale_order_id");
            entity.Property(e => e.ScheduleDate)
                .HasComment("Scheduled Date")
                .HasColumnName("schedule_date");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Address).WithMany(p => p.RepairOrderAddresses)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_address_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RepairOrderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_create_uid_fkey");

            entity.HasOne(d => d.Invoice).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_invoice_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_lot_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_move_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.RepairOrderPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_partner_id_fkey");

            entity.HasOne(d => d.PartnerInvoice).WithMany(p => p.RepairOrderPartnerInvoices)
                .HasForeignKey(d => d.PartnerInvoiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_partner_invoice_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_picking_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_pricelist_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_product_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_product_uom_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_sale_order_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.RepairOrderUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RepairOrderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_write_uid_fkey");

            entity.HasMany(d => d.RepairTags).WithMany(p => p.RepairOrders)
                .UsingEntity<Dictionary<string, object>>(
                    "RepairOrderRepairTagsRel",
                    r => r.HasOne<RepairTag>().WithMany()
                        .HasForeignKey("RepairTagsId")
                        .HasConstraintName("repair_order_repair_tags_rel_repair_tags_id_fkey"),
                    l => l.HasOne<RepairOrder>().WithMany()
                        .HasForeignKey("RepairOrderId")
                        .HasConstraintName("repair_order_repair_tags_rel_repair_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("RepairOrderId", "RepairTagsId").HasName("repair_order_repair_tags_rel_pkey");
                        j.ToTable("repair_order_repair_tags_rel", tb => tb.HasComment("RELATION BETWEEN repair_order AND repair_tags"));
                        j.HasIndex(new[] { "RepairTagsId", "RepairOrderId" }, "repair_order_repair_tags_rel_repair_tags_id_repair_order_id_idx");
                        j.IndexerProperty<int>("RepairOrderId").HasColumnName("repair_order_id");
                        j.IndexerProperty<int>("RepairTagsId").HasColumnName("repair_tags_id");
                    });
        });

        modelBuilder.Entity<RepairOrderMakeInvoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_order_make_invoice_pkey");

            entity.ToTable("repair_order_make_invoice", tb => tb.HasComment("Create Mass Invoice (repair)"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Group)
                .HasComment("Group by partner invoice address")
                .HasColumnName("group");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RepairOrderMakeInvoiceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_make_invoice_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RepairOrderMakeInvoiceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_make_invoice_write_uid_fkey");
        });

        modelBuilder.Entity<RepairTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_tags_pkey");

            entity.ToTable("repair_tags", tb => tb.HasComment("Repair Tags"));

            entity.HasIndex(e => e.Name, "repair_tags_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.RepairTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_tags_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.RepairTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_tags_write_uid_fkey");
        });

        modelBuilder.Entity<ReportLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("report_layout_pkey");

            entity.ToTable("report_layout", tb => tb.HasComment("Report Layout"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Image)
                .HasComment("Preview image src")
                .HasColumnType("character varying")
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Pdf)
                .HasComment("Preview pdf src")
                .HasColumnType("character varying")
                .HasColumnName("pdf");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ViewId)
                .HasComment("Document Template")
                .HasColumnName("view_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ReportLayoutCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_layout_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.ReportLayouts)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("report_layout_view_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ReportLayoutWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_layout_write_uid_fkey");
        });

        modelBuilder.Entity<ReportPaperformat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("report_paperformat_pkey");

            entity.ToTable("report_paperformat", tb => tb.HasComment("Paper Format Config"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Default)
                .HasComment("Default paper format ?")
                .HasColumnName("default");
            entity.Property(e => e.DisableShrinking)
                .HasComment("Disable smart shrinking")
                .HasColumnName("disable_shrinking");
            entity.Property(e => e.Dpi)
                .HasComment("Output DPI")
                .HasColumnName("dpi");
            entity.Property(e => e.Format)
                .HasComment("Paper size")
                .HasColumnType("character varying")
                .HasColumnName("format");
            entity.Property(e => e.HeaderLine)
                .HasComment("Display a header line")
                .HasColumnName("header_line");
            entity.Property(e => e.HeaderSpacing)
                .HasComment("Header spacing")
                .HasColumnName("header_spacing");
            entity.Property(e => e.MarginBottom)
                .HasComment("Bottom Margin (mm)")
                .HasColumnName("margin_bottom");
            entity.Property(e => e.MarginLeft)
                .HasComment("Left Margin (mm)")
                .HasColumnName("margin_left");
            entity.Property(e => e.MarginRight)
                .HasComment("Right Margin (mm)")
                .HasColumnName("margin_right");
            entity.Property(e => e.MarginTop)
                .HasComment("Top Margin (mm)")
                .HasColumnName("margin_top");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Orientation)
                .HasComment("Orientation")
                .HasColumnType("character varying")
                .HasColumnName("orientation");
            entity.Property(e => e.PageHeight)
                .HasComment("Page height (mm)")
                .HasColumnName("page_height");
            entity.Property(e => e.PageWidth)
                .HasComment("Page width (mm)")
                .HasColumnName("page_width");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ReportPaperformatCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_paperformat_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ReportPaperformatWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_paperformat_write_uid_fkey");
        });

        modelBuilder.Entity<ReportPosOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("report_pos_order");

            entity.Property(e => e.AveragePrice).HasColumnName("average_price");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.ConfigId).HasColumnName("config_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DelayValidation).HasColumnName("delay_validation");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Invoiced).HasColumnName("invoiced");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.Margin).HasColumnName("margin");
            entity.Property(e => e.NbrLines).HasColumnName("nbr_lines");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PosCategId).HasColumnName("pos_categ_id");
            entity.Property(e => e.PriceSubTotal).HasColumnName("price_sub_total");
            entity.Property(e => e.PriceTotal).HasColumnName("price_total");
            entity.Property(e => e.PricelistId).HasColumnName("pricelist_id");
            entity.Property(e => e.ProductCategId).HasColumnName("product_categ_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TotalDiscount).HasColumnName("total_discount");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ReportProjectTaskUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("report_project_task_user");

            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AncestorId).HasColumnName("ancestor_id");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DateAssign)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_assign");
            entity.Property(e => e.DateDeadline).HasColumnName("date_deadline");
            entity.Property(e => e.DateEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateLastStageUpdate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_stage_update");
            entity.Property(e => e.DelayEndingsDays).HasColumnName("delay_endings_days");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsClosed).HasColumnName("is_closed");
            entity.Property(e => e.MilestoneDeadline).HasColumnName("milestone_deadline");
            entity.Property(e => e.MilestoneId).HasColumnName("milestone_id");
            entity.Property(e => e.MilestoneReached).HasColumnName("milestone_reached");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Nbr).HasColumnName("nbr");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Priority)
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.RatingAvg).HasColumnName("rating_avg");
            entity.Property(e => e.RatingLastValue).HasColumnName("rating_last_value");
            entity.Property(e => e.SaleLineId).HasColumnName("sale_line_id");
            entity.Property(e => e.SaleOrderId).HasColumnName("sale_order_id");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.WorkingDaysClose).HasColumnName("working_days_close");
            entity.Property(e => e.WorkingDaysOpen).HasColumnName("working_days_open");
            entity.Property(e => e.WorkingHoursClose).HasColumnName("working_hours_close");
            entity.Property(e => e.WorkingHoursOpen).HasColumnName("working_hours_open");
        });

        modelBuilder.Entity<ReportStockQuantity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("report_stock_quantity");

            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
        });

        modelBuilder.Entity<ResBank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_bank_pkey");

            entity.ToTable("res_bank", tb => tb.HasComment("Bank"));

            entity.HasIndex(e => e.Bic, "res_bank_bic_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Bic)
                .HasComment("Bank Identifier Code")
                .HasColumnType("character varying")
                .HasColumnName("bic");
            entity.Property(e => e.City)
                .HasComment("City")
                .HasColumnType("character varying")
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasComment("Country")
                .HasColumnName("country");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.State)
                .HasComment("Fed. State")
                .HasColumnName("state");
            entity.Property(e => e.Street)
                .HasComment("Street")
                .HasColumnType("character varying")
                .HasColumnName("street");
            entity.Property(e => e.Street2)
                .HasComment("Street2")
                .HasColumnType("character varying")
                .HasColumnName("street2");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.Zip)
                .HasComment("Zip")
                .HasColumnType("character varying")
                .HasColumnName("zip");

            entity.HasOne(d => d.CountryNavigation).WithMany(p => p.ResBanks)
                .HasForeignKey(d => d.Country)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_country_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResBankCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_create_uid_fkey");

            entity.HasOne(d => d.StateNavigation).WithMany(p => p.ResBanks)
                .HasForeignKey(d => d.State)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_state_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResBankWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_write_uid_fkey");
        });

        modelBuilder.Entity<ResCompany>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_company_pkey");

            entity.ToTable("res_company");

            entity.HasIndex(e => e.Name, "res_company_name_uniq").IsUnique();

            entity.HasIndex(e => e.ParentId, "res_company_parent_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountCashBasisBaseAccountId)
                .HasComment("Base Tax Received Account")
                .HasColumnName("account_cash_basis_base_account_id");
            entity.Property(e => e.AccountDashboardOnboardingState)
                .HasComment("State of the account dashboard onboarding panel")
                .HasColumnType("character varying")
                .HasColumnName("account_dashboard_onboarding_state");
            entity.Property(e => e.AccountDefaultPosReceivableAccountId)
                .HasComment("Default PoS Receivable Account")
                .HasColumnName("account_default_pos_receivable_account_id");
            entity.Property(e => e.AccountFiscalCountryId)
                .HasComment("Fiscal Country")
                .HasColumnName("account_fiscal_country_id");
            entity.Property(e => e.AccountInvoiceOnboardingState)
                .HasComment("State of the account invoice onboarding panel")
                .HasColumnType("character varying")
                .HasColumnName("account_invoice_onboarding_state");
            entity.Property(e => e.AccountJournalEarlyPayDiscountGainAccountId)
                .HasComment("Cash Discount Write-Off Gain Account")
                .HasColumnName("account_journal_early_pay_discount_gain_account_id");
            entity.Property(e => e.AccountJournalEarlyPayDiscountLossAccountId)
                .HasComment("Cash Discount Write-Off Loss Account")
                .HasColumnName("account_journal_early_pay_discount_loss_account_id");
            entity.Property(e => e.AccountJournalPaymentCreditAccountId)
                .HasComment("Journal Outstanding Payments Account")
                .HasColumnName("account_journal_payment_credit_account_id");
            entity.Property(e => e.AccountJournalPaymentDebitAccountId)
                .HasComment("Journal Outstanding Receipts Account")
                .HasColumnName("account_journal_payment_debit_account_id");
            entity.Property(e => e.AccountJournalSuspenseAccountId)
                .HasComment("Journal Suspense Account")
                .HasColumnName("account_journal_suspense_account_id");
            entity.Property(e => e.AccountOnboardingCreateInvoiceStateFlag)
                .HasComment("Account Onboarding Create Invoice State Flag")
                .HasColumnName("account_onboarding_create_invoice_state_flag");
            entity.Property(e => e.AccountOnboardingInvoiceLayoutState)
                .HasComment("State of the onboarding invoice layout step")
                .HasColumnType("character varying")
                .HasColumnName("account_onboarding_invoice_layout_state");
            entity.Property(e => e.AccountOnboardingSaleTaxState)
                .HasComment("State of the onboarding sale tax step")
                .HasColumnType("character varying")
                .HasColumnName("account_onboarding_sale_tax_state");
            entity.Property(e => e.AccountOpeningDate)
                .HasComment("Opening Entry")
                .HasColumnName("account_opening_date");
            entity.Property(e => e.AccountOpeningMoveId)
                .HasComment("Opening Journal Entry")
                .HasColumnName("account_opening_move_id");
            entity.Property(e => e.AccountPurchaseTaxId)
                .HasComment("Default Purchase Tax")
                .HasColumnName("account_purchase_tax_id");
            entity.Property(e => e.AccountSaleTaxId)
                .HasComment("Default Sale Tax")
                .HasColumnName("account_sale_tax_id");
            entity.Property(e => e.AccountSetupBankDataState)
                .HasComment("State of the onboarding bank data step")
                .HasColumnType("character varying")
                .HasColumnName("account_setup_bank_data_state");
            entity.Property(e => e.AccountSetupBillState)
                .HasComment("State of the onboarding bill step")
                .HasColumnType("character varying")
                .HasColumnName("account_setup_bill_state");
            entity.Property(e => e.AccountSetupCoaState)
                .HasComment("State of the onboarding charts of account step")
                .HasColumnType("character varying")
                .HasColumnName("account_setup_coa_state");
            entity.Property(e => e.AccountSetupFyDataState)
                .HasComment("State of the onboarding fiscal year step")
                .HasColumnType("character varying")
                .HasColumnName("account_setup_fy_data_state");
            entity.Property(e => e.AccountSetupTaxesState)
                .HasComment("State of the onboarding Taxes step")
                .HasColumnType("character varying")
                .HasColumnName("account_setup_taxes_state");
            entity.Property(e => e.AccountStorno)
                .HasComment("Storno accounting")
                .HasColumnName("account_storno");
            entity.Property(e => e.AccountUseCreditLimit)
                .HasComment("Sales Credit Limit")
                .HasColumnName("account_use_credit_limit");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AngloSaxonAccounting)
                .HasComment("Use anglo-saxon accounting")
                .HasColumnName("anglo_saxon_accounting");
            entity.Property(e => e.AnnualInventoryDay)
                .HasComment("Day of the month")
                .HasColumnName("annual_inventory_day");
            entity.Property(e => e.AnnualInventoryMonth)
                .HasComment("Annual Inventory Month")
                .HasColumnType("character varying")
                .HasColumnName("annual_inventory_month");
            entity.Property(e => e.AttendanceBarcodeSource)
                .HasComment("Barcode Source")
                .HasColumnType("character varying")
                .HasColumnName("attendance_barcode_source");
            entity.Property(e => e.AttendanceKioskDelay)
                .HasComment("Attendance Kiosk Delay")
                .HasColumnName("attendance_kiosk_delay");
            entity.Property(e => e.AttendanceKioskMode)
                .HasComment("Attendance Mode")
                .HasColumnType("character varying")
                .HasColumnName("attendance_kiosk_mode");
            entity.Property(e => e.AutomaticEntryDefaultJournalId)
                .HasComment("Automatic Entry Default Journal")
                .HasColumnName("automatic_entry_default_journal_id");
            entity.Property(e => e.BankAccountCodePrefix)
                .HasComment("Prefix of the bank accounts")
                .HasColumnType("character varying")
                .HasColumnName("bank_account_code_prefix");
            entity.Property(e => e.BaseOnboardingCompanyState)
                .HasComment("State of the onboarding company step")
                .HasColumnType("character varying")
                .HasColumnName("base_onboarding_company_state");
            entity.Property(e => e.CashAccountCodePrefix)
                .HasComment("Prefix of the cash accounts")
                .HasColumnType("character varying")
                .HasColumnName("cash_account_code_prefix");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Chart Template")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.CompanyDetails)
                .HasComment("Company Details")
                .HasColumnName("company_details");
            entity.Property(e => e.CompanyExpenseJournalId)
                .HasComment("Default Company Expense Journal")
                .HasColumnName("company_expense_journal_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyExchangeJournalId)
                .HasComment("Exchange Gain or Loss Journal")
                .HasColumnName("currency_exchange_journal_id");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DaysToPurchase)
                .HasComment("Days to Purchase")
                .HasColumnName("days_to_purchase");
            entity.Property(e => e.DefaultCashDifferenceExpenseAccountId)
                .HasComment("Cash Difference Expense Account")
                .HasColumnName("default_cash_difference_expense_account_id");
            entity.Property(e => e.DefaultCashDifferenceIncomeAccountId)
                .HasComment("Cash Difference Income Account")
                .HasColumnName("default_cash_difference_income_account_id");
            entity.Property(e => e.EarlyPayDiscountComputation)
                .HasComment("Cash Discount Tax Reduction")
                .HasColumnType("character varying")
                .HasColumnName("early_pay_discount_computation");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.ExpectsChartOfAccounts)
                .HasComment("Expects a Chart of Accounts")
                .HasColumnName("expects_chart_of_accounts");
            entity.Property(e => e.ExpenseAccrualAccountId)
                .HasComment("Expense Accrual Account")
                .HasColumnName("expense_accrual_account_id");
            entity.Property(e => e.ExpenseCurrencyExchangeAccountId)
                .HasComment("Loss Exchange Rate Account")
                .HasColumnName("expense_currency_exchange_account_id");
            entity.Property(e => e.ExpenseJournalId)
                .HasComment("Default Expense Journal")
                .HasColumnName("expense_journal_id");
            entity.Property(e => e.ExternalReportLayoutId)
                .HasComment("Document Template")
                .HasColumnName("external_report_layout_id");
            entity.Property(e => e.FiscalyearLastDay)
                .HasComment("Fiscalyear Last Day")
                .HasColumnName("fiscalyear_last_day");
            entity.Property(e => e.FiscalyearLastMonth)
                .HasComment("Fiscalyear Last Month")
                .HasColumnType("character varying")
                .HasColumnName("fiscalyear_last_month");
            entity.Property(e => e.FiscalyearLockDate)
                .HasComment("All Users Lock Date")
                .HasColumnName("fiscalyear_lock_date");
            entity.Property(e => e.Font)
                .HasComment("Font")
                .HasColumnType("character varying")
                .HasColumnName("font");
            entity.Property(e => e.HasReceivedWarningStockSms)
                .HasComment("Has Received Warning Stock Sms")
                .HasColumnName("has_received_warning_stock_sms");
            entity.Property(e => e.HrAttendanceOvertime)
                .HasComment("Count Extra Hours")
                .HasColumnName("hr_attendance_overtime");
            entity.Property(e => e.HrPresenceControlEmailAmount)
                .HasComment("# emails to send")
                .HasColumnName("hr_presence_control_email_amount");
            entity.Property(e => e.HrPresenceControlIpList)
                .HasComment("Valid IP addresses")
                .HasColumnType("character varying")
                .HasColumnName("hr_presence_control_ip_list");
            entity.Property(e => e.IapEnrichAutoDone)
                .HasComment("Enrich Done")
                .HasColumnName("iap_enrich_auto_done");
            entity.Property(e => e.IncomeCurrencyExchangeAccountId)
                .HasComment("Gain Exchange Rate Account")
                .HasColumnName("income_currency_exchange_account_id");
            entity.Property(e => e.IncotermId)
                .HasComment("Default incoterm")
                .HasColumnName("incoterm_id");
            entity.Property(e => e.InternalTransitLocationId)
                .HasComment("Internal Transit Location")
                .HasColumnName("internal_transit_location_id");
            entity.Property(e => e.InvoiceIsEmail)
                .HasComment("Email by default")
                .HasColumnName("invoice_is_email");
            entity.Property(e => e.InvoiceIsPrint)
                .HasComment("Print by default")
                .HasColumnName("invoice_is_print");
            entity.Property(e => e.InvoiceIsSnailmail)
                .HasComment("Send by Post")
                .HasColumnName("invoice_is_snailmail");
            entity.Property(e => e.InvoiceTerms)
                .HasComment("Default Terms and Conditions")
                .HasColumnType("jsonb")
                .HasColumnName("invoice_terms");
            entity.Property(e => e.InvoiceTermsHtml)
                .HasComment("Default Terms and Conditions as a Web page")
                .HasColumnType("jsonb")
                .HasColumnName("invoice_terms_html");
            entity.Property(e => e.LayoutBackground)
                .HasComment("Layout Background")
                .HasColumnType("character varying")
                .HasColumnName("layout_background");
            entity.Property(e => e.LogoWeb)
                .HasComment("Logo Web")
                .HasColumnName("logo_web");
            entity.Property(e => e.LunchMinimumThreshold)
                .HasComment("Lunch Minimum Threshold")
                .HasColumnName("lunch_minimum_threshold");
            entity.Property(e => e.LunchNotifyMessage)
                .HasComment("Lunch Notify Message")
                .HasColumnType("jsonb")
                .HasColumnName("lunch_notify_message");
            entity.Property(e => e.ManufacturingLead)
                .HasComment("Manufacturing Lead Time")
                .HasColumnName("manufacturing_lead");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile)
                .HasComment("Mobile")
                .HasColumnType("character varying")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NomenclatureId)
                .HasComment("Nomenclature")
                .HasColumnName("nomenclature_id");
            entity.Property(e => e.OvertimeCompanyThreshold)
                .HasComment("Tolerance Time In Favor Of Company")
                .HasColumnName("overtime_company_threshold");
            entity.Property(e => e.OvertimeEmployeeThreshold)
                .HasComment("Tolerance Time In Favor Of Employee")
                .HasColumnName("overtime_employee_threshold");
            entity.Property(e => e.OvertimeStartDate)
                .HasComment("Extra Hours Starting Date")
                .HasColumnName("overtime_start_date");
            entity.Property(e => e.PaperformatId)
                .HasComment("Paper format")
                .HasColumnName("paperformat_id");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Company")
                .HasColumnName("parent_id");
            entity.Property(e => e.PartnerGid)
                .HasComment("Company database ID")
                .HasColumnName("partner_gid");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentOnboardingPaymentMethod)
                .HasComment("Selected onboarding payment method")
                .HasColumnType("character varying")
                .HasColumnName("payment_onboarding_payment_method");
            entity.Property(e => e.PaymentProviderOnboardingState)
                .HasComment("State of the onboarding payment provider step")
                .HasColumnType("character varying")
                .HasColumnName("payment_provider_onboarding_state");
            entity.Property(e => e.PeriodLockDate)
                .HasComment("Journals Entries Lock Date")
                .HasColumnName("period_lock_date");
            entity.Property(e => e.Phone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.PoDoubleValidation)
                .HasComment("Levels of Approvals")
                .HasColumnType("character varying")
                .HasColumnName("po_double_validation");
            entity.Property(e => e.PoDoubleValidationAmount)
                .HasComment("Double validation amount")
                .HasColumnName("po_double_validation_amount");
            entity.Property(e => e.PoLead)
                .HasComment("Purchase Lead Time")
                .HasColumnName("po_lead");
            entity.Property(e => e.PoLock)
                .HasComment("Purchase Order Modification")
                .HasColumnType("character varying")
                .HasColumnName("po_lock");
            entity.Property(e => e.PointOfSaleUpdateStockQuantities)
                .HasComment("Update quantities in stock")
                .HasColumnType("character varying")
                .HasColumnName("point_of_sale_update_stock_quantities");
            entity.Property(e => e.PointOfSaleUseTicketQrCode)
                .HasComment("Use QR code on ticket")
                .HasColumnName("point_of_sale_use_ticket_qr_code");
            entity.Property(e => e.PortalConfirmationPay)
                .HasComment("Online Payment")
                .HasColumnName("portal_confirmation_pay");
            entity.Property(e => e.PortalConfirmationSign)
                .HasComment("Online Signature")
                .HasColumnName("portal_confirmation_sign");
            entity.Property(e => e.PrimaryColor)
                .HasComment("Primary Color")
                .HasColumnType("character varying")
                .HasColumnName("primary_color");
            entity.Property(e => e.PropertyStockAccountInputCategId)
                .HasComment("Input Account for Stock Valuation")
                .HasColumnName("property_stock_account_input_categ_id");
            entity.Property(e => e.PropertyStockAccountOutputCategId)
                .HasComment("Output Account for Stock Valuation")
                .HasColumnName("property_stock_account_output_categ_id");
            entity.Property(e => e.PropertyStockValuationAccountId)
                .HasComment("Account Template for Stock Valuation")
                .HasColumnName("property_stock_valuation_account_id");
            entity.Property(e => e.QrCode)
                .HasComment("Display QR-code on invoices")
                .HasColumnName("qr_code");
            entity.Property(e => e.QuickEditMode)
                .HasComment("Quick encoding")
                .HasColumnType("character varying")
                .HasColumnName("quick_edit_mode");
            entity.Property(e => e.QuotationValidityDays)
                .HasComment("Default Quotation Validity (Days)")
                .HasColumnName("quotation_validity_days");
            entity.Property(e => e.ReportFooter)
                .HasComment("Report Footer")
                .HasColumnType("jsonb")
                .HasColumnName("report_footer");
            entity.Property(e => e.ReportHeader)
                .HasComment("Company Tagline")
                .HasColumnName("report_header");
            entity.Property(e => e.ResourceCalendarId)
                .HasComment("Default Working Hours")
                .HasColumnName("resource_calendar_id");
            entity.Property(e => e.RevenueAccrualAccountId)
                .HasComment("Revenue Accrual Account")
                .HasColumnName("revenue_accrual_account_id");
            entity.Property(e => e.SaleOnboardingOrderConfirmationState)
                .HasComment("State of the onboarding confirmation order step")
                .HasColumnType("character varying")
                .HasColumnName("sale_onboarding_order_confirmation_state");
            entity.Property(e => e.SaleOnboardingPaymentMethod)
                .HasComment("Sale onboarding selected payment method")
                .HasColumnType("character varying")
                .HasColumnName("sale_onboarding_payment_method");
            entity.Property(e => e.SaleOnboardingSampleQuotationState)
                .HasComment("State of the onboarding sample quotation step")
                .HasColumnType("character varying")
                .HasColumnName("sale_onboarding_sample_quotation_state");
            entity.Property(e => e.SaleOrderTemplateId)
                .HasComment("Default Sale Template")
                .HasColumnName("sale_order_template_id");
            entity.Property(e => e.SaleQuotationOnboardingState)
                .HasComment("State of the sale onboarding panel")
                .HasColumnType("character varying")
                .HasColumnName("sale_quotation_onboarding_state");
            entity.Property(e => e.SecondaryColor)
                .HasComment("Secondary Color")
                .HasColumnType("character varying")
                .HasColumnName("secondary_color");
            entity.Property(e => e.SecurityLead)
                .HasComment("Sales Safety Days")
                .HasColumnName("security_lead");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.SnailmailColor)
                .HasComment("Color")
                .HasColumnName("snailmail_color");
            entity.Property(e => e.SnailmailCover)
                .HasComment("Add a Cover Page")
                .HasColumnName("snailmail_cover");
            entity.Property(e => e.SnailmailDuplex)
                .HasComment("Both sides")
                .HasColumnName("snailmail_duplex");
            entity.Property(e => e.SocialFacebook)
                .HasComment("Facebook Account")
                .HasColumnType("character varying")
                .HasColumnName("social_facebook");
            entity.Property(e => e.SocialGithub)
                .HasComment("GitHub Account")
                .HasColumnType("character varying")
                .HasColumnName("social_github");
            entity.Property(e => e.SocialInstagram)
                .HasComment("Instagram Account")
                .HasColumnType("character varying")
                .HasColumnName("social_instagram");
            entity.Property(e => e.SocialLinkedin)
                .HasComment("LinkedIn Account")
                .HasColumnType("character varying")
                .HasColumnName("social_linkedin");
            entity.Property(e => e.SocialTwitter)
                .HasComment("Twitter Account")
                .HasColumnType("character varying")
                .HasColumnName("social_twitter");
            entity.Property(e => e.SocialYoutube)
                .HasComment("Youtube Account")
                .HasColumnType("character varying")
                .HasColumnName("social_youtube");
            entity.Property(e => e.StockMailConfirmationTemplateId)
                .HasComment("Email Template confirmation picking")
                .HasColumnName("stock_mail_confirmation_template_id");
            entity.Property(e => e.StockMoveEmailValidation)
                .HasComment("Email Confirmation picking")
                .HasColumnName("stock_move_email_validation");
            entity.Property(e => e.StockMoveSmsValidation)
                .HasComment("SMS Confirmation")
                .HasColumnName("stock_move_sms_validation");
            entity.Property(e => e.StockSmsConfirmationTemplateId)
                .HasComment("SMS Template")
                .HasColumnName("stock_sms_confirmation_template_id");
            entity.Property(e => e.TaxCalculationRoundingMethod)
                .HasComment("Tax Calculation Rounding Method")
                .HasColumnType("character varying")
                .HasColumnName("tax_calculation_rounding_method");
            entity.Property(e => e.TaxCashBasisJournalId)
                .HasComment("Cash Basis Journal")
                .HasColumnName("tax_cash_basis_journal_id");
            entity.Property(e => e.TaxExigibility)
                .HasComment("Use Cash Basis")
                .HasColumnName("tax_exigibility");
            entity.Property(e => e.TaxLockDate)
                .HasComment("Tax Return Lock Date")
                .HasColumnName("tax_lock_date");
            entity.Property(e => e.TermsType)
                .HasComment("Terms & Conditions format")
                .HasColumnType("character varying")
                .HasColumnName("terms_type");
            entity.Property(e => e.TransferAccountCodePrefix)
                .HasComment("Prefix of the transfer accounts")
                .HasColumnType("character varying")
                .HasColumnName("transfer_account_code_prefix");
            entity.Property(e => e.TransferAccountId)
                .HasComment("Inter-Banks Transfer Account")
                .HasColumnName("transfer_account_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteSaleOnboardingPaymentProviderState)
                .HasComment("State of the website sale onboarding payment provider step")
                .HasColumnType("character varying")
                .HasColumnName("website_sale_onboarding_payment_provider_state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountCashBasisBaseAccount).WithMany(p => p.ResCompanyAccountCashBasisBaseAccounts)
                .HasForeignKey(d => d.AccountCashBasisBaseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_cash_basis_base_account_id_fkey");

            entity.HasOne(d => d.AccountDefaultPosReceivableAccount).WithMany(p => p.ResCompanyAccountDefaultPosReceivableAccounts)
                .HasForeignKey(d => d.AccountDefaultPosReceivableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_default_pos_receivable_account_id_fkey");

            entity.HasOne(d => d.AccountFiscalCountry).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.AccountFiscalCountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_fiscal_country_id_fkey");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountGainAccount).WithMany(p => p.ResCompanyAccountJournalEarlyPayDiscountGainAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountGainAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_early_pay_discount_gain_accoun_fkey");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountLossAccount).WithMany(p => p.ResCompanyAccountJournalEarlyPayDiscountLossAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountLossAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_early_pay_discount_loss_accoun_fkey");

            entity.HasOne(d => d.AccountJournalPaymentCreditAccount).WithMany(p => p.ResCompanyAccountJournalPaymentCreditAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentCreditAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_payment_credit_account_id_fkey");

            entity.HasOne(d => d.AccountJournalPaymentDebitAccount).WithMany(p => p.ResCompanyAccountJournalPaymentDebitAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentDebitAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_payment_debit_account_id_fkey");

            entity.HasOne(d => d.AccountJournalSuspenseAccount).WithMany(p => p.ResCompanyAccountJournalSuspenseAccounts)
                .HasForeignKey(d => d.AccountJournalSuspenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_suspense_account_id_fkey");

            entity.HasOne(d => d.AccountOpeningMove).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.AccountOpeningMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_opening_move_id_fkey");

            entity.HasOne(d => d.AccountPurchaseTax).WithMany(p => p.ResCompanyAccountPurchaseTaxes)
                .HasForeignKey(d => d.AccountPurchaseTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_purchase_tax_id_fkey");

            entity.HasOne(d => d.AccountSaleTax).WithMany(p => p.ResCompanyAccountSaleTaxes)
                .HasForeignKey(d => d.AccountSaleTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_sale_tax_id_fkey");

            entity.HasOne(d => d.AutomaticEntryDefaultJournal).WithMany(p => p.ResCompanyAutomaticEntryDefaultJournals)
                .HasForeignKey(d => d.AutomaticEntryDefaultJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_automatic_entry_default_journal_id_fkey");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_chart_template_id_fkey");

            entity.HasOne(d => d.CompanyExpenseJournal).WithMany(p => p.ResCompanyCompanyExpenseJournals)
                .HasForeignKey(d => d.CompanyExpenseJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_company_expense_journal_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResCompanyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_create_uid_fkey");

            entity.HasOne(d => d.CurrencyExchangeJournal).WithMany(p => p.ResCompanyCurrencyExchangeJournals)
                .HasForeignKey(d => d.CurrencyExchangeJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_currency_exchange_journal_id_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_currency_id_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceExpenseAccount).WithMany(p => p.ResCompanyDefaultCashDifferenceExpenseAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceExpenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_default_cash_difference_expense_account_id_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceIncomeAccount).WithMany(p => p.ResCompanyDefaultCashDifferenceIncomeAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceIncomeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_default_cash_difference_income_account_id_fkey");

            entity.HasOne(d => d.ExpenseAccrualAccount).WithMany(p => p.ResCompanyExpenseAccrualAccounts)
                .HasForeignKey(d => d.ExpenseAccrualAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_expense_accrual_account_id_fkey");

            entity.HasOne(d => d.ExpenseCurrencyExchangeAccount).WithMany(p => p.ResCompanyExpenseCurrencyExchangeAccounts)
                .HasForeignKey(d => d.ExpenseCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_expense_currency_exchange_account_id_fkey");

            entity.HasOne(d => d.ExpenseJournal).WithMany(p => p.ResCompanyExpenseJournals)
                .HasForeignKey(d => d.ExpenseJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_expense_journal_id_fkey");

            entity.HasOne(d => d.ExternalReportLayout).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.ExternalReportLayoutId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_external_report_layout_id_fkey");

            entity.HasOne(d => d.IncomeCurrencyExchangeAccount).WithMany(p => p.ResCompanyIncomeCurrencyExchangeAccounts)
                .HasForeignKey(d => d.IncomeCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_income_currency_exchange_account_id_fkey");

            entity.HasOne(d => d.Incoterm).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.IncotermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_incoterm_id_fkey");

            entity.HasOne(d => d.InternalTransitLocation).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.InternalTransitLocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_internal_transit_location_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Nomenclature).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.NomenclatureId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_nomenclature_id_fkey");

            entity.HasOne(d => d.Paperformat).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.PaperformatId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_paperformat_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_parent_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_partner_id_fkey");

            entity.HasOne(d => d.PropertyStockAccountInputCateg).WithMany(p => p.ResCompanyPropertyStockAccountInputCategs)
                .HasForeignKey(d => d.PropertyStockAccountInputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_property_stock_account_input_categ_id_fkey");

            entity.HasOne(d => d.PropertyStockAccountOutputCateg).WithMany(p => p.ResCompanyPropertyStockAccountOutputCategs)
                .HasForeignKey(d => d.PropertyStockAccountOutputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_property_stock_account_output_categ_id_fkey");

            entity.HasOne(d => d.PropertyStockValuationAccount).WithMany(p => p.ResCompanyPropertyStockValuationAccounts)
                .HasForeignKey(d => d.PropertyStockValuationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_property_stock_valuation_account_id_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_resource_calendar_id_fkey");

            entity.HasOne(d => d.RevenueAccrualAccount).WithMany(p => p.ResCompanyRevenueAccrualAccounts)
                .HasForeignKey(d => d.RevenueAccrualAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_revenue_accrual_account_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_sale_order_template_id_fkey");

            entity.HasOne(d => d.StockMailConfirmationTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.StockMailConfirmationTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_stock_mail_confirmation_template_id_fkey");

            entity.HasOne(d => d.StockSmsConfirmationTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.StockSmsConfirmationTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_stock_sms_confirmation_template_id_fkey");

            entity.HasOne(d => d.TaxCashBasisJournal).WithMany(p => p.ResCompanyTaxCashBasisJournals)
                .HasForeignKey(d => d.TaxCashBasisJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_tax_cash_basis_journal_id_fkey");

            entity.HasOne(d => d.TransferAccount).WithMany(p => p.ResCompanyTransferAccounts)
                .HasForeignKey(d => d.TransferAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_transfer_account_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResCompanyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_write_uid_fkey");

            entity.HasMany(d => d.Users).WithMany(p => p.Cids)
                .UsingEntity<Dictionary<string, object>>(
                    "ResCompanyUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("res_company_users_rel_user_id_fkey"),
                    l => l.HasOne<ResCompany>().WithMany()
                        .HasForeignKey("Cid")
                        .HasConstraintName("res_company_users_rel_cid_fkey"),
                    j =>
                    {
                        j.HasKey("Cid", "UserId").HasName("res_company_users_rel_pkey");
                        j.ToTable("res_company_users_rel", tb => tb.HasComment("RELATION BETWEEN res_company AND res_users"));
                        j.HasIndex(new[] { "UserId", "Cid" }, "res_company_users_rel_user_id_cid_idx");
                        j.IndexerProperty<int>("Cid").HasColumnName("cid");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                    });
        });

        modelBuilder.Entity<ResConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_config_pkey");

            entity.ToTable("res_config", tb => tb.HasComment("Config"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResConfigCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResConfigWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_write_uid_fkey");
        });

        modelBuilder.Entity<ResConfigInstaller>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_config_installer_pkey");

            entity.ToTable("res_config_installer", tb => tb.HasComment("Config Installer"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResConfigInstallerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_installer_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResConfigInstallerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_installer_write_uid_fkey");
        });

        modelBuilder.Entity<ResConfigSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_config_settings_pkey");

            entity.ToTable("res_config_settings", tb => tb.HasComment("Config Settings"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AliasDomain)
                .HasComment("Alias Domain")
                .HasColumnType("character varying")
                .HasColumnName("alias_domain");
            entity.Property(e => e.AllowOutOfStockOrder)
                .HasComment("Continue selling when out-of-stock")
                .HasColumnName("allow_out_of_stock_order");
            entity.Property(e => e.AuthSignupResetPassword)
                .HasComment("Enable password reset from Login page")
                .HasColumnName("auth_signup_reset_password");
            entity.Property(e => e.AuthSignupTemplateUserId)
                .HasComment("Template user for new users created through signup")
                .HasColumnName("auth_signup_template_user_id");
            entity.Property(e => e.AuthSignupUninvited)
                .HasComment("Customer Account")
                .HasColumnType("character varying")
                .HasColumnName("auth_signup_uninvited");
            entity.Property(e => e.AutomaticInvoice)
                .HasComment("Automatic Invoice")
                .HasColumnName("automatic_invoice");
            entity.Property(e => e.AvailableThreshold)
                .HasComment("Show Threshold")
                .HasColumnName("available_threshold");
            entity.Property(e => e.ChartTemplateId)
                .HasComment("Template")
                .HasColumnName("chart_template_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CrmAutoAssignmentAction)
                .HasComment("Auto Assignment Action")
                .HasColumnType("character varying")
                .HasColumnName("crm_auto_assignment_action");
            entity.Property(e => e.CrmAutoAssignmentIntervalNumber)
                .HasComment("Repeat every")
                .HasColumnName("crm_auto_assignment_interval_number");
            entity.Property(e => e.CrmAutoAssignmentIntervalType)
                .HasComment("Auto Assignment Interval Unit")
                .HasColumnType("character varying")
                .HasColumnName("crm_auto_assignment_interval_type");
            entity.Property(e => e.CrmAutoAssignmentRunDatetime)
                .HasComment("Auto Assignment Next Execution Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("crm_auto_assignment_run_datetime");
            entity.Property(e => e.CrmUseAutoAssignment)
                .HasComment("Rule-Based Assignment")
                .HasColumnName("crm_use_auto_assignment");
            entity.Property(e => e.DefaultInvoicePolicy)
                .HasComment("Invoicing Policy")
                .HasColumnType("character varying")
                .HasColumnName("default_invoice_policy");
            entity.Property(e => e.DefaultPickingPolicy)
                .HasComment("Picking Policy")
                .HasColumnType("character varying")
                .HasColumnName("default_picking_policy");
            entity.Property(e => e.DefaultPurchaseMethod)
                .HasComment("Bill Control")
                .HasColumnType("character varying")
                .HasColumnName("default_purchase_method");
            entity.Property(e => e.DelayAlertContract)
                .HasComment("Delay alert contract outdated")
                .HasColumnName("delay_alert_contract");
            entity.Property(e => e.DepositDefaultProductId)
                .HasComment("Deposit Product")
                .HasColumnName("deposit_default_product_id");
            entity.Property(e => e.DigestEmails)
                .HasComment("Digest Emails")
                .HasColumnName("digest_emails");
            entity.Property(e => e.DigestId)
                .HasComment("Digest Email")
                .HasColumnName("digest_id");
            entity.Property(e => e.EnabledBuyNowButton)
                .HasComment("Buy Now")
                .HasColumnName("enabled_buy_now_button");
            entity.Property(e => e.EnabledExtraCheckoutStep)
                .HasComment("Extra Step During Checkout")
                .HasColumnName("enabled_extra_checkout_step");
            entity.Property(e => e.ExpenseAliasPrefix)
                .HasComment("Default Alias Name for Expenses")
                .HasColumnType("character varying")
                .HasColumnName("expense_alias_prefix");
            entity.Property(e => e.ExternalEmailServerDefault)
                .HasComment("Custom Email Servers")
                .HasColumnName("external_email_server_default");
            entity.Property(e => e.GoogleGmailClientIdentifier)
                .HasComment("Gmail Client Id")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_client_identifier");
            entity.Property(e => e.GoogleGmailClientSecret)
                .HasComment("Gmail Client Secret")
                .HasColumnType("character varying")
                .HasColumnName("google_gmail_client_secret");
            entity.Property(e => e.GroupAnalyticAccounting)
                .HasComment("Analytic Accounting")
                .HasColumnName("group_analytic_accounting");
            entity.Property(e => e.GroupApplicantCvDisplay)
                .HasComment("Group Applicant Cv Display")
                .HasColumnName("group_applicant_cv_display");
            entity.Property(e => e.GroupAttendanceUsePin)
                .HasComment("Employee PIN")
                .HasColumnName("group_attendance_use_pin");
            entity.Property(e => e.GroupAutoDoneSetting)
                .HasComment("Lock Confirmed Sales")
                .HasColumnName("group_auto_done_setting");
            entity.Property(e => e.GroupCashRounding)
                .HasComment("Cash Rounding")
                .HasColumnName("group_cash_rounding");
            entity.Property(e => e.GroupDeliveryInvoiceAddress)
                .HasComment("Shipping Address")
                .HasColumnName("group_delivery_invoice_address");
            entity.Property(e => e.GroupDiscountPerSoLine)
                .HasComment("Discounts")
                .HasColumnName("group_discount_per_so_line");
            entity.Property(e => e.GroupDisplayIncoterm)
                .HasComment("Incoterms")
                .HasColumnName("group_display_incoterm");
            entity.Property(e => e.GroupLotOnDeliverySlip)
                .HasComment("Display Lots & Serial Numbers on Delivery Slips")
                .HasColumnName("group_lot_on_delivery_slip");
            entity.Property(e => e.GroupLotOnInvoice)
                .HasComment("Display Lots & Serial Numbers on Invoices")
                .HasColumnName("group_lot_on_invoice");
            entity.Property(e => e.GroupMassMailingCampaign)
                .HasComment("Mailing Campaigns")
                .HasColumnName("group_mass_mailing_campaign");
            entity.Property(e => e.GroupMrpByproducts)
                .HasComment("By-Products")
                .HasColumnName("group_mrp_byproducts");
            entity.Property(e => e.GroupMrpReceptionReport)
                .HasComment("Allocation Report for Manufacturing Orders")
                .HasColumnName("group_mrp_reception_report");
            entity.Property(e => e.GroupMrpRoutings)
                .HasComment("MRP Work Orders")
                .HasColumnName("group_mrp_routings");
            entity.Property(e => e.GroupMrpWorkorderDependencies)
                .HasComment("Work Order Dependencies")
                .HasColumnName("group_mrp_workorder_dependencies");
            entity.Property(e => e.GroupMultiCurrency)
                .HasComment("Multi-Currencies")
                .HasColumnName("group_multi_currency");
            entity.Property(e => e.GroupMultiWebsite)
                .HasComment("Multi-website")
                .HasColumnName("group_multi_website");
            entity.Property(e => e.GroupProductPriceComparison)
                .HasComment("Comparison Price")
                .HasColumnName("group_product_price_comparison");
            entity.Property(e => e.GroupProductPricelist)
                .HasComment("Pricelists")
                .HasColumnName("group_product_pricelist");
            entity.Property(e => e.GroupProductVariant)
                .HasComment("Variants")
                .HasColumnName("group_product_variant");
            entity.Property(e => e.GroupProformaSales)
                .HasComment("Pro-Forma Invoice")
                .HasColumnName("group_proforma_sales");
            entity.Property(e => e.GroupProjectMilestone)
                .HasComment("Milestones")
                .HasColumnName("group_project_milestone");
            entity.Property(e => e.GroupProjectRating)
                .HasComment("Customer Ratings")
                .HasColumnName("group_project_rating");
            entity.Property(e => e.GroupProjectRecurringTasks)
                .HasComment("Recurring Tasks")
                .HasColumnName("group_project_recurring_tasks");
            entity.Property(e => e.GroupProjectStages)
                .HasComment("Project Stages")
                .HasColumnName("group_project_stages");
            entity.Property(e => e.GroupProjectTaskDependencies)
                .HasComment("Task Dependencies")
                .HasColumnName("group_project_task_dependencies");
            entity.Property(e => e.GroupSaleDeliveryAddress)
                .HasComment("Customer Addresses")
                .HasColumnName("group_sale_delivery_address");
            entity.Property(e => e.GroupSaleOrderTemplate)
                .HasComment("Quotation Templates")
                .HasColumnName("group_sale_order_template");
            entity.Property(e => e.GroupSalePricelist)
                .HasComment("Advanced Pricelists")
                .HasColumnName("group_sale_pricelist");
            entity.Property(e => e.GroupSendReminder)
                .HasComment("Receipt Reminder")
                .HasColumnName("group_send_reminder");
            entity.Property(e => e.GroupShowLineSubtotalsTaxExcluded)
                .HasComment("Show line subtotals without taxes (B2B)")
                .HasColumnName("group_show_line_subtotals_tax_excluded");
            entity.Property(e => e.GroupShowLineSubtotalsTaxIncluded)
                .HasComment("Show line subtotals with taxes (B2C)")
                .HasColumnName("group_show_line_subtotals_tax_included");
            entity.Property(e => e.GroupShowPurchaseReceipts)
                .HasComment("Purchase Receipt")
                .HasColumnName("group_show_purchase_receipts");
            entity.Property(e => e.GroupShowSaleReceipts)
                .HasComment("Sale Receipt")
                .HasColumnName("group_show_sale_receipts");
            entity.Property(e => e.GroupShowUomPrice)
                .HasComment("Base Unit Price")
                .HasColumnName("group_show_uom_price");
            entity.Property(e => e.GroupStockAdvLocation)
                .HasComment("Multi-Step Routes")
                .HasColumnName("group_stock_adv_location");
            entity.Property(e => e.GroupStockLotPrintGs1)
                .HasComment("Print GS1 Barcodes for Lots & Serial Numbers")
                .HasColumnName("group_stock_lot_print_gs1");
            entity.Property(e => e.GroupStockMultiLocations)
                .HasComment("Storage Locations")
                .HasColumnName("group_stock_multi_locations");
            entity.Property(e => e.GroupStockPackaging)
                .HasComment("Product Packagings")
                .HasColumnName("group_stock_packaging");
            entity.Property(e => e.GroupStockPickingWave)
                .HasComment("Wave Transfers")
                .HasColumnName("group_stock_picking_wave");
            entity.Property(e => e.GroupStockProductionLot)
                .HasComment("Lots & Serial Numbers")
                .HasColumnName("group_stock_production_lot");
            entity.Property(e => e.GroupStockReceptionReport)
                .HasComment("Reception Report")
                .HasColumnName("group_stock_reception_report");
            entity.Property(e => e.GroupStockSignDelivery)
                .HasComment("Signature")
                .HasColumnName("group_stock_sign_delivery");
            entity.Property(e => e.GroupStockStorageCategories)
                .HasComment("Storage Categories")
                .HasColumnName("group_stock_storage_categories");
            entity.Property(e => e.GroupStockTrackingLot)
                .HasComment("Packages")
                .HasColumnName("group_stock_tracking_lot");
            entity.Property(e => e.GroupStockTrackingOwner)
                .HasComment("Consignment")
                .HasColumnName("group_stock_tracking_owner");
            entity.Property(e => e.GroupSubtaskProject)
                .HasComment("Sub-tasks")
                .HasColumnName("group_subtask_project");
            entity.Property(e => e.GroupUnlockedByDefault)
                .HasComment("Unlock Manufacturing Orders")
                .HasColumnName("group_unlocked_by_default");
            entity.Property(e => e.GroupUom)
                .HasComment("Units of Measure")
                .HasColumnName("group_uom");
            entity.Property(e => e.GroupUseLead)
                .HasComment("Leads")
                .HasColumnName("group_use_lead");
            entity.Property(e => e.GroupUseRecurringRevenues)
                .HasComment("Recurring Revenues")
                .HasColumnName("group_use_recurring_revenues");
            entity.Property(e => e.GroupWarningAccount)
                .HasComment("Warnings in Invoices")
                .HasColumnName("group_warning_account");
            entity.Property(e => e.GroupWarningPurchase)
                .HasComment("Purchase Warnings")
                .HasColumnName("group_warning_purchase");
            entity.Property(e => e.GroupWarningSale)
                .HasComment("Sale Order Warnings")
                .HasColumnName("group_warning_sale");
            entity.Property(e => e.GroupWarningStock)
                .HasComment("Warnings for Stock")
                .HasColumnName("group_warning_stock");
            entity.Property(e => e.HrAttendanceOvertime)
                .HasComment("Count Extra Hours")
                .HasColumnName("hr_attendance_overtime");
            entity.Property(e => e.HrEmployeeSelfEdit)
                .HasComment("Employee Editing")
                .HasColumnName("hr_employee_self_edit");
            entity.Property(e => e.HrPresenceControlEmail)
                .HasComment("Based on number of emails sent")
                .HasColumnName("hr_presence_control_email");
            entity.Property(e => e.HrPresenceControlIp)
                .HasComment("Based on IP Address")
                .HasColumnName("hr_presence_control_ip");
            entity.Property(e => e.HrPresenceControlLogin)
                .HasComment("Based on user status in system")
                .HasColumnName("hr_presence_control_login");
            entity.Property(e => e.InvoiceMailTemplateId)
                .HasComment("Invoice Email Template")
                .HasColumnName("invoice_mail_template_id");
            entity.Property(e => e.IsInstalledSale)
                .HasComment("Is the Sale Module Installed")
                .HasColumnName("is_installed_sale");
            entity.Property(e => e.IsMembershipMulti)
                .HasComment("Multi Teams")
                .HasColumnName("is_membership_multi");
            entity.Property(e => e.LeadEnrichAuto)
                .HasComment("Enrich lead automatically")
                .HasColumnType("character varying")
                .HasColumnName("lead_enrich_auto");
            entity.Property(e => e.LeadMiningInPipeline)
                .HasComment("Create a lead mining request directly from the opportunity pipeline.")
                .HasColumnName("lead_mining_in_pipeline");
            entity.Property(e => e.LockConfirmedPo)
                .HasComment("Lock Confirmed Orders")
                .HasColumnName("lock_confirmed_po");
            entity.Property(e => e.MassMailingMailServerId)
                .HasComment("Mail Server")
                .HasColumnName("mass_mailing_mail_server_id");
            entity.Property(e => e.MassMailingOutgoingMailServer)
                .HasComment("Dedicated Server")
                .HasColumnName("mass_mailing_outgoing_mail_server");
            entity.Property(e => e.MassMailingReports)
                .HasComment("24H Stat Mailing Reports")
                .HasColumnName("mass_mailing_reports");
            entity.Property(e => e.ModuleAccount)
                .HasComment("Invoicing")
                .HasColumnName("module_account");
            entity.Property(e => e.ModuleAccount3wayMatch)
                .HasComment("3-way matching: purchases, receptions and bills")
                .HasColumnName("module_account_3way_match");
            entity.Property(e => e.ModuleAccountAccountant)
                .HasComment("Accounting")
                .HasColumnName("module_account_accountant");
            entity.Property(e => e.ModuleAccountBankStatementImportCamt)
                .HasComment("Import in CAMT.053 format")
                .HasColumnName("module_account_bank_statement_import_camt");
            entity.Property(e => e.ModuleAccountBankStatementImportCsv)
                .HasComment("Import in .csv format")
                .HasColumnName("module_account_bank_statement_import_csv");
            entity.Property(e => e.ModuleAccountBankStatementImportOfx)
                .HasComment("Import in .ofx format")
                .HasColumnName("module_account_bank_statement_import_ofx");
            entity.Property(e => e.ModuleAccountBankStatementImportQif)
                .HasComment("Import .qif files")
                .HasColumnName("module_account_bank_statement_import_qif");
            entity.Property(e => e.ModuleAccountBatchPayment)
                .HasComment("Use batch payments")
                .HasColumnName("module_account_batch_payment");
            entity.Property(e => e.ModuleAccountBudget)
                .HasComment("Budget Management")
                .HasColumnName("module_account_budget");
            entity.Property(e => e.ModuleAccountCheckPrinting)
                .HasComment("Allow check printing and deposits")
                .HasColumnName("module_account_check_printing");
            entity.Property(e => e.ModuleAccountInterCompanyRules)
                .HasComment("Manage Inter Company")
                .HasColumnName("module_account_inter_company_rules");
            entity.Property(e => e.ModuleAccountIntrastat)
                .HasComment("Intrastat")
                .HasColumnName("module_account_intrastat");
            entity.Property(e => e.ModuleAccountInvoiceExtract)
                .HasComment("Document Digitization")
                .HasColumnName("module_account_invoice_extract");
            entity.Property(e => e.ModuleAccountPayment)
                .HasComment("Invoice Online Payment")
                .HasColumnName("module_account_payment");
            entity.Property(e => e.ModuleAccountReports)
                .HasComment("Dynamic Reports")
                .HasColumnName("module_account_reports");
            entity.Property(e => e.ModuleAccountSepa)
                .HasComment("SEPA Credit Transfer (SCT)")
                .HasColumnName("module_account_sepa");
            entity.Property(e => e.ModuleAccountSepaDirectDebit)
                .HasComment("Use SEPA Direct Debit")
                .HasColumnName("module_account_sepa_direct_debit");
            entity.Property(e => e.ModuleAccountTaxcloud)
                .HasComment("Account TaxCloud")
                .HasColumnName("module_account_taxcloud");
            entity.Property(e => e.ModuleAuthLdap)
                .HasComment("LDAP Authentication")
                .HasColumnName("module_auth_ldap");
            entity.Property(e => e.ModuleAuthOauth)
                .HasComment("Use external authentication providers (OAuth)")
                .HasColumnName("module_auth_oauth");
            entity.Property(e => e.ModuleBaseGengo)
                .HasComment("Translate Your Website with Gengo")
                .HasColumnName("module_base_gengo");
            entity.Property(e => e.ModuleBaseGeolocalize)
                .HasComment("GeoLocalize")
                .HasColumnName("module_base_geolocalize");
            entity.Property(e => e.ModuleBaseImport)
                .HasComment("Allow users to import data from CSV/XLS/XLSX/ODS files")
                .HasColumnName("module_base_import");
            entity.Property(e => e.ModuleCrmIapEnrich)
                .HasComment("Enrich your leads automatically with company data based on their email address.")
                .HasColumnName("module_crm_iap_enrich");
            entity.Property(e => e.ModuleCrmIapMine)
                .HasComment("Generate new leads based on their country, industries, size, etc.")
                .HasColumnName("module_crm_iap_mine");
            entity.Property(e => e.ModuleCurrencyRateLive)
                .HasComment("Automatic Currency Rates")
                .HasColumnName("module_currency_rate_live");
            entity.Property(e => e.ModuleDelivery)
                .HasComment("Delivery Methods")
                .HasColumnName("module_delivery");
            entity.Property(e => e.ModuleDeliveryBpost)
                .HasComment("bpost Connector")
                .HasColumnName("module_delivery_bpost");
            entity.Property(e => e.ModuleDeliveryDhl)
                .HasComment("DHL Express Connector")
                .HasColumnName("module_delivery_dhl");
            entity.Property(e => e.ModuleDeliveryEasypost)
                .HasComment("Easypost Connector")
                .HasColumnName("module_delivery_easypost");
            entity.Property(e => e.ModuleDeliveryFedex)
                .HasComment("FedEx Connector")
                .HasColumnName("module_delivery_fedex");
            entity.Property(e => e.ModuleDeliveryMondialrelay)
                .HasComment("Mondial Relay Connector")
                .HasColumnName("module_delivery_mondialrelay");
            entity.Property(e => e.ModuleDeliverySendcloud)
                .HasComment("Sendcloud Connector")
                .HasColumnName("module_delivery_sendcloud");
            entity.Property(e => e.ModuleDeliveryUps)
                .HasComment("UPS Connector")
                .HasColumnName("module_delivery_ups");
            entity.Property(e => e.ModuleDeliveryUsps)
                .HasComment("USPS Connector")
                .HasColumnName("module_delivery_usps");
            entity.Property(e => e.ModuleEventBarcode)
                .HasComment("Barcode")
                .HasColumnName("module_event_barcode");
            entity.Property(e => e.ModuleEventBooth)
                .HasComment("Booth Management")
                .HasColumnName("module_event_booth");
            entity.Property(e => e.ModuleEventSale)
                .HasComment("Tickets")
                .HasColumnName("module_event_sale");
            entity.Property(e => e.ModuleGoogleCalendar)
                .HasComment("Allow the users to synchronize their calendar  with Google Calendar")
                .HasColumnName("module_google_calendar");
            entity.Property(e => e.ModuleGoogleGmail)
                .HasComment("Support Gmail Authentication")
                .HasColumnName("module_google_gmail");
            entity.Property(e => e.ModuleGoogleRecaptcha)
                .HasComment("reCAPTCHA")
                .HasColumnName("module_google_recaptcha");
            entity.Property(e => e.ModuleHrAttendance)
                .HasComment("Based on attendances")
                .HasColumnName("module_hr_attendance");
            entity.Property(e => e.ModuleHrExpenseExtract)
                .HasComment("Send bills to OCR to generate expenses")
                .HasColumnName("module_hr_expense_extract");
            entity.Property(e => e.ModuleHrHomeworking)
                .HasComment("Homeworking")
                .HasColumnName("module_hr_homeworking");
            entity.Property(e => e.ModuleHrPayrollExpense)
                .HasComment("Reimburse Expenses in Payslip")
                .HasColumnName("module_hr_payroll_expense");
            entity.Property(e => e.ModuleHrPresence)
                .HasComment("Advanced Presence Control")
                .HasColumnName("module_hr_presence");
            entity.Property(e => e.ModuleHrRecruitmentExtract)
                .HasComment("Send CV to OCR to fill applications")
                .HasColumnName("module_hr_recruitment_extract");
            entity.Property(e => e.ModuleHrRecruitmentSurvey)
                .HasComment("Interview Forms")
                .HasColumnName("module_hr_recruitment_survey");
            entity.Property(e => e.ModuleHrSkills)
                .HasComment("Skills Management")
                .HasColumnName("module_hr_skills");
            entity.Property(e => e.ModuleHrTimesheet)
                .HasComment("Task Logs")
                .HasColumnName("module_hr_timesheet");
            entity.Property(e => e.ModuleL10nEuOss)
                .HasComment("EU Intra-community Distance Selling")
                .HasColumnName("module_l10n_eu_oss");
            entity.Property(e => e.ModuleLoyalty)
                .HasComment("Promotions, Coupons, Gift Card & Loyalty Program")
                .HasColumnName("module_loyalty");
            entity.Property(e => e.ModuleMailPlugin)
                .HasComment("Allow integration with the mail plugins")
                .HasColumnName("module_mail_plugin");
            entity.Property(e => e.ModuleMarketingAutomation)
                .HasComment("Module Marketing Automation")
                .HasColumnName("module_marketing_automation");
            entity.Property(e => e.ModuleMassMailingSlides)
                .HasComment("Mailing")
                .HasColumnName("module_mass_mailing_slides");
            entity.Property(e => e.ModuleMicrosoftCalendar)
                .HasComment("Allow the users to synchronize their calendar with Outlook Calendar")
                .HasColumnName("module_microsoft_calendar");
            entity.Property(e => e.ModuleMicrosoftOutlook)
                .HasComment("Support Outlook Authentication")
                .HasColumnName("module_microsoft_outlook");
            entity.Property(e => e.ModuleMrpMps)
                .HasComment("Master Production Schedule")
                .HasColumnName("module_mrp_mps");
            entity.Property(e => e.ModuleMrpPlm)
                .HasComment("Product Lifecycle Management (PLM)")
                .HasColumnName("module_mrp_plm");
            entity.Property(e => e.ModuleMrpSubcontracting)
                .HasComment("Subcontracting")
                .HasColumnName("module_mrp_subcontracting");
            entity.Property(e => e.ModuleMrpWorkorder)
                .HasComment("Work Orders")
                .HasColumnName("module_mrp_workorder");
            entity.Property(e => e.ModulePartnerAutocomplete)
                .HasComment("Partner Autocomplete")
                .HasColumnName("module_partner_autocomplete");
            entity.Property(e => e.ModulePaymentPaypal)
                .HasComment("Paypal - Express Checkout")
                .HasColumnName("module_payment_paypal");
            entity.Property(e => e.ModulePosAdyen)
                .HasComment("Adyen Payment Terminal")
                .HasColumnName("module_pos_adyen");
            entity.Property(e => e.ModulePosMercury)
                .HasComment("Vantiv Payment Terminal")
                .HasColumnName("module_pos_mercury");
            entity.Property(e => e.ModulePosSix)
                .HasComment("Six Payment Terminal")
                .HasColumnName("module_pos_six");
            entity.Property(e => e.ModulePosStripe)
                .HasComment("Stripe Payment Terminal")
                .HasColumnName("module_pos_stripe");
            entity.Property(e => e.ModuleProductEmailTemplate)
                .HasComment("Specific Email")
                .HasColumnName("module_product_email_template");
            entity.Property(e => e.ModuleProductExpiry)
                .HasComment("Expiration Dates")
                .HasColumnName("module_product_expiry");
            entity.Property(e => e.ModuleProductImages)
                .HasComment("Get product pictures using barcode")
                .HasColumnName("module_product_images");
            entity.Property(e => e.ModuleProductMargin)
                .HasComment("Allow Product Margin")
                .HasColumnName("module_product_margin");
            entity.Property(e => e.ModuleProjectForecast)
                .HasComment("Planning")
                .HasColumnName("module_project_forecast");
            entity.Property(e => e.ModulePurchaseProductMatrix)
                .HasComment("Purchase Grid Entry")
                .HasColumnName("module_purchase_product_matrix");
            entity.Property(e => e.ModulePurchaseRequisition)
                .HasComment("Purchase Agreements")
                .HasColumnName("module_purchase_requisition");
            entity.Property(e => e.ModuleQualityControl)
                .HasComment("Quality")
                .HasColumnName("module_quality_control");
            entity.Property(e => e.ModuleQualityControlWorksheet)
                .HasComment("Quality Worksheet")
                .HasColumnName("module_quality_control_worksheet");
            entity.Property(e => e.ModuleSaleAmazon)
                .HasComment("Amazon Sync")
                .HasColumnName("module_sale_amazon");
            entity.Property(e => e.ModuleSaleLoyalty)
                .HasComment("Coupons & Loyalty")
                .HasColumnName("module_sale_loyalty");
            entity.Property(e => e.ModuleSaleMargin)
                .HasComment("Margins")
                .HasColumnName("module_sale_margin");
            entity.Property(e => e.ModuleSaleProductMatrix)
                .HasComment("Sales Grid Entry")
                .HasColumnName("module_sale_product_matrix");
            entity.Property(e => e.ModuleSaleQuotationBuilder)
                .HasComment("Quotation Builder")
                .HasColumnName("module_sale_quotation_builder");
            entity.Property(e => e.ModuleSnailmailAccount)
                .HasComment("Snailmail")
                .HasColumnName("module_snailmail_account");
            entity.Property(e => e.ModuleStockBarcode)
                .HasComment("Barcode Scanner")
                .HasColumnName("module_stock_barcode");
            entity.Property(e => e.ModuleStockDropshipping)
                .HasComment("Dropshipping")
                .HasColumnName("module_stock_dropshipping");
            entity.Property(e => e.ModuleStockLandedCosts)
                .HasComment("Landed Costs")
                .HasColumnName("module_stock_landed_costs");
            entity.Property(e => e.ModuleStockPickingBatch)
                .HasComment("Batch Transfers")
                .HasColumnName("module_stock_picking_batch");
            entity.Property(e => e.ModuleStockSms)
                .HasComment("SMS Confirmation")
                .HasColumnName("module_stock_sms");
            entity.Property(e => e.ModuleVoip)
                .HasComment("Asterisk (VoIP)")
                .HasColumnName("module_voip");
            entity.Property(e => e.ModuleWebUnsplash)
                .HasComment("Unsplash Image Library")
                .HasColumnName("module_web_unsplash");
            entity.Property(e => e.ModuleWebsiteCrmIapReveal)
                .HasComment("Create Leads/Opportunities from your website's traffic")
                .HasColumnName("module_website_crm_iap_reveal");
            entity.Property(e => e.ModuleWebsiteEventExhibitor)
                .HasComment("Advanced Sponsors")
                .HasColumnName("module_website_event_exhibitor");
            entity.Property(e => e.ModuleWebsiteEventMeet)
                .HasComment("Discussion Rooms")
                .HasColumnName("module_website_event_meet");
            entity.Property(e => e.ModuleWebsiteEventQuestions)
                .HasComment("Registration Survey")
                .HasColumnName("module_website_event_questions");
            entity.Property(e => e.ModuleWebsiteEventSale)
                .HasComment("Online Ticketing")
                .HasColumnName("module_website_event_sale");
            entity.Property(e => e.ModuleWebsiteEventTrack)
                .HasComment("Tracks and Agenda")
                .HasColumnName("module_website_event_track");
            entity.Property(e => e.ModuleWebsiteEventTrackLive)
                .HasComment("Live Mode")
                .HasColumnName("module_website_event_track_live");
            entity.Property(e => e.ModuleWebsiteEventTrackQuiz)
                .HasComment("Quiz on Tracks")
                .HasColumnName("module_website_event_track_quiz");
            entity.Property(e => e.ModuleWebsiteHrRecruitment)
                .HasComment("Online Posting")
                .HasColumnName("module_website_hr_recruitment");
            entity.Property(e => e.ModuleWebsiteLivechat)
                .HasComment("Module Website Livechat")
                .HasColumnName("module_website_livechat");
            entity.Property(e => e.ModuleWebsiteSaleAutocomplete)
                .HasComment("Address Autocomplete")
                .HasColumnName("module_website_sale_autocomplete");
            entity.Property(e => e.ModuleWebsiteSaleComparison)
                .HasComment("Product Comparison Tool")
                .HasColumnName("module_website_sale_comparison");
            entity.Property(e => e.ModuleWebsiteSaleDelivery)
                .HasComment("Module Website Sale Delivery")
                .HasColumnName("module_website_sale_delivery");
            entity.Property(e => e.ModuleWebsiteSaleDigital)
                .HasComment("Digital Content")
                .HasColumnName("module_website_sale_digital");
            entity.Property(e => e.ModuleWebsiteSalePicking)
                .HasComment("On Site Payments & Picking")
                .HasColumnName("module_website_sale_picking");
            entity.Property(e => e.ModuleWebsiteSaleSlides)
                .HasComment("Sell on eCommerce")
                .HasColumnName("module_website_sale_slides");
            entity.Property(e => e.ModuleWebsiteSaleWishlist)
                .HasComment("Wishlists")
                .HasColumnName("module_website_sale_wishlist");
            entity.Property(e => e.ModuleWebsiteSlidesForum)
                .HasComment("Forum")
                .HasColumnName("module_website_slides_forum");
            entity.Property(e => e.ModuleWebsiteSlidesSurvey)
                .HasComment("Certifications")
                .HasColumnName("module_website_slides_survey");
            entity.Property(e => e.OvertimeCompanyThreshold)
                .HasComment("Tolerance Time In Favor Of Company")
                .HasColumnName("overtime_company_threshold");
            entity.Property(e => e.OvertimeEmployeeThreshold)
                .HasComment("Tolerance Time In Favor Of Employee")
                .HasColumnName("overtime_employee_threshold");
            entity.Property(e => e.OvertimeStartDate)
                .HasComment("Extra Hours Starting Date")
                .HasColumnName("overtime_start_date");
            entity.Property(e => e.PayInvoicesOnline)
                .HasComment("Pay Invoices Online")
                .HasColumnName("pay_invoices_online");
            entity.Property(e => e.PoOrderApproval)
                .HasComment("Purchase Order Approval")
                .HasColumnName("po_order_approval");
            entity.Property(e => e.PosConfigId)
                .HasComment("Point of Sale")
                .HasColumnName("pos_config_id");
            entity.Property(e => e.PosDefaultFiscalPositionId)
                .HasComment("Default Fiscal Position")
                .HasColumnName("pos_default_fiscal_position_id");
            entity.Property(e => e.PosEpsonPrinterIp)
                .HasComment("Pos Epson Printer Ip")
                .HasColumnType("character varying")
                .HasColumnName("pos_epson_printer_ip");
            entity.Property(e => e.PosIfaceCashdrawer)
                .HasComment("Cashdrawer")
                .HasColumnName("pos_iface_cashdrawer");
            entity.Property(e => e.PosIfaceCustomerFacingDisplayViaProxy)
                .HasComment("Customer Facing Display")
                .HasColumnName("pos_iface_customer_facing_display_via_proxy");
            entity.Property(e => e.PosIfaceElectronicScale)
                .HasComment("Electronic Scale")
                .HasColumnName("pos_iface_electronic_scale");
            entity.Property(e => e.PosIfacePrintViaProxy)
                .HasComment("Print via Proxy")
                .HasColumnName("pos_iface_print_via_proxy");
            entity.Property(e => e.PosIfaceScanViaProxy)
                .HasComment("Scan via Proxy")
                .HasColumnName("pos_iface_scan_via_proxy");
            entity.Property(e => e.PosIfaceStartCategId)
                .HasComment("Initial Category")
                .HasColumnName("pos_iface_start_categ_id");
            entity.Property(e => e.PosPricelistId)
                .HasComment("Default Pricelist")
                .HasColumnName("pos_pricelist_id");
            entity.Property(e => e.PosProxyIp)
                .HasComment("IP Address")
                .HasColumnType("character varying")
                .HasColumnName("pos_proxy_ip");
            entity.Property(e => e.PosReceiptFooter)
                .HasComment("Receipt Footer")
                .HasColumnName("pos_receipt_footer");
            entity.Property(e => e.PosReceiptHeader)
                .HasComment("Receipt Header")
                .HasColumnName("pos_receipt_header");
            entity.Property(e => e.PosTipProductId)
                .HasComment("Tip Product")
                .HasColumnName("pos_tip_product_id");
            entity.Property(e => e.PredictiveLeadScoringFieldsStr)
                .HasComment("Lead Scoring Frequency Fields in String")
                .HasColumnType("character varying")
                .HasColumnName("predictive_lead_scoring_fields_str");
            entity.Property(e => e.PredictiveLeadScoringStartDateStr)
                .HasComment("Lead Scoring Starting Date in String")
                .HasColumnType("character varying")
                .HasColumnName("predictive_lead_scoring_start_date_str");
            entity.Property(e => e.ProductPricelistSetting)
                .HasComment("Pricelists Method")
                .HasColumnType("character varying")
                .HasColumnName("product_pricelist_setting");
            entity.Property(e => e.ProductVolumeVolumeInCubicFeet)
                .HasComment("Volume unit of measure")
                .HasColumnType("character varying")
                .HasColumnName("product_volume_volume_in_cubic_feet");
            entity.Property(e => e.ProductWeightInLbs)
                .HasComment("Weight unit of measure")
                .HasColumnType("character varying")
                .HasColumnName("product_weight_in_lbs");
            entity.Property(e => e.ProfilingEnabledUntil)
                .HasComment("Profiling enabled until")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("profiling_enabled_until");
            entity.Property(e => e.RecaptchaMinScore)
                .HasComment("Minimum score")
                .HasColumnName("recaptcha_min_score");
            entity.Property(e => e.RecaptchaPrivateKey)
                .HasComment("Secret Key")
                .HasColumnType("character varying")
                .HasColumnName("recaptcha_private_key");
            entity.Property(e => e.RecaptchaPublicKey)
                .HasComment("Site Key")
                .HasColumnType("character varying")
                .HasColumnName("recaptcha_public_key");
            entity.Property(e => e.RestrictTemplateRendering)
                .HasComment("Restrict Template Rendering")
                .HasColumnName("restrict_template_rendering");
            entity.Property(e => e.SaleDeliverySettings)
                .HasComment("Shipping Management")
                .HasColumnType("character varying")
                .HasColumnName("sale_delivery_settings");
            entity.Property(e => e.ShowAvailability)
                .HasComment("Show availability Qty")
                .HasColumnName("show_availability");
            entity.Property(e => e.ShowBlacklistButtons)
                .HasComment("Blacklist Option when Unsubscribing")
                .HasColumnName("show_blacklist_buttons");
            entity.Property(e => e.ShowEffect)
                .HasComment("Show Effect")
                .HasColumnName("show_effect");
            entity.Property(e => e.ShowLineSubtotalsTaxSelection)
                .HasComment("Line Subtotals Tax Display")
                .HasColumnType("character varying")
                .HasColumnName("show_line_subtotals_tax_selection");
            entity.Property(e => e.TwilioAccountSid)
                .HasComment("Twilio Account SID")
                .HasColumnType("character varying")
                .HasColumnName("twilio_account_sid");
            entity.Property(e => e.TwilioAccountToken)
                .HasComment("Twilio Account Auth Token")
                .HasColumnType("character varying")
                .HasColumnName("twilio_account_token");
            entity.Property(e => e.UnsplashAccessKey)
                .HasComment("Access Key")
                .HasColumnType("character varying")
                .HasColumnName("unsplash_access_key");
            entity.Property(e => e.UnsplashAppId)
                .HasComment("Application ID")
                .HasColumnType("character varying")
                .HasColumnName("unsplash_app_id");
            entity.Property(e => e.UseInvoiceTerms)
                .HasComment("Default Terms & Conditions")
                .HasColumnName("use_invoice_terms");
            entity.Property(e => e.UseMailgateway)
                .HasComment("Let your employees record expenses by email")
                .HasColumnName("use_mailgateway");
            entity.Property(e => e.UseManufacturingLead)
                .HasComment("Default Manufacturing Lead Time")
                .HasColumnName("use_manufacturing_lead");
            entity.Property(e => e.UsePoLead)
                .HasComment("Security Lead Time for Purchase")
                .HasColumnName("use_po_lead");
            entity.Property(e => e.UseQuotationValidityDays)
                .HasComment("Default Quotation Validity")
                .HasColumnName("use_quotation_validity_days");
            entity.Property(e => e.UseSecurityLead)
                .HasComment("Security Lead Time for Sales")
                .HasColumnName("use_security_lead");
            entity.Property(e => e.UseTwilioRtcServers)
                .HasComment("Use Twilio ICE servers")
                .HasColumnName("use_twilio_rtc_servers");
            entity.Property(e => e.UserDefaultRights)
                .HasComment("Default Access Rights")
                .HasColumnName("user_default_rights");
            entity.Property(e => e.WebsiteId)
                .HasComment("website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AuthSignupTemplateUser).WithMany(p => p.ResConfigSettingAuthSignupTemplateUsers)
                .HasForeignKey(d => d.AuthSignupTemplateUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_auth_signup_template_user_id_fkey");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_chart_template_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("res_config_settings_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResConfigSettingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_create_uid_fkey");

            entity.HasOne(d => d.DepositDefaultProduct).WithMany(p => p.ResConfigSettingDepositDefaultProducts)
                .HasForeignKey(d => d.DepositDefaultProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_deposit_default_product_id_fkey");

            entity.HasOne(d => d.Digest).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.DigestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_digest_id_fkey");

            entity.HasOne(d => d.InvoiceMailTemplate).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.InvoiceMailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_invoice_mail_template_id_fkey");

            entity.HasOne(d => d.MassMailingMailServer).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.MassMailingMailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_mass_mailing_mail_server_id_fkey");

            entity.HasOne(d => d.PosConfig).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.PosConfigId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_config_id_fkey");

            entity.HasOne(d => d.PosDefaultFiscalPosition).WithMany(p => p.ResConfigSettingsNavigation)
                .HasForeignKey(d => d.PosDefaultFiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_default_fiscal_position_id_fkey");

            entity.HasOne(d => d.PosIfaceStartCateg).WithMany(p => p.ResConfigSettingsNavigation)
                .HasForeignKey(d => d.PosIfaceStartCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_iface_start_categ_id_fkey");

            entity.HasOne(d => d.PosPricelist).WithMany(p => p.ResConfigSettingsNavigation)
                .HasForeignKey(d => d.PosPricelistId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_pricelist_id_fkey");

            entity.HasOne(d => d.PosTipProduct).WithMany(p => p.ResConfigSettingPosTipProducts)
                .HasForeignKey(d => d.PosTipProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_tip_product_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_config_settings_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResConfigSettingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_write_uid_fkey");

            entity.HasMany(d => d.AccountFiscalPositions).WithMany(p => p.ResConfigSettings)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionResConfigSettingsRel",
                    r => r.HasOne<AccountFiscalPosition>().WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .HasConstraintName("account_fiscal_position_res_con_account_fiscal_position_id_fkey"),
                    l => l.HasOne<ResConfigSetting>().WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .HasConstraintName("account_fiscal_position_res_config__res_config_settings_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResConfigSettingsId", "AccountFiscalPositionId").HasName("account_fiscal_position_res_config_settings_rel_pkey");
                        j.ToTable("account_fiscal_position_res_config_settings_rel", tb => tb.HasComment("RELATION BETWEEN res_config_settings AND account_fiscal_position"));
                        j.HasIndex(new[] { "AccountFiscalPositionId", "ResConfigSettingsId" }, "account_fiscal_position_res_c_account_fiscal_position_id_re_idx");
                        j.IndexerProperty<int>("ResConfigSettingsId").HasColumnName("res_config_settings_id");
                        j.IndexerProperty<int>("AccountFiscalPositionId").HasColumnName("account_fiscal_position_id");
                    });

            entity.HasMany(d => d.PosCategories).WithMany(p => p.ResConfigSettings)
                .UsingEntity<Dictionary<string, object>>(
                    "PosCategoryResConfigSettingsRel",
                    r => r.HasOne<PosCategory>().WithMany()
                        .HasForeignKey("PosCategoryId")
                        .HasConstraintName("pos_category_res_config_settings_rel_pos_category_id_fkey"),
                    l => l.HasOne<ResConfigSetting>().WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .HasConstraintName("pos_category_res_config_settings_re_res_config_settings_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResConfigSettingsId", "PosCategoryId").HasName("pos_category_res_config_settings_rel_pkey");
                        j.ToTable("pos_category_res_config_settings_rel", tb => tb.HasComment("RELATION BETWEEN res_config_settings AND pos_category"));
                        j.HasIndex(new[] { "PosCategoryId", "ResConfigSettingsId" }, "pos_category_res_config_setti_pos_category_id_res_config_se_idx");
                        j.IndexerProperty<int>("ResConfigSettingsId").HasColumnName("res_config_settings_id");
                        j.IndexerProperty<int>("PosCategoryId").HasColumnName("pos_category_id");
                    });

            entity.HasMany(d => d.ProductPricelists).WithMany(p => p.ResConfigSettings)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductPricelistResConfigSettingsRel",
                    r => r.HasOne<ProductPricelist>().WithMany()
                        .HasForeignKey("ProductPricelistId")
                        .HasConstraintName("product_pricelist_res_config_settings_product_pricelist_id_fkey"),
                    l => l.HasOne<ResConfigSetting>().WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .HasConstraintName("product_pricelist_res_config_settin_res_config_settings_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResConfigSettingsId", "ProductPricelistId").HasName("product_pricelist_res_config_settings_rel_pkey");
                        j.ToTable("product_pricelist_res_config_settings_rel", tb => tb.HasComment("RELATION BETWEEN res_config_settings AND product_pricelist"));
                        j.HasIndex(new[] { "ProductPricelistId", "ResConfigSettingsId" }, "product_pricelist_res_config__product_pricelist_id_res_conf_idx");
                        j.IndexerProperty<int>("ResConfigSettingsId").HasColumnName("res_config_settings_id");
                        j.IndexerProperty<int>("ProductPricelistId").HasColumnName("product_pricelist_id");
                    });
        });

        modelBuilder.Entity<ResCountry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_country_pkey");

            entity.ToTable("res_country", tb => tb.HasComment("Country"));

            entity.HasIndex(e => e.Code, "res_country_code_uniq").IsUnique();

            entity.HasIndex(e => e.Name, "res_country_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressFormat)
                .HasComment("Layout in Reports")
                .HasColumnName("address_format");
            entity.Property(e => e.AddressViewId)
                .HasComment("Input View")
                .HasColumnName("address_view_id");
            entity.Property(e => e.Code)
                .HasMaxLength(2)
                .HasComment("Country Code")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Name)
                .HasComment("Country Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NamePosition)
                .HasComment("Customer Name Position")
                .HasColumnType("character varying")
                .HasColumnName("name_position");
            entity.Property(e => e.PhoneCode)
                .HasComment("Country Calling Code")
                .HasColumnName("phone_code");
            entity.Property(e => e.StateRequired)
                .HasComment("State Required")
                .HasColumnName("state_required");
            entity.Property(e => e.VatLabel)
                .HasComment("Vat Label")
                .HasColumnType("jsonb")
                .HasColumnName("vat_label");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.ZipRequired)
                .HasComment("Zip Required")
                .HasColumnName("zip_required");

            entity.HasOne(d => d.AddressView).WithMany(p => p.ResCountries)
                .HasForeignKey(d => d.AddressViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_address_view_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResCountryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.ResCountries)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_currency_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResCountryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_write_uid_fkey");

            entity.HasMany(d => d.ResCountryGroups).WithMany(p => p.ResCountries)
                .UsingEntity<Dictionary<string, object>>(
                    "ResCountryResCountryGroupRel",
                    r => r.HasOne<ResCountryGroup>().WithMany()
                        .HasForeignKey("ResCountryGroupId")
                        .HasConstraintName("res_country_res_country_group_rel_res_country_group_id_fkey"),
                    l => l.HasOne<ResCountry>().WithMany()
                        .HasForeignKey("ResCountryId")
                        .HasConstraintName("res_country_res_country_group_rel_res_country_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResCountryId", "ResCountryGroupId").HasName("res_country_res_country_group_rel_pkey");
                        j.ToTable("res_country_res_country_group_rel", tb => tb.HasComment("RELATION BETWEEN res_country AND res_country_group"));
                        j.HasIndex(new[] { "ResCountryGroupId", "ResCountryId" }, "res_country_res_country_group_res_country_group_id_res_coun_idx");
                        j.IndexerProperty<int>("ResCountryId").HasColumnName("res_country_id");
                        j.IndexerProperty<int>("ResCountryGroupId").HasColumnName("res_country_group_id");
                    });
        });

        modelBuilder.Entity<ResCountryGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_country_group_pkey");

            entity.ToTable("res_country_group", tb => tb.HasComment("Country Group"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResCountryGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_group_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResCountryGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_group_write_uid_fkey");
        });

        modelBuilder.Entity<ResCountryState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_country_state_pkey");

            entity.ToTable("res_country_state", tb => tb.HasComment("Country state"));

            entity.HasIndex(e => new { e.CountryId, e.Code }, "res_country_state_name_code_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasComment("State Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("State Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Country).WithMany(p => p.ResCountryStates)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_country_state_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResCountryStateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_state_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResCountryStateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_state_write_uid_fkey");
        });

        modelBuilder.Entity<ResCurrency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_currency_pkey");

            entity.ToTable("res_currency");

            entity.HasIndex(e => e.Name, "res_currency_unique_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencySubunitLabel)
                .HasComment("Currency Subunit")
                .HasColumnType("character varying")
                .HasColumnName("currency_subunit_label");
            entity.Property(e => e.CurrencyUnitLabel)
                .HasComment("Currency Unit")
                .HasColumnType("character varying")
                .HasColumnName("currency_unit_label");
            entity.Property(e => e.DecimalPlaces)
                .HasComment("Decimal Places")
                .HasColumnName("decimal_places");
            entity.Property(e => e.FullName)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("full_name");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Position)
                .HasComment("Symbol Position")
                .HasColumnType("character varying")
                .HasColumnName("position");
            entity.Property(e => e.Rounding)
                .HasComment("Rounding Factor")
                .HasColumnName("rounding");
            entity.Property(e => e.Symbol)
                .HasColumnType("character varying")
                .HasColumnName("symbol");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResCurrencyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResCurrencyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_write_uid_fkey");
        });

        modelBuilder.Entity<ResCurrencyRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_currency_rate_pkey");

            entity.ToTable("res_currency_rate", tb => tb.HasComment("Currency Rate"));

            entity.HasIndex(e => e.Name, "res_currency_rate_name_index");

            entity.HasIndex(e => new { e.Name, e.CurrencyId, e.CompanyId }, "res_currency_rate_unique_name_per_day").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.Name)
                .HasComment("Date")
                .HasColumnName("name");
            entity.Property(e => e.Rate)
                .HasComment("Technical Rate")
                .HasColumnName("rate");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.ResCurrencyRates)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_rate_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResCurrencyRateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_rate_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.ResCurrencyRates)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("res_currency_rate_currency_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResCurrencyRateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_rate_write_uid_fkey");
        });

        modelBuilder.Entity<ResGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_groups_pkey");

            entity.ToTable("res_groups");

            entity.HasIndex(e => e.CategoryId, "res_groups_category_id_index");

            entity.HasIndex(e => new { e.CategoryId, e.Name }, "res_groups_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CategoryId)
                .HasComment("Application")
                .HasColumnName("category_id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.Comment)
                .HasComment("Comment")
                .HasColumnType("jsonb")
                .HasColumnName("comment");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Share)
                .HasComment("Share Group")
                .HasColumnName("share");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.ResGroups)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_groups_category_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_groups_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_groups_write_uid_fkey");

            entity.HasMany(d => d.Gids).WithMany(p => p.Hids)
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsImpliedRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_implied_rel_gid_fkey"),
                    l => l.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Hid")
                        .HasConstraintName("res_groups_implied_rel_hid_fkey"),
                    j =>
                    {
                        j.HasKey("Gid", "Hid").HasName("res_groups_implied_rel_pkey");
                        j.ToTable("res_groups_implied_rel", tb => tb.HasComment("RELATION BETWEEN res_groups AND res_groups"));
                        j.HasIndex(new[] { "Hid", "Gid" }, "res_groups_implied_rel_hid_gid_idx");
                        j.IndexerProperty<int>("Gid").HasColumnName("gid");
                        j.IndexerProperty<int>("Hid").HasColumnName("hid");
                    });

            entity.HasMany(d => d.Hids).WithMany(p => p.Gids)
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsImpliedRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Hid")
                        .HasConstraintName("res_groups_implied_rel_hid_fkey"),
                    l => l.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_implied_rel_gid_fkey"),
                    j =>
                    {
                        j.HasKey("Gid", "Hid").HasName("res_groups_implied_rel_pkey");
                        j.ToTable("res_groups_implied_rel", tb => tb.HasComment("RELATION BETWEEN res_groups AND res_groups"));
                        j.HasIndex(new[] { "Hid", "Gid" }, "res_groups_implied_rel_hid_gid_idx");
                        j.IndexerProperty<int>("Gid").HasColumnName("gid");
                        j.IndexerProperty<int>("Hid").HasColumnName("hid");
                    });

            entity.HasMany(d => d.UidsNavigation).WithMany(p => p.Gids)
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("Uid")
                        .HasConstraintName("res_groups_users_rel_uid_fkey"),
                    l => l.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_users_rel_gid_fkey"),
                    j =>
                    {
                        j.HasKey("Gid", "Uid").HasName("res_groups_users_rel_pkey");
                        j.ToTable("res_groups_users_rel", tb => tb.HasComment("RELATION BETWEEN res_groups AND res_users"));
                        j.HasIndex(new[] { "Uid", "Gid" }, "res_groups_users_rel_uid_gid_idx");
                        j.IndexerProperty<int>("Gid").HasColumnName("gid");
                        j.IndexerProperty<int>("Uid").HasColumnName("uid");
                    });
        });

        modelBuilder.Entity<ResLang>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_lang_pkey");

            entity.ToTable("res_lang", tb => tb.HasComment("Languages"));

            entity.HasIndex(e => e.Code, "res_lang_code_uniq").IsUnique();

            entity.HasIndex(e => e.Name, "res_lang_name_uniq").IsUnique();

            entity.HasIndex(e => e.UrlCode, "res_lang_url_code_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Code)
                .HasComment("Locale Code")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFormat)
                .HasComment("Date Format")
                .HasColumnType("character varying")
                .HasColumnName("date_format");
            entity.Property(e => e.DecimalPoint)
                .HasComment("Decimal Separator")
                .HasColumnType("character varying")
                .HasColumnName("decimal_point");
            entity.Property(e => e.Direction)
                .HasComment("Direction")
                .HasColumnType("character varying")
                .HasColumnName("direction");
            entity.Property(e => e.Grouping)
                .HasComment("Separator Format")
                .HasColumnType("character varying")
                .HasColumnName("grouping");
            entity.Property(e => e.IsoCode)
                .HasComment("ISO code")
                .HasColumnType("character varying")
                .HasColumnName("iso_code");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ThousandsSep)
                .HasComment("Thousands Separator")
                .HasColumnType("character varying")
                .HasColumnName("thousands_sep");
            entity.Property(e => e.TimeFormat)
                .HasComment("Time Format")
                .HasColumnType("character varying")
                .HasColumnName("time_format");
            entity.Property(e => e.UrlCode)
                .HasComment("URL Code")
                .HasColumnType("character varying")
                .HasColumnName("url_code");
            entity.Property(e => e.WeekStart)
                .HasComment("First Day of Week")
                .HasColumnType("character varying")
                .HasColumnName("week_start");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResLangCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_lang_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResLangWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_lang_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_pkey");

            entity.ToTable("res_partner");

            entity.HasIndex(e => e.CommercialPartnerId, "res_partner_commercial_partner_id_index");

            entity.HasIndex(e => e.CompanyId, "res_partner_company_id_index");

            entity.HasIndex(e => e.Date, "res_partner_date_index");

            entity.HasIndex(e => e.DisplayName, "res_partner_display_name_index");

            entity.HasIndex(e => e.IsPublished, "res_partner_is_published_index");

            entity.HasIndex(e => e.Name, "res_partner_name_index");

            entity.HasIndex(e => e.ParentId, "res_partner_parent_id_index");

            entity.HasIndex(e => e.Ref, "res_partner_ref_index");

            entity.HasIndex(e => e.Vat, "res_partner_vat_index");

            entity.HasIndex(e => e.WebsiteId, "res_partner_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AdditionalInfo)
                .HasComment("Additional info")
                .HasColumnType("character varying")
                .HasColumnName("additional_info");
            entity.Property(e => e.CalendarLastNotifAck)
                .HasComment("Last notification marked as read from base Calendar")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("calendar_last_notif_ack");
            entity.Property(e => e.City)
                .HasComment("City")
                .HasColumnType("character varying")
                .HasColumnName("city");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.Comment)
                .HasComment("Notes")
                .HasColumnName("comment");
            entity.Property(e => e.CommercialCompanyName)
                .HasComment("Company Name Entity")
                .HasColumnType("character varying")
                .HasColumnName("commercial_company_name");
            entity.Property(e => e.CommercialPartnerId)
                .HasComment("Commercial Entity")
                .HasColumnName("commercial_partner_id");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.CompanyName)
                .HasComment("Company Name")
                .HasColumnType("character varying")
                .HasColumnName("company_name");
            entity.Property(e => e.CompanyRegistry)
                .HasComment("Company ID")
                .HasColumnType("character varying")
                .HasColumnName("company_registry");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomerRank)
                .HasComment("Customer Rank")
                .HasColumnName("customer_rank");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.DebitLimit)
                .HasComment("Payable Limit")
                .HasColumnName("debit_limit");
            entity.Property(e => e.DisplayName)
                .HasComment("Display Name")
                .HasColumnType("character varying")
                .HasColumnName("display_name");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EmailNormalized)
                .HasComment("Normalized Email")
                .HasColumnType("character varying")
                .HasColumnName("email_normalized");
            entity.Property(e => e.Employee)
                .HasComment("Employee")
                .HasColumnName("employee");
            entity.Property(e => e.Function)
                .HasComment("Job Position")
                .HasColumnType("character varying")
                .HasColumnName("function");
            entity.Property(e => e.IndustryId)
                .HasComment("Industry")
                .HasColumnName("industry_id");
            entity.Property(e => e.InvoiceWarn)
                .HasComment("Invoice")
                .HasColumnType("character varying")
                .HasColumnName("invoice_warn");
            entity.Property(e => e.InvoiceWarnMsg)
                .HasComment("Message for Invoice")
                .HasColumnName("invoice_warn_msg");
            entity.Property(e => e.IsCompany)
                .HasComment("Is a Company")
                .HasColumnName("is_company");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.LastTimeEntriesChecked)
                .HasComment("Latest Invoices & Payments Matching Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_time_entries_checked");
            entity.Property(e => e.MessageBounce)
                .HasComment("Bounce")
                .HasColumnName("message_bounce");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile)
                .HasComment("Mobile")
                .HasColumnType("character varying")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Related Company")
                .HasColumnName("parent_id");
            entity.Property(e => e.PartnerGid)
                .HasComment("Company database ID")
                .HasColumnName("partner_gid");
            entity.Property(e => e.PartnerLatitude)
                .HasComment("Geo Latitude")
                .HasColumnName("partner_latitude");
            entity.Property(e => e.PartnerLongitude)
                .HasComment("Geo Longitude")
                .HasColumnName("partner_longitude");
            entity.Property(e => e.PartnerShare)
                .HasComment("Share Partner")
                .HasColumnName("partner_share");
            entity.Property(e => e.Phone)
                .HasComment("Phone")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.PhoneSanitized)
                .HasComment("Sanitized Number")
                .HasColumnType("character varying")
                .HasColumnName("phone_sanitized");
            entity.Property(e => e.PickingWarn)
                .HasComment("Stock Picking")
                .HasColumnType("character varying")
                .HasColumnName("picking_warn");
            entity.Property(e => e.PickingWarnMsg)
                .HasComment("Message for Stock Picking")
                .HasColumnName("picking_warn_msg");
            entity.Property(e => e.PlanToChangeBike)
                .HasComment("Plan To Change Bike")
                .HasColumnName("plan_to_change_bike");
            entity.Property(e => e.PlanToChangeCar)
                .HasComment("Plan To Change Car")
                .HasColumnName("plan_to_change_car");
            entity.Property(e => e.PurchaseWarn)
                .HasComment("Purchase Order")
                .HasColumnType("character varying")
                .HasColumnName("purchase_warn");
            entity.Property(e => e.PurchaseWarnMsg)
                .HasComment("Message for Purchase Order")
                .HasColumnName("purchase_warn_msg");
            entity.Property(e => e.Ref)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("ref");
            entity.Property(e => e.SaleWarn)
                .HasComment("Sales Warnings")
                .HasColumnType("character varying")
                .HasColumnName("sale_warn");
            entity.Property(e => e.SaleWarnMsg)
                .HasComment("Message for Sales Order")
                .HasColumnName("sale_warn_msg");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.SignupExpiration)
                .HasComment("Signup Expiration")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("signup_expiration");
            entity.Property(e => e.SignupToken)
                .HasComment("Signup Token")
                .HasColumnType("character varying")
                .HasColumnName("signup_token");
            entity.Property(e => e.SignupType)
                .HasComment("Signup Token Type")
                .HasColumnType("character varying")
                .HasColumnName("signup_type");
            entity.Property(e => e.StateId)
                .HasComment("State")
                .HasColumnName("state_id");
            entity.Property(e => e.Street)
                .HasComment("Street")
                .HasColumnType("character varying")
                .HasColumnName("street");
            entity.Property(e => e.Street2)
                .HasComment("Street2")
                .HasColumnType("character varying")
                .HasColumnName("street2");
            entity.Property(e => e.SupplierRank)
                .HasComment("Supplier Rank")
                .HasColumnName("supplier_rank");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.Title)
                .HasComment("Title")
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasComment("Address Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Tz)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("tz");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.Vat)
                .HasComment("Tax ID")
                .HasColumnType("character varying")
                .HasColumnName("vat");
            entity.Property(e => e.Website)
                .HasComment("Website Link")
                .HasColumnType("character varying")
                .HasColumnName("website");
            entity.Property(e => e.WebsiteDescription)
                .HasComment("Website Partner Full Description")
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WebsiteShortDescription)
                .HasComment("Website Partner Short Description")
                .HasColumnType("jsonb")
                .HasColumnName("website_short_description");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.Zip)
                .HasComment("Zip")
                .HasColumnType("character varying")
                .HasColumnName("zip");

            entity.HasOne(d => d.CommercialPartner).WithMany(p => p.InverseCommercialPartner)
                .HasForeignKey(d => d.CommercialPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_commercial_partner_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_company_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_partner_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResPartnerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_create_uid_fkey");

            entity.HasOne(d => d.Industry).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.IndustryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_industry_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_parent_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_partner_state_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_team_id_fkey");

            entity.HasOne(d => d.TitleNavigation).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.Title)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_title_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ResPartnerUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_user_id_fkey");

            entity.HasOne(d => d.WebsiteNavigation).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_partner_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResPartnerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_write_uid_fkey");

            entity.HasMany(d => d.CalendarEvents).WithMany(p => p.ResPartners)
                .UsingEntity<Dictionary<string, object>>(
                    "CalendarEventResPartnerRel",
                    r => r.HasOne<CalendarEvent>().WithMany()
                        .HasForeignKey("CalendarEventId")
                        .HasConstraintName("calendar_event_res_partner_rel_calendar_event_id_fkey"),
                    l => l.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("calendar_event_res_partner_rel_res_partner_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResPartnerId", "CalendarEventId").HasName("calendar_event_res_partner_rel_pkey");
                        j.ToTable("calendar_event_res_partner_rel", tb => tb.HasComment("RELATION BETWEEN res_partner AND calendar_event"));
                        j.HasIndex(new[] { "CalendarEventId", "ResPartnerId" }, "calendar_event_res_partner_re_calendar_event_id_res_partner_idx");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                        j.IndexerProperty<int>("CalendarEventId").HasColumnName("calendar_event_id");
                    });
        });

        modelBuilder.Entity<ResPartnerAutocompleteSync>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_autocomplete_sync_pkey");

            entity.ToTable("res_partner_autocomplete_sync", tb => tb.HasComment("Partner Autocomplete Sync"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.Synched)
                .HasComment("Is synched")
                .HasColumnName("synched");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResPartnerAutocompleteSyncCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_autocomplete_sync_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ResPartnerAutocompleteSyncs)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_partner_autocomplete_sync_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResPartnerAutocompleteSyncWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_autocomplete_sync_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartnerBank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_bank_pkey");

            entity.ToTable("res_partner_bank", tb => tb.HasComment("Bank Accounts"));

            entity.HasIndex(e => e.PartnerId, "res_partner_bank_partner_id_index");

            entity.HasIndex(e => new { e.SanitizedAccNumber, e.PartnerId }, "res_partner_bank_unique_number").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccHolderName)
                .HasComment("Account Holder Name")
                .HasColumnType("character varying")
                .HasColumnName("acc_holder_name");
            entity.Property(e => e.AccNumber)
                .HasComment("Account Number")
                .HasColumnType("character varying")
                .HasColumnName("acc_number");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AllowOutPayment)
                .HasComment("Send Money")
                .HasColumnName("allow_out_payment");
            entity.Property(e => e.BankId)
                .HasComment("Bank")
                .HasColumnName("bank_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Account Holder")
                .HasColumnName("partner_id");
            entity.Property(e => e.SanitizedAccNumber)
                .HasComment("Sanitized Account Number")
                .HasColumnType("character varying")
                .HasColumnName("sanitized_acc_number");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Bank).WithMany(p => p.ResPartnerBanks)
                .HasForeignKey(d => d.BankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_bank_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ResPartnerBanks)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResPartnerBankCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.ResPartnerBanks)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_currency_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ResPartnerBanks)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ResPartnerBanks)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("res_partner_bank_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResPartnerBankWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartnerCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_category_pkey");

            entity.ToTable("res_partner_category", tb => tb.HasComment("Partner Tags"));

            entity.HasIndex(e => e.ParentId, "res_partner_category_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "res_partner_category_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Tag Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Category")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResPartnerCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_partner_category_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResPartnerCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_category_write_uid_fkey");

            entity.HasMany(d => d.Partners).WithMany(p => p.Categories)
                .UsingEntity<Dictionary<string, object>>(
                    "ResPartnerResPartnerCategoryRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("res_partner_res_partner_category_rel_partner_id_fkey"),
                    l => l.HasOne<ResPartnerCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("res_partner_res_partner_category_rel_category_id_fkey"),
                    j =>
                    {
                        j.HasKey("CategoryId", "PartnerId").HasName("res_partner_res_partner_category_rel_pkey");
                        j.ToTable("res_partner_res_partner_category_rel", tb => tb.HasComment("RELATION BETWEEN res_partner_category AND res_partner"));
                        j.HasIndex(new[] { "PartnerId", "CategoryId" }, "res_partner_res_partner_category_rel_partner_id_category_id_idx");
                        j.IndexerProperty<int>("CategoryId").HasColumnName("category_id");
                        j.IndexerProperty<int>("PartnerId").HasColumnName("partner_id");
                    });
        });

        modelBuilder.Entity<ResPartnerIndustry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_industry_pkey");

            entity.ToTable("res_partner_industry", tb => tb.HasComment("Industry"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FullName)
                .HasComment("Full Name")
                .HasColumnType("jsonb")
                .HasColumnName("full_name");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResPartnerIndustryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_industry_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResPartnerIndustryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_industry_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartnerTitle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_title_pkey");

            entity.ToTable("res_partner_title", tb => tb.HasComment("Partner Title"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Title")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Shortcut)
                .HasComment("Abbreviation")
                .HasColumnType("jsonb")
                .HasColumnName("shortcut");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResPartnerTitleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_title_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResPartnerTitleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_title_write_uid_fkey");
        });

        modelBuilder.Entity<ResUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_pkey");

            entity.ToTable("res_users");

            entity.HasIndex(e => new { e.Login, e.WebsiteId }, "res_users_login_key").IsUnique();

            entity.HasIndex(e => e.PartnerId, "res_users_partner_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionId)
                .HasComment("Home Action")
                .HasColumnName("action_id");
            entity.Property(e => e.Active)
                .HasDefaultValueSql("true")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Karma)
                .HasComment("Karma")
                .HasColumnName("karma");
            entity.Property(e => e.LastLunchLocationId)
                .HasComment("Last Lunch Location")
                .HasColumnName("last_lunch_location_id");
            entity.Property(e => e.LivechatUsername)
                .HasComment("Livechat Username")
                .HasColumnType("character varying")
                .HasColumnName("livechat_username");
            entity.Property(e => e.Login)
                .HasColumnType("character varying")
                .HasColumnName("login");
            entity.Property(e => e.NextRankId)
                .HasComment("Next Rank")
                .HasColumnName("next_rank_id");
            entity.Property(e => e.NotificationType)
                .HasComment("Notification")
                .HasColumnType("character varying")
                .HasColumnName("notification_type");
            entity.Property(e => e.OdoobotFailed)
                .HasComment("Odoobot Failed")
                .HasColumnName("odoobot_failed");
            entity.Property(e => e.OdoobotState)
                .HasComment("OdooBot Status")
                .HasColumnType("character varying")
                .HasColumnName("odoobot_state");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Password)
                .HasColumnType("character varying")
                .HasColumnName("password");
            entity.Property(e => e.RankId)
                .HasComment("Rank")
                .HasColumnName("rank_id");
            entity.Property(e => e.SaleTeamId)
                .HasComment("User Sales Team")
                .HasColumnName("sale_team_id");
            entity.Property(e => e.Share)
                .HasComment("Share User")
                .HasColumnName("share");
            entity.Property(e => e.Signature)
                .HasComment("Email Signature")
                .HasColumnName("signature");
            entity.Property(e => e.TargetSalesDone)
                .HasComment("Activities Done Target")
                .HasColumnName("target_sales_done");
            entity.Property(e => e.TargetSalesInvoiced)
                .HasComment("Invoiced in Sales Orders Target")
                .HasColumnName("target_sales_invoiced");
            entity.Property(e => e.TargetSalesWon)
                .HasComment("Won in Opportunities Target")
                .HasColumnName("target_sales_won");
            entity.Property(e => e.TotpSecret)
                .HasComment("Totp Secret")
                .HasColumnType("character varying")
                .HasColumnName("totp_secret");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_users_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.InverseCreateU)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_create_uid_fkey");

            entity.HasOne(d => d.LastLunchLocation).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.LastLunchLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_last_lunch_location_id_fkey");

            entity.HasOne(d => d.NextRank).WithMany(p => p.ResUserNextRanks)
                .HasForeignKey(d => d.NextRankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_next_rank_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_users_partner_id_fkey");

            entity.HasOne(d => d.Rank).WithMany(p => p.ResUserRanks)
                .HasForeignKey(d => d.RankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_rank_id_fkey");

            entity.HasOne(d => d.SaleTeam).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.SaleTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_sale_team_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.InverseWriteU)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersApikey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_apikeys_pkey");

            entity.ToTable("res_users_apikeys");

            entity.HasIndex(e => new { e.UserId, e.Index }, "res_users_apikeys_user_id_index_idx");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("timezone('utc'::text, now())")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Index)
                .HasMaxLength(8)
                .HasColumnName("index");
            entity.Property(e => e.Key)
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Scope)
                .HasColumnType("character varying")
                .HasColumnName("scope");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.ResUsersApikeys)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("res_users_apikeys_user_id_fkey");
        });

        modelBuilder.Entity<ResUsersApikeysDescription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_apikeys_description_pkey");

            entity.ToTable("res_users_apikeys_description", tb => tb.HasComment("API Key Description"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResUsersApikeysDescriptionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_apikeys_description_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResUsersApikeysDescriptionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_apikeys_description_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersDeletion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_deletion_pkey");

            entity.ToTable("res_users_deletion", tb => tb.HasComment("Users Deletion Request"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.State)
                .HasComment("State")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.UserIdInt)
                .HasComment("User Id")
                .HasColumnName("user_id_int");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResUsersDeletionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_deletion_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ResUsersDeletionUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_deletion_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResUsersDeletionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_deletion_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersIdentitycheck>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_identitycheck_pkey");

            entity.ToTable("res_users_identitycheck", tb => tb.HasComment("Password Check Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Password)
                .HasComment("Password")
                .HasColumnType("character varying")
                .HasColumnName("password");
            entity.Property(e => e.Request)
                .HasComment("Request")
                .HasColumnType("character varying")
                .HasColumnName("request");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResUsersIdentitycheckCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_identitycheck_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResUsersIdentitycheckWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_identitycheck_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_log_pkey");

            entity.ToTable("res_users_log", tb => tb.HasComment("Users Log"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResUsersLogCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_log_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResUsersLogWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_log_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_settings_pkey");

            entity.ToTable("res_users_settings", tb => tb.HasComment("User Settings"));

            entity.HasIndex(e => e.UserId, "res_users_settings_unique_user_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsDiscussSidebarCategoryChannelOpen)
                .HasComment("Is discuss sidebar category channel open?")
                .HasColumnName("is_discuss_sidebar_category_channel_open");
            entity.Property(e => e.IsDiscussSidebarCategoryChatOpen)
                .HasComment("Is discuss sidebar category chat open?")
                .HasColumnName("is_discuss_sidebar_category_chat_open");
            entity.Property(e => e.IsDiscussSidebarCategoryLivechatOpen)
                .HasComment("Is category livechat open")
                .HasColumnName("is_discuss_sidebar_category_livechat_open");
            entity.Property(e => e.PushToTalkKey)
                .HasComment("Push-To-Talk shortcut")
                .HasColumnType("character varying")
                .HasColumnName("push_to_talk_key");
            entity.Property(e => e.UsePushToTalk)
                .HasComment("Use the push to talk feature")
                .HasColumnName("use_push_to_talk");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.VoiceActiveDuration)
                .HasComment("Duration of voice activity in ms")
                .HasColumnName("voice_active_duration");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResUsersSettingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_create_uid_fkey");

            entity.HasOne(d => d.User).WithOne(p => p.ResUsersSettingUser)
                .HasForeignKey<ResUsersSetting>(d => d.UserId)
                .HasConstraintName("res_users_settings_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResUsersSettingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersSettingsVolume>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_settings_volumes_pkey");

            entity.ToTable("res_users_settings_volumes", tb => tb.HasComment("User Settings Volumes"));

            entity.HasIndex(e => e.GuestId, "res_users_settings_volumes_guest_id_index");

            entity.HasIndex(e => new { e.UserSettingId, e.GuestId }, "res_users_settings_volumes_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => e.PartnerId, "res_users_settings_volumes_partner_id_index");

            entity.HasIndex(e => new { e.UserSettingId, e.PartnerId }, "res_users_settings_volumes_partner_unique")
                .IsUnique()
                .HasFilter("(partner_id IS NOT NULL)");

            entity.HasIndex(e => e.UserSettingId, "res_users_settings_volumes_user_setting_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.GuestId)
                .HasComment("Guest")
                .HasColumnName("guest_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.UserSettingId)
                .HasComment("User Setting")
                .HasColumnName("user_setting_id");
            entity.Property(e => e.Volume)
                .HasComment("Volume")
                .HasColumnName("volume");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResUsersSettingsVolumeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_volumes_create_uid_fkey");

            entity.HasOne(d => d.Guest).WithMany(p => p.ResUsersSettingsVolumeGuests)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_users_settings_volumes_guest_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ResUsersSettingsVolumePartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_users_settings_volumes_partner_id_fkey");

            entity.HasOne(d => d.UserSetting).WithMany(p => p.ResUsersSettingsVolumes)
                .HasForeignKey(d => d.UserSettingId)
                .HasConstraintName("res_users_settings_volumes_user_setting_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResUsersSettingsVolumeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_volumes_write_uid_fkey");
        });

        modelBuilder.Entity<ResetViewArchWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("reset_view_arch_wizard_pkey");

            entity.ToTable("reset_view_arch_wizard", tb => tb.HasComment("Reset View Architecture Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompareViewId)
                .HasComment("Compare To View")
                .HasColumnName("compare_view_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ResetMode)
                .HasComment("Reset Mode")
                .HasColumnType("character varying")
                .HasColumnName("reset_mode");
            entity.Property(e => e.ViewId)
                .HasComment("View")
                .HasColumnName("view_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CompareView).WithMany(p => p.ResetViewArchWizardCompareViews)
                .HasForeignKey(d => d.CompareViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_compare_view_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResetViewArchWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.ResetViewArchWizardViews)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_view_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResetViewArchWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceCalendar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_calendar_pkey");

            entity.ToTable("resource_calendar", tb => tb.HasComment("Resource Working Time"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.HoursPerDay)
                .HasComment("Average Hour per Day")
                .HasColumnName("hours_per_day");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TwoWeeksCalendar)
                .HasComment("Calendar in 2 weeks mode")
                .HasColumnName("two_weeks_calendar");
            entity.Property(e => e.Tz)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("tz");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.ResourceCalendars)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResourceCalendarCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResourceCalendarWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceCalendarAttendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_calendar_attendance_pkey");

            entity.ToTable("resource_calendar_attendance", tb => tb.HasComment("Work Detail"));

            entity.HasIndex(e => e.Dayofweek, "resource_calendar_attendance_dayofweek_index");

            entity.HasIndex(e => e.HourFrom, "resource_calendar_attendance_hour_from_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CalendarId)
                .HasComment("Resource's Calendar")
                .HasColumnName("calendar_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasComment("Starting Date")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasComment("End Date")
                .HasColumnName("date_to");
            entity.Property(e => e.DayPeriod)
                .HasComment("Day Period")
                .HasColumnType("character varying")
                .HasColumnName("day_period");
            entity.Property(e => e.Dayofweek)
                .HasComment("Day of Week")
                .HasColumnType("character varying")
                .HasColumnName("dayofweek");
            entity.Property(e => e.DisplayType)
                .HasComment("Display Type")
                .HasColumnType("character varying")
                .HasColumnName("display_type");
            entity.Property(e => e.HourFrom)
                .HasComment("Work from")
                .HasColumnName("hour_from");
            entity.Property(e => e.HourTo)
                .HasComment("Work to")
                .HasColumnName("hour_to");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceId)
                .HasComment("Resource")
                .HasColumnName("resource_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WeekType)
                .HasComment("Week Number")
                .HasColumnType("character varying")
                .HasColumnName("week_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Calendar).WithMany(p => p.ResourceCalendarAttendances)
                .HasForeignKey(d => d.CalendarId)
                .HasConstraintName("resource_calendar_attendance_calendar_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResourceCalendarAttendanceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_attendance_create_uid_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.ResourceCalendarAttendances)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_attendance_resource_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResourceCalendarAttendanceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_attendance_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceCalendarLeaf>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_calendar_leaves_pkey");

            entity.ToTable("resource_calendar_leaves", tb => tb.HasComment("Resource Time Off Detail"));

            entity.HasIndex(e => e.CalendarId, "resource_calendar_leaves_calendar_id_index");

            entity.HasIndex(e => e.ResourceId, "resource_calendar_leaves_resource_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CalendarId)
                .HasComment("Working Hours")
                .HasColumnName("calendar_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasComment("Start Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasComment("End Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_to");
            entity.Property(e => e.HolidayId)
                .HasComment("Leave Request")
                .HasColumnName("holiday_id");
            entity.Property(e => e.Name)
                .HasComment("Reason")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceId)
                .HasComment("Resource")
                .HasColumnName("resource_id");
            entity.Property(e => e.TimeType)
                .HasComment("Time Type")
                .HasColumnType("character varying")
                .HasColumnName("time_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Calendar).WithMany(p => p.ResourceCalendarLeaves)
                .HasForeignKey(d => d.CalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_calendar_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ResourceCalendarLeaves)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResourceCalendarLeafCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_create_uid_fkey");

            entity.HasOne(d => d.Holiday).WithMany(p => p.ResourceCalendarLeaves)
                .HasForeignKey(d => d.HolidayId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_holiday_id_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.ResourceCalendarLeaves)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_resource_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResourceCalendarLeafWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_resource_pkey");

            entity.ToTable("resource_resource", tb => tb.HasComment("Resources"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CalendarId)
                .HasComment("Working Time")
                .HasColumnName("calendar_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("resource_type");
            entity.Property(e => e.TimeEfficiency)
                .HasComment("Efficiency Factor")
                .HasColumnName("time_efficiency");
            entity.Property(e => e.Tz)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("tz");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Calendar).WithMany(p => p.ResourceResources)
                .HasForeignKey(d => d.CalendarId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("resource_resource_calendar_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.ResourceResources)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ResourceResourceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ResourceResourceUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ResourceResourceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_write_uid_fkey");
        });

        modelBuilder.Entity<SaleAdvancePaymentInv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_advance_payment_inv_pkey");

            entity.ToTable("sale_advance_payment_inv", tb => tb.HasComment("Sales Advance Payment Invoice"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdvancePaymentMethod)
                .HasComment("Create Invoice")
                .HasColumnType("character varying")
                .HasColumnName("advance_payment_method");
            entity.Property(e => e.Amount)
                .HasComment("Down Payment Amount")
                .HasColumnName("amount");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.DeductDownPayments)
                .HasComment("Deduct down payments")
                .HasColumnName("deduct_down_payments");
            entity.Property(e => e.DepositAccountId)
                .HasComment("Income Account")
                .HasColumnName("deposit_account_id");
            entity.Property(e => e.FixedAmount)
                .HasComment("Down Payment Amount (Fixed)")
                .HasColumnName("fixed_amount");
            entity.Property(e => e.ProductId)
                .HasComment("Down Payment Product")
                .HasColumnName("product_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.SaleAdvancePaymentInvs)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleAdvancePaymentInvCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.SaleAdvancePaymentInvs)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_currency_id_fkey");

            entity.HasOne(d => d.DepositAccount).WithMany(p => p.SaleAdvancePaymentInvs)
                .HasForeignKey(d => d.DepositAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_deposit_account_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleAdvancePaymentInvs)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleAdvancePaymentInvWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_write_uid_fkey");

            entity.HasMany(d => d.AccountTaxes).WithMany(p => p.SaleAdvancePaymentInvs)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxSaleAdvancePaymentInvRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_sale_advance_payment_inv_rel_account_tax_id_fkey"),
                    l => l.HasOne<SaleAdvancePaymentInv>().WithMany()
                        .HasForeignKey("SaleAdvancePaymentInvId")
                        .HasConstraintName("account_tax_sale_advance_payme_sale_advance_payment_inv_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleAdvancePaymentInvId", "AccountTaxId").HasName("account_tax_sale_advance_payment_inv_rel_pkey");
                        j.ToTable("account_tax_sale_advance_payment_inv_rel", tb => tb.HasComment("RELATION BETWEEN sale_advance_payment_inv AND account_tax"));
                        j.HasIndex(new[] { "AccountTaxId", "SaleAdvancePaymentInvId" }, "account_tax_sale_advance_paym_account_tax_id_sale_advance_p_idx");
                        j.IndexerProperty<int>("SaleAdvancePaymentInvId").HasColumnName("sale_advance_payment_inv_id");
                        j.IndexerProperty<int>("AccountTaxId").HasColumnName("account_tax_id");
                    });

            entity.HasMany(d => d.SaleOrders).WithMany(p => p.SaleAdvancePaymentInvs)
                .UsingEntity<Dictionary<string, object>>(
                    "SaleAdvancePaymentInvSaleOrderRel",
                    r => r.HasOne<SaleOrder>().WithMany()
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("sale_advance_payment_inv_sale_order_rel_sale_order_id_fkey"),
                    l => l.HasOne<SaleAdvancePaymentInv>().WithMany()
                        .HasForeignKey("SaleAdvancePaymentInvId")
                        .HasConstraintName("sale_advance_payment_inv_sale__sale_advance_payment_inv_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleAdvancePaymentInvId", "SaleOrderId").HasName("sale_advance_payment_inv_sale_order_rel_pkey");
                        j.ToTable("sale_advance_payment_inv_sale_order_rel", tb => tb.HasComment("RELATION BETWEEN sale_advance_payment_inv AND sale_order"));
                        j.HasIndex(new[] { "SaleOrderId", "SaleAdvancePaymentInvId" }, "sale_advance_payment_inv_sale_sale_order_id_sale_advance_pa_idx");
                        j.IndexerProperty<int>("SaleAdvancePaymentInvId").HasColumnName("sale_advance_payment_inv_id");
                        j.IndexerProperty<int>("SaleOrderId").HasColumnName("sale_order_id");
                    });
        });

        modelBuilder.Entity<SaleOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_pkey");

            entity.ToTable("sale_order", tb => tb.HasComment("Sales Order"));

            entity.HasIndex(e => e.CompanyId, "sale_order_company_id_index");

            entity.HasIndex(e => e.CreateDate, "sale_order_create_date_index");

            entity.HasIndex(e => new { e.DateOrder, e.Id }, "sale_order_date_order_id_idx").IsDescending();

            entity.HasIndex(e => e.Name, "sale_order_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PartnerId, "sale_order_partner_id_index");

            entity.HasIndex(e => e.State, "sale_order_state_index");

            entity.HasIndex(e => e.UserId, "sale_order_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.AmountTax)
                .HasComment("Taxes")
                .HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal)
                .HasComment("Total")
                .HasColumnName("amount_total");
            entity.Property(e => e.AmountUnpaid)
                .HasComment("Unpaid Amount")
                .HasColumnName("amount_unpaid");
            entity.Property(e => e.AmountUntaxed)
                .HasComment("Untaxed Amount")
                .HasColumnName("amount_untaxed");
            entity.Property(e => e.AnalyticAccountId)
                .HasComment("Analytic Account")
                .HasColumnName("analytic_account_id");
            entity.Property(e => e.CampaignId)
                .HasComment("Campaign")
                .HasColumnName("campaign_id");
            entity.Property(e => e.CartRecoveryEmailSent)
                .HasComment("Cart recovery email already sent")
                .HasColumnName("cart_recovery_email_sent");
            entity.Property(e => e.ClientOrderRef)
                .HasComment("Customer Reference")
                .HasColumnType("character varying")
                .HasColumnName("client_order_ref");
            entity.Property(e => e.CommitmentDate)
                .HasComment("Delivery Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("commitment_date");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Creation Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.CurrencyRate)
                .HasComment("Currency Rate")
                .HasColumnName("currency_rate");
            entity.Property(e => e.DateOrder)
                .HasComment("Order Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_order");
            entity.Property(e => e.DeliveryStatus)
                .HasComment("Delivery Status")
                .HasColumnType("character varying")
                .HasColumnName("delivery_status");
            entity.Property(e => e.EffectiveDate)
                .HasComment("Effective Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("effective_date");
            entity.Property(e => e.FiscalPositionId)
                .HasComment("Fiscal Position")
                .HasColumnName("fiscal_position_id");
            entity.Property(e => e.Incoterm)
                .HasComment("Incoterm")
                .HasColumnName("incoterm");
            entity.Property(e => e.IncotermLocation)
                .HasComment("Incoterm Location")
                .HasColumnType("character varying")
                .HasColumnName("incoterm_location");
            entity.Property(e => e.InvoiceStatus)
                .HasComment("Invoice Status")
                .HasColumnType("character varying")
                .HasColumnName("invoice_status");
            entity.Property(e => e.MediumId)
                .HasComment("Medium")
                .HasColumnName("medium_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Order Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Terms and conditions")
                .HasColumnName("note");
            entity.Property(e => e.OpportunityId)
                .HasComment("Opportunity")
                .HasColumnName("opportunity_id");
            entity.Property(e => e.Origin)
                .HasComment("Source Document")
                .HasColumnType("character varying")
                .HasColumnName("origin");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerInvoiceId)
                .HasComment("Invoice Address")
                .HasColumnName("partner_invoice_id");
            entity.Property(e => e.PartnerShippingId)
                .HasComment("Delivery Address")
                .HasColumnName("partner_shipping_id");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Payment Terms")
                .HasColumnName("payment_term_id");
            entity.Property(e => e.PickingPolicy)
                .HasComment("Shipping Policy")
                .HasColumnType("character varying")
                .HasColumnName("picking_policy");
            entity.Property(e => e.PricelistId)
                .HasComment("Pricelist")
                .HasColumnName("pricelist_id");
            entity.Property(e => e.ProcurementGroupId)
                .HasComment("Procurement Group")
                .HasColumnName("procurement_group_id");
            entity.Property(e => e.ProjectId)
                .HasComment("Project")
                .HasColumnName("project_id");
            entity.Property(e => e.Reference)
                .HasComment("Payment Ref.")
                .HasColumnType("character varying")
                .HasColumnName("reference");
            entity.Property(e => e.RequirePayment)
                .HasComment("Online Payment")
                .HasColumnName("require_payment");
            entity.Property(e => e.RequireSignature)
                .HasComment("Online Signature")
                .HasColumnName("require_signature");
            entity.Property(e => e.SaleOrderTemplateId).HasColumnName("sale_order_template_id");
            entity.Property(e => e.ShopWarning)
                .HasComment("Warning")
                .HasColumnType("character varying")
                .HasColumnName("shop_warning");
            entity.Property(e => e.SignedBy)
                .HasComment("Signed By")
                .HasColumnType("character varying")
                .HasColumnName("signed_by");
            entity.Property(e => e.SignedOn)
                .HasComment("Signed On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("signed_on");
            entity.Property(e => e.SourceId)
                .HasComment("Source")
                .HasColumnName("source_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TeamId)
                .HasComment("Sales Team")
                .HasColumnName("team_id");
            entity.Property(e => e.UserId)
                .HasComment("Salesperson")
                .HasColumnName("user_id");
            entity.Property(e => e.ValidityDate)
                .HasComment("Expiration")
                .HasColumnName("validity_date");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_analytic_account_id_fkey");

            entity.HasOne(d => d.Campaign).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_campaign_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleOrderCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_currency_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_fiscal_position_id_fkey");

            entity.HasOne(d => d.IncotermNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.Incoterm)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_incoterm_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Opportunity).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.OpportunityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_opportunity_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.SaleOrderPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_partner_id_fkey");

            entity.HasOne(d => d.PartnerInvoice).WithMany(p => p.SaleOrderPartnerInvoices)
                .HasForeignKey(d => d.PartnerInvoiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_partner_invoice_id_fkey");

            entity.HasOne(d => d.PartnerShipping).WithMany(p => p.SaleOrderPartnerShippings)
                .HasForeignKey(d => d.PartnerShippingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_partner_shipping_id_fkey");

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.PaymentTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_payment_term_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_pricelist_id_fkey");

            entity.HasOne(d => d.ProcurementGroup).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.ProcurementGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_procurement_group_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_project_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_sale_order_template_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_source_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_team_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.SaleOrderUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_user_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_warehouse_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleOrderWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_write_uid_fkey");

            entity.HasMany(d => d.Tags).WithMany(p => p.Orders)
                .UsingEntity<Dictionary<string, object>>(
                    "SaleOrderTagRel",
                    r => r.HasOne<CrmTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("sale_order_tag_rel_tag_id_fkey"),
                    l => l.HasOne<SaleOrder>().WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("sale_order_tag_rel_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("OrderId", "TagId").HasName("sale_order_tag_rel_pkey");
                        j.ToTable("sale_order_tag_rel", tb => tb.HasComment("RELATION BETWEEN sale_order AND crm_tag"));
                        j.HasIndex(new[] { "TagId", "OrderId" }, "sale_order_tag_rel_tag_id_order_id_idx");
                        j.IndexerProperty<int>("OrderId").HasColumnName("order_id");
                        j.IndexerProperty<int>("TagId").HasColumnName("tag_id");
                    });
        });

        modelBuilder.Entity<SaleOrderCancel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_cancel_pkey");

            entity.ToTable("sale_order_cancel", tb => tb.HasComment("Sales Order Cancel"));

            entity.HasIndex(e => e.AuthorId, "sale_order_cancel_author_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthorId)
                .HasComment("Author")
                .HasColumnName("author_id");
            entity.Property(e => e.Body)
                .HasComment("Contents")
                .HasColumnName("body");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EmailFrom)
                .HasComment("From")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.OrderId)
                .HasComment("Sale Order")
                .HasColumnName("order_id");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.TemplateId)
                .HasComment("Mail Template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Author).WithMany(p => p.SaleOrderCancels)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_author_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleOrderCancelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_create_uid_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.SaleOrderCancels)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("sale_order_cancel_order_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.SaleOrderCancels)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleOrderCancelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_line_pkey");

            entity.ToTable("sale_order_line", tb => tb.HasComment("Sales Order Line"));

            entity.HasIndex(e => e.AnalyticDistribution, "sale_order_line_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.CompanyId, "sale_order_line_company_id_index");

            entity.HasIndex(e => e.LinkedLineId, "sale_order_line_linked_line_id_index");

            entity.HasIndex(e => e.OrderId, "sale_order_line_order_id_index");

            entity.HasIndex(e => e.OrderPartnerId, "sale_order_line_order_partner_id_index");

            entity.HasIndex(e => e.ProductId, "sale_order_line_product_id_index").HasFilter("(product_id IS NOT NULL)");

            entity.HasIndex(e => e.ProjectId, "sale_order_line_project_id_index");

            entity.HasIndex(e => e.TaskId, "sale_order_line_task_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnalyticDistribution)
                .HasComment("Analytic")
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId)
                .HasComment("Currency")
                .HasColumnName("currency_id");
            entity.Property(e => e.CustomerLead)
                .HasComment("Lead Time")
                .HasColumnName("customer_lead");
            entity.Property(e => e.Discount)
                .HasComment("Discount (%)")
                .HasColumnName("discount");
            entity.Property(e => e.DisplayType)
                .HasComment("Display Type")
                .HasColumnType("character varying")
                .HasColumnName("display_type");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.EventTicketId)
                .HasComment("Event Ticket")
                .HasColumnName("event_ticket_id");
            entity.Property(e => e.InvoiceStatus)
                .HasComment("Invoice Status")
                .HasColumnType("character varying")
                .HasColumnName("invoice_status");
            entity.Property(e => e.IsDownpayment)
                .HasComment("Is a down payment")
                .HasColumnName("is_downpayment");
            entity.Property(e => e.IsExpense)
                .HasComment("Is expense")
                .HasColumnName("is_expense");
            entity.Property(e => e.IsService).HasColumnName("is_service");
            entity.Property(e => e.LinkedLineId)
                .HasComment("Linked Order Line")
                .HasColumnName("linked_line_id");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnName("name");
            entity.Property(e => e.OrderId)
                .HasComment("Order Reference")
                .HasColumnName("order_id");
            entity.Property(e => e.OrderPartnerId)
                .HasComment("Customer")
                .HasColumnName("order_partner_id");
            entity.Property(e => e.PriceReduce)
                .HasComment("Price Reduce")
                .HasColumnName("price_reduce");
            entity.Property(e => e.PriceReduceTaxexcl)
                .HasComment("Price Reduce Tax excl")
                .HasColumnName("price_reduce_taxexcl");
            entity.Property(e => e.PriceReduceTaxinc)
                .HasComment("Price Reduce Tax incl")
                .HasColumnName("price_reduce_taxinc");
            entity.Property(e => e.PriceSubtotal)
                .HasComment("Subtotal")
                .HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTax)
                .HasComment("Total Tax")
                .HasColumnName("price_tax");
            entity.Property(e => e.PriceTotal)
                .HasComment("Total")
                .HasColumnName("price_total");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductPackagingId)
                .HasComment("Packaging")
                .HasColumnName("product_packaging_id");
            entity.Property(e => e.ProductPackagingQty)
                .HasComment("Packaging Quantity")
                .HasColumnName("product_packaging_qty");
            entity.Property(e => e.ProductUom)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty)
                .HasComment("Quantity")
                .HasColumnName("product_uom_qty");
            entity.Property(e => e.ProjectId)
                .HasComment("Generated Project")
                .HasColumnName("project_id");
            entity.Property(e => e.QtyDelivered)
                .HasComment("Delivery Quantity")
                .HasColumnName("qty_delivered");
            entity.Property(e => e.QtyDeliveredMethod)
                .HasComment("Method to update delivered qty")
                .HasColumnType("character varying")
                .HasColumnName("qty_delivered_method");
            entity.Property(e => e.QtyInvoiced)
                .HasComment("Invoiced Quantity")
                .HasColumnName("qty_invoiced");
            entity.Property(e => e.QtyToInvoice)
                .HasComment("Quantity To Invoice")
                .HasColumnName("qty_to_invoice");
            entity.Property(e => e.RouteId)
                .HasComment("Route")
                .HasColumnName("route_id");
            entity.Property(e => e.SalesmanId)
                .HasComment("Salesperson")
                .HasColumnName("salesman_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ShopWarning)
                .HasComment("Warning")
                .HasColumnType("character varying")
                .HasColumnName("shop_warning");
            entity.Property(e => e.State)
                .HasComment("Order Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TaskId)
                .HasComment("Generated Task")
                .HasColumnName("task_id");
            entity.Property(e => e.UntaxedAmountInvoiced)
                .HasComment("Untaxed Invoiced Amount")
                .HasColumnName("untaxed_amount_invoiced");
            entity.Property(e => e.UntaxedAmountToInvoice)
                .HasComment("Untaxed Amount To Invoice")
                .HasColumnName("untaxed_amount_to_invoice");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleOrderLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_create_uid_fkey");

            entity.HasOne(d => d.Currency).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_currency_id_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_event_id_fkey");

            entity.HasOne(d => d.EventTicket).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.EventTicketId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_event_ticket_id_fkey");

            entity.HasOne(d => d.LinkedLine).WithMany(p => p.InverseLinkedLine)
                .HasForeignKey(d => d.LinkedLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_line_linked_line_id_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("sale_order_line_order_id_fkey");

            entity.HasOne(d => d.OrderPartner).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.OrderPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_order_partner_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_line_product_id_fkey");

            entity.HasOne(d => d.ProductPackaging).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProductPackagingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_product_packaging_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_line_product_uom_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_project_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_line_route_id_fkey");

            entity.HasOne(d => d.Salesman).WithMany(p => p.SaleOrderLineSalesmen)
                .HasForeignKey(d => d.SalesmanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_salesman_id_fkey");

            entity.HasOne(d => d.Task).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_task_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleOrderLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_write_uid_fkey");

            entity.HasMany(d => d.AccountTaxes).WithMany(p => p.SaleOrderLines)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxSaleOrderLineRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_sale_order_line_rel_account_tax_id_fkey"),
                    l => l.HasOne<SaleOrderLine>().WithMany()
                        .HasForeignKey("SaleOrderLineId")
                        .HasConstraintName("account_tax_sale_order_line_rel_sale_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleOrderLineId", "AccountTaxId").HasName("account_tax_sale_order_line_rel_pkey");
                        j.ToTable("account_tax_sale_order_line_rel", tb => tb.HasComment("RELATION BETWEEN sale_order_line AND account_tax"));
                        j.HasIndex(new[] { "AccountTaxId", "SaleOrderLineId" }, "account_tax_sale_order_line_r_account_tax_id_sale_order_lin_idx");
                        j.IndexerProperty<int>("SaleOrderLineId").HasColumnName("sale_order_line_id");
                        j.IndexerProperty<int>("AccountTaxId").HasColumnName("account_tax_id");
                    });

            entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.SaleOrderLines)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTemplateAttributeValueSaleOrderLineRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_template_attribute_va_product_template_attribute_v_fkey"),
                    l => l.HasOne<SaleOrderLine>().WithMany()
                        .HasForeignKey("SaleOrderLineId")
                        .HasConstraintName("product_template_attribute_value_sale_o_sale_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleOrderLineId", "ProductTemplateAttributeValueId").HasName("product_template_attribute_value_sale_order_line_rel_pkey");
                        j.ToTable("product_template_attribute_value_sale_order_line_rel", tb => tb.HasComment("RELATION BETWEEN sale_order_line AND product_template_attribute_value"));
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "SaleOrderLineId" }, "product_template_attribute_va_product_template_attribute_va_idx");
                        j.IndexerProperty<int>("SaleOrderLineId").HasColumnName("sale_order_line_id");
                        j.IndexerProperty<int>("ProductTemplateAttributeValueId").HasColumnName("product_template_attribute_value_id");
                    });
        });

        modelBuilder.Entity<SaleOrderOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_option_pkey");

            entity.ToTable("sale_order_option", tb => tb.HasComment("Sale Options"));

            entity.HasIndex(e => e.OrderId, "sale_order_option_order_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Discount)
                .HasComment("Discount (%)")
                .HasColumnName("discount");
            entity.Property(e => e.LineId)
                .HasComment("Line")
                .HasColumnName("line_id");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnName("name");
            entity.Property(e => e.OrderId)
                .HasComment("Sales Order Reference")
                .HasColumnName("order_id");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.UomId)
                .HasComment("Unit of Measure")
                .HasColumnName("uom_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleOrderOptionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_option_create_uid_fkey");

            entity.HasOne(d => d.Line).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.LineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_option_line_id_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_option_order_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_option_product_id_fkey");

            entity.HasOne(d => d.Uom).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_option_uom_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleOrderOptionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_option_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_template_pkey");

            entity.ToTable("sale_order_template", tb => tb.HasComment("Quotation Template"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailTemplateId)
                .HasComment("Confirmation Mail")
                .HasColumnName("mail_template_id");
            entity.Property(e => e.Name)
                .HasComment("Quotation Template")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Terms and conditions")
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.NumberOfDays)
                .HasComment("Quotation Duration")
                .HasColumnName("number_of_days");
            entity.Property(e => e.RequirePayment)
                .HasComment("Online Payment")
                .HasColumnName("require_payment");
            entity.Property(e => e.RequireSignature)
                .HasComment("Online Signature")
                .HasColumnName("require_signature");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.SaleOrderTemplates)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleOrderTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.SaleOrderTemplates)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_mail_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleOrderTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderTemplateLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_template_line_pkey");

            entity.ToTable("sale_order_template_line", tb => tb.HasComment("Quotation Template Line"));

            entity.HasIndex(e => e.CompanyId, "sale_order_template_line_company_id_index");

            entity.HasIndex(e => e.SaleOrderTemplateId, "sale_order_template_line_sale_order_template_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DisplayType)
                .HasComment("Display Type")
                .HasColumnType("character varying")
                .HasColumnName("display_type");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.ProductUomQty)
                .HasComment("Quantity")
                .HasColumnName("product_uom_qty");
            entity.Property(e => e.SaleOrderTemplateId)
                .HasComment("Quotation Template Reference")
                .HasColumnName("sale_order_template_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.SaleOrderTemplateLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleOrderTemplateLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderTemplateLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.SaleOrderTemplateLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_product_uom_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.SaleOrderTemplateLines)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .HasConstraintName("sale_order_template_line_sale_order_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleOrderTemplateLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderTemplateOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_template_option_pkey");

            entity.ToTable("sale_order_template_option", tb => tb.HasComment("Quotation Template Option"));

            entity.HasIndex(e => e.CompanyId, "sale_order_template_option_company_id_index");

            entity.HasIndex(e => e.SaleOrderTemplateId, "sale_order_template_option_sale_order_template_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.SaleOrderTemplateId)
                .HasComment("Quotation Template Reference")
                .HasColumnName("sale_order_template_id");
            entity.Property(e => e.UomId)
                .HasComment("Unit of Measure")
                .HasColumnName("uom_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.SaleOrderTemplateOptions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_option_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SaleOrderTemplateOptionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_option_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderTemplateOptions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_template_option_product_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.SaleOrderTemplateOptions)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .HasConstraintName("sale_order_template_option_sale_order_template_id_fkey");

            entity.HasOne(d => d.Uom).WithMany(p => p.SaleOrderTemplateOptions)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_template_option_uom_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SaleOrderTemplateOptionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_option_write_uid_fkey");
        });

        modelBuilder.Entity<SalePaymentProviderOnboardingWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_payment_provider_onboarding_wizard_pkey");

            entity.ToTable("sale_payment_provider_onboarding_wizard", tb => tb.HasComment("Sale Payment provider onboarding wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccNumber)
                .HasComment("Account Number")
                .HasColumnType("character varying")
                .HasColumnName("acc_number");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.JournalName)
                .HasComment("Bank Name")
                .HasColumnType("character varying")
                .HasColumnName("journal_name");
            entity.Property(e => e.ManualName)
                .HasComment("Method")
                .HasColumnType("character varying")
                .HasColumnName("manual_name");
            entity.Property(e => e.ManualPostMsg)
                .HasComment("Payment Instructions")
                .HasColumnName("manual_post_msg");
            entity.Property(e => e.PaymentMethod)
                .HasComment("Payment Method")
                .HasColumnType("character varying")
                .HasColumnName("payment_method");
            entity.Property(e => e.PaypalEmailAccount)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("paypal_email_account");
            entity.Property(e => e.PaypalPdtToken)
                .HasComment("PDT Identity Token")
                .HasColumnType("character varying")
                .HasColumnName("paypal_pdt_token");
            entity.Property(e => e.PaypalSellerAccount)
                .HasComment("Merchant Account ID")
                .HasColumnType("character varying")
                .HasColumnName("paypal_seller_account");
            entity.Property(e => e.PaypalUserType)
                .HasComment("Paypal User Type")
                .HasColumnType("character varying")
                .HasColumnName("paypal_user_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SalePaymentProviderOnboardingWizardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_payment_provider_onboarding_wizard_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SalePaymentProviderOnboardingWizardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_payment_provider_onboarding_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<SlideAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_answer_pkey");

            entity.ToTable("slide_answer", tb => tb.HasComment("Slide Question's Answer"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Comment)
                .HasComment("Comment")
                .HasColumnType("jsonb")
                .HasColumnName("comment");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsCorrect)
                .HasComment("Is correct answer")
                .HasColumnName("is_correct");
            entity.Property(e => e.QuestionId)
                .HasComment("Question")
                .HasColumnName("question_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.TextValue)
                .HasComment("Answer")
                .HasColumnType("jsonb")
                .HasColumnName("text_value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideAnswerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_answer_create_uid_fkey");

            entity.HasOne(d => d.Question).WithMany(p => p.SlideAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("slide_answer_question_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideAnswerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_answer_write_uid_fkey");
        });

        modelBuilder.Entity<SlideChannel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_channel_pkey");

            entity.ToTable("slide_channel", tb => tb.HasComment("Course"));

            entity.HasIndex(e => e.IsPublished, "slide_channel_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "slide_channel_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Security Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AllowComment)
                .HasComment("Allow rating on Course")
                .HasColumnName("allow_comment");
            entity.Property(e => e.ChannelType)
                .HasComment("Course type")
                .HasColumnType("character varying")
                .HasColumnName("channel_type");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompletedTemplateId)
                .HasComment("Completion Notification")
                .HasColumnName("completed_template_id");
            entity.Property(e => e.CoverProperties)
                .HasComment("Cover Properties")
                .HasColumnName("cover_properties");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.DescriptionHtml)
                .HasComment("Detailed Description")
                .HasColumnType("jsonb")
                .HasColumnName("description_html");
            entity.Property(e => e.DescriptionShort)
                .HasComment("Short Description")
                .HasColumnType("jsonb")
                .HasColumnName("description_short");
            entity.Property(e => e.Enroll)
                .HasComment("Enroll Policy")
                .HasColumnType("character varying")
                .HasColumnName("enroll");
            entity.Property(e => e.EnrollMsg)
                .HasComment("Enroll Message")
                .HasColumnType("jsonb")
                .HasColumnName("enroll_msg");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.KarmaGenChannelFinish)
                .HasComment("Course finished")
                .HasColumnName("karma_gen_channel_finish");
            entity.Property(e => e.KarmaGenChannelRank)
                .HasComment("Course ranked")
                .HasColumnName("karma_gen_channel_rank");
            entity.Property(e => e.KarmaGenSlideVote)
                .HasComment("Lesson voted")
                .HasColumnName("karma_gen_slide_vote");
            entity.Property(e => e.KarmaReview)
                .HasComment("Add Review")
                .HasColumnName("karma_review");
            entity.Property(e => e.KarmaSlideComment)
                .HasComment("Add Comment")
                .HasColumnName("karma_slide_comment");
            entity.Property(e => e.KarmaSlideVote)
                .HasComment("Vote")
                .HasColumnName("karma_slide_vote");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NbrArticle)
                .HasComment("Articles")
                .HasColumnName("nbr_article");
            entity.Property(e => e.NbrCertification)
                .HasComment("Number of Certifications")
                .HasColumnName("nbr_certification");
            entity.Property(e => e.NbrDocument)
                .HasComment("Documents")
                .HasColumnName("nbr_document");
            entity.Property(e => e.NbrInfographic)
                .HasComment("Infographics")
                .HasColumnName("nbr_infographic");
            entity.Property(e => e.NbrQuiz)
                .HasComment("Number of Quizs")
                .HasColumnName("nbr_quiz");
            entity.Property(e => e.NbrVideo)
                .HasComment("Videos")
                .HasColumnName("nbr_video");
            entity.Property(e => e.PromoteStrategy)
                .HasComment("Featured Content")
                .HasColumnType("character varying")
                .HasColumnName("promote_strategy");
            entity.Property(e => e.PromotedSlideId)
                .HasComment("Promoted Slide")
                .HasColumnName("promoted_slide_id");
            entity.Property(e => e.PublishTemplateId)
                .HasComment("New Content Notification")
                .HasColumnName("publish_template_id");
            entity.Property(e => e.RatingLastValue)
                .HasComment("Rating Last Value")
                .HasColumnName("rating_last_value");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ShareChannelTemplateId)
                .HasComment("Channel Share Template")
                .HasColumnName("share_channel_template_id");
            entity.Property(e => e.ShareSlideTemplateId)
                .HasComment("Share Template")
                .HasColumnName("share_slide_template_id");
            entity.Property(e => e.SlideLastUpdate)
                .HasComment("Last Update")
                .HasColumnName("slide_last_update");
            entity.Property(e => e.TotalSlides)
                .HasComment("Number of Contents")
                .HasColumnName("total_slides");
            entity.Property(e => e.TotalTime)
                .HasComment("Duration")
                .HasColumnName("total_time");
            entity.Property(e => e.TotalViews)
                .HasComment("Visits")
                .HasColumnName("total_views");
            entity.Property(e => e.TotalVotes)
                .HasComment("Votes")
                .HasColumnName("total_votes");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.Visibility)
                .HasComment("Visibility")
                .HasColumnType("character varying")
                .HasColumnName("visibility");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CompletedTemplate).WithMany(p => p.SlideChannelCompletedTemplates)
                .HasForeignKey(d => d.CompletedTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_completed_template_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideChannelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.SlideChannels)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_message_main_attachment_id_fkey");

            entity.HasOne(d => d.PromotedSlide).WithMany(p => p.SlideChannels)
                .HasForeignKey(d => d.PromotedSlideId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_promoted_slide_id_fkey");

            entity.HasOne(d => d.PublishTemplate).WithMany(p => p.SlideChannelPublishTemplates)
                .HasForeignKey(d => d.PublishTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_publish_template_id_fkey");

            entity.HasOne(d => d.ShareChannelTemplate).WithMany(p => p.SlideChannelShareChannelTemplates)
                .HasForeignKey(d => d.ShareChannelTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_share_channel_template_id_fkey");

            entity.HasOne(d => d.ShareSlideTemplate).WithMany(p => p.SlideChannelShareSlideTemplates)
                .HasForeignKey(d => d.ShareSlideTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_share_slide_template_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.SlideChannelUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_user_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.SlideChannels)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("slide_channel_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideChannelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_write_uid_fkey");

            entity.HasMany(d => d.Groups).WithMany(p => p.Channels)
                .UsingEntity<Dictionary<string, object>>(
                    "RelUploadGroup",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("rel_upload_groups_group_id_fkey"),
                    l => l.HasOne<SlideChannel>().WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("rel_upload_groups_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("ChannelId", "GroupId").HasName("rel_upload_groups_pkey");
                        j.ToTable("rel_upload_groups", tb => tb.HasComment("RELATION BETWEEN slide_channel AND res_groups"));
                        j.HasIndex(new[] { "GroupId", "ChannelId" }, "rel_upload_groups_group_id_channel_id_idx");
                        j.IndexerProperty<int>("ChannelId").HasColumnName("channel_id");
                        j.IndexerProperty<int>("GroupId").HasColumnName("group_id");
                    });

            entity.HasMany(d => d.ResGroups).WithMany(p => p.SlideChannels)
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsSlideChannelRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("ResGroupsId")
                        .HasConstraintName("res_groups_slide_channel_rel_res_groups_id_fkey"),
                    l => l.HasOne<SlideChannel>().WithMany()
                        .HasForeignKey("SlideChannelId")
                        .HasConstraintName("res_groups_slide_channel_rel_slide_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("SlideChannelId", "ResGroupsId").HasName("res_groups_slide_channel_rel_pkey");
                        j.ToTable("res_groups_slide_channel_rel", tb => tb.HasComment("RELATION BETWEEN slide_channel AND res_groups"));
                        j.HasIndex(new[] { "ResGroupsId", "SlideChannelId" }, "res_groups_slide_channel_rel_res_groups_id_slide_channel_id_idx");
                        j.IndexerProperty<int>("SlideChannelId").HasColumnName("slide_channel_id");
                        j.IndexerProperty<int>("ResGroupsId").HasColumnName("res_groups_id");
                    });

            entity.HasMany(d => d.Tags).WithMany(p => p.Channels)
                .UsingEntity<Dictionary<string, object>>(
                    "SlideChannelTagRel",
                    r => r.HasOne<SlideChannelTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("slide_channel_tag_rel_tag_id_fkey"),
                    l => l.HasOne<SlideChannel>().WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("slide_channel_tag_rel_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("ChannelId", "TagId").HasName("slide_channel_tag_rel_pkey");
                        j.ToTable("slide_channel_tag_rel", tb => tb.HasComment("RELATION BETWEEN slide_channel AND slide_channel_tag"));
                        j.HasIndex(new[] { "TagId", "ChannelId" }, "slide_channel_tag_rel_tag_id_channel_id_idx");
                        j.IndexerProperty<int>("ChannelId").HasColumnName("channel_id");
                        j.IndexerProperty<int>("TagId").HasColumnName("tag_id");
                    });
        });

        modelBuilder.Entity<SlideChannelInvite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_channel_invite_pkey");

            entity.ToTable("slide_channel_invite", tb => tb.HasComment("Channel Invitation Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Body)
                .HasComment("Contents")
                .HasColumnName("body");
            entity.Property(e => e.ChannelId)
                .HasComment("Slide channel")
                .HasColumnName("channel_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.TemplateId)
                .HasComment("Mail Template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.SlideChannelInvites)
                .HasForeignKey(d => d.ChannelId)
                .HasConstraintName("slide_channel_invite_channel_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideChannelInviteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_invite_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.SlideChannelInvites)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_invite_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideChannelInviteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_invite_write_uid_fkey");

            entity.HasMany(d => d.IrAttachments).WithMany(p => p.SlideChannelInvites)
                .UsingEntity<Dictionary<string, object>>(
                    "IrAttachmentSlideChannelInviteRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .HasConstraintName("ir_attachment_slide_channel_invite_rel_ir_attachment_id_fkey"),
                    l => l.HasOne<SlideChannelInvite>().WithMany()
                        .HasForeignKey("SlideChannelInviteId")
                        .HasConstraintName("ir_attachment_slide_channel_invite_slide_channel_invite_id_fkey"),
                    j =>
                    {
                        j.HasKey("SlideChannelInviteId", "IrAttachmentId").HasName("ir_attachment_slide_channel_invite_rel_pkey");
                        j.ToTable("ir_attachment_slide_channel_invite_rel", tb => tb.HasComment("RELATION BETWEEN slide_channel_invite AND ir_attachment"));
                        j.HasIndex(new[] { "IrAttachmentId", "SlideChannelInviteId" }, "ir_attachment_slide_channel_i_ir_attachment_id_slide_channe_idx");
                        j.IndexerProperty<int>("SlideChannelInviteId").HasColumnName("slide_channel_invite_id");
                        j.IndexerProperty<int>("IrAttachmentId").HasColumnName("ir_attachment_id");
                    });

            entity.HasMany(d => d.ResPartners).WithMany(p => p.SlideChannelInvites)
                .UsingEntity<Dictionary<string, object>>(
                    "ResPartnerSlideChannelInviteRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("res_partner_slide_channel_invite_rel_res_partner_id_fkey"),
                    l => l.HasOne<SlideChannelInvite>().WithMany()
                        .HasForeignKey("SlideChannelInviteId")
                        .HasConstraintName("res_partner_slide_channel_invite_r_slide_channel_invite_id_fkey"),
                    j =>
                    {
                        j.HasKey("SlideChannelInviteId", "ResPartnerId").HasName("res_partner_slide_channel_invite_rel_pkey");
                        j.ToTable("res_partner_slide_channel_invite_rel", tb => tb.HasComment("RELATION BETWEEN slide_channel_invite AND res_partner"));
                        j.HasIndex(new[] { "ResPartnerId", "SlideChannelInviteId" }, "res_partner_slide_channel_inv_res_partner_id_slide_channel__idx");
                        j.IndexerProperty<int>("SlideChannelInviteId").HasColumnName("slide_channel_invite_id");
                        j.IndexerProperty<int>("ResPartnerId").HasColumnName("res_partner_id");
                    });
        });

        modelBuilder.Entity<SlideChannelPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_channel_partner_pkey");

            entity.ToTable("slide_channel_partner", tb => tb.HasComment("Channel / Partners (Members)"));

            entity.HasIndex(e => e.ChannelId, "slide_channel_partner_channel_id_index");

            entity.HasIndex(e => new { e.ChannelId, e.PartnerId }, "slide_channel_partner_channel_partner_uniq").IsUnique();

            entity.HasIndex(e => e.PartnerId, "slide_channel_partner_partner_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChannelId)
                .HasComment("Channel")
                .HasColumnName("channel_id");
            entity.Property(e => e.Completed)
                .HasComment("Is Completed")
                .HasColumnName("completed");
            entity.Property(e => e.CompletedSlidesCount)
                .HasComment("# Completed Slides")
                .HasColumnName("completed_slides_count");
            entity.Property(e => e.Completion)
                .HasComment("% Completed Slides")
                .HasColumnName("completion");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.SlideChannelPartners)
                .HasForeignKey(d => d.ChannelId)
                .HasConstraintName("slide_channel_partner_channel_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideChannelPartnerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_partner_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.SlideChannelPartners)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("slide_channel_partner_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideChannelPartnerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_partner_write_uid_fkey");
        });

        modelBuilder.Entity<SlideChannelTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_channel_tag_pkey");

            entity.ToTable("slide_channel_tag", tb => tb.HasComment("Channel/Course Tag"));

            entity.HasIndex(e => e.GroupId, "slide_channel_tag_group_id_index");

            entity.HasIndex(e => e.Sequence, "slide_channel_tag_sequence_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.GroupId)
                .HasComment("Group")
                .HasColumnName("group_id");
            entity.Property(e => e.GroupSequence)
                .HasComment("Group sequence")
                .HasColumnName("group_sequence");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideChannelTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_tag_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.SlideChannelTags)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("slide_channel_tag_group_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideChannelTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_tag_write_uid_fkey");
        });

        modelBuilder.Entity<SlideChannelTagGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_channel_tag_group_pkey");

            entity.ToTable("slide_channel_tag_group", tb => tb.HasComment("Channel/Course Groups"));

            entity.HasIndex(e => e.IsPublished, "slide_channel_tag_group_is_published_index");

            entity.HasIndex(e => e.Sequence, "slide_channel_tag_group_sequence_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Name)
                .HasComment("Group Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideChannelTagGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_tag_group_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideChannelTagGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_channel_tag_group_write_uid_fkey");
        });

        modelBuilder.Entity<SlideEmbed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_embed_pkey");

            entity.ToTable("slide_embed", tb => tb.HasComment("Embedded Slides View Counter"));

            entity.HasIndex(e => e.SlideId, "slide_embed_slide_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CountViews)
                .HasComment("# Views")
                .HasColumnName("count_views");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.SlideId)
                .HasComment("Presentation")
                .HasColumnName("slide_id");
            entity.Property(e => e.Url)
                .HasComment("Third Party Website URL")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideEmbedCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_embed_create_uid_fkey");

            entity.HasOne(d => d.Slide).WithMany(p => p.SlideEmbeds)
                .HasForeignKey(d => d.SlideId)
                .HasConstraintName("slide_embed_slide_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideEmbedWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_embed_write_uid_fkey");
        });

        modelBuilder.Entity<SlideQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_question_pkey");

            entity.ToTable("slide_question", tb => tb.HasComment("Content Quiz Question"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Question)
                .HasComment("Question Name")
                .HasColumnType("jsonb")
                .HasColumnName("question");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SlideId)
                .HasComment("Content")
                .HasColumnName("slide_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideQuestionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_question_create_uid_fkey");

            entity.HasOne(d => d.Slide).WithMany(p => p.SlideQuestions)
                .HasForeignKey(d => d.SlideId)
                .HasConstraintName("slide_question_slide_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideQuestionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_question_write_uid_fkey");
        });

        modelBuilder.Entity<SlideSlide>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_slide_pkey");

            entity.ToTable("slide_slide", tb => tb.HasComment("Slides"));

            entity.HasIndex(e => e.IsPublished, "slide_slide_is_published_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CategoryId)
                .HasComment("Section")
                .HasColumnName("category_id");
            entity.Property(e => e.ChannelId)
                .HasComment("Course")
                .HasColumnName("channel_id");
            entity.Property(e => e.CompletionTime)
                .HasComment("Duration")
                .HasColumnName("completion_time");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DatePublished)
                .HasComment("Publish Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_published");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Dislikes)
                .HasComment("Dislikes")
                .HasColumnName("dislikes");
            entity.Property(e => e.HtmlContent)
                .HasComment("HTML Content")
                .HasColumnType("jsonb")
                .HasColumnName("html_content");
            entity.Property(e => e.IsCategory)
                .HasComment("Is a category")
                .HasColumnName("is_category");
            entity.Property(e => e.IsPreview)
                .HasComment("Allow Preview")
                .HasColumnName("is_preview");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Likes)
                .HasComment("Likes")
                .HasColumnName("likes");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Title")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NbrArticle)
                .HasComment("Number of Articles")
                .HasColumnName("nbr_article");
            entity.Property(e => e.NbrCertification)
                .HasComment("Number of Certifications")
                .HasColumnName("nbr_certification");
            entity.Property(e => e.NbrDocument)
                .HasComment("Number of Documents")
                .HasColumnName("nbr_document");
            entity.Property(e => e.NbrInfographic)
                .HasComment("Number of Images")
                .HasColumnName("nbr_infographic");
            entity.Property(e => e.NbrQuiz)
                .HasComment("Number of Quizs")
                .HasColumnName("nbr_quiz");
            entity.Property(e => e.NbrVideo)
                .HasComment("Number of Videos")
                .HasColumnName("nbr_video");
            entity.Property(e => e.PublicViews)
                .HasComment("# of Public Views")
                .HasColumnName("public_views");
            entity.Property(e => e.QuizFirstAttemptReward)
                .HasComment("Reward: first attempt")
                .HasColumnName("quiz_first_attempt_reward");
            entity.Property(e => e.QuizFourthAttemptReward)
                .HasComment("Reward: every attempt after the third try")
                .HasColumnName("quiz_fourth_attempt_reward");
            entity.Property(e => e.QuizSecondAttemptReward)
                .HasComment("Reward: second attempt")
                .HasColumnName("quiz_second_attempt_reward");
            entity.Property(e => e.QuizThirdAttemptReward)
                .HasComment("Reward: third attempt")
                .HasColumnName("quiz_third_attempt_reward");
            entity.Property(e => e.SeoName)
                .HasComment("Seo name")
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SlideCategory)
                .HasComment("Category")
                .HasColumnType("character varying")
                .HasColumnName("slide_category");
            entity.Property(e => e.SlideResourceDownloadable)
                .HasComment("Allow Download")
                .HasColumnName("slide_resource_downloadable");
            entity.Property(e => e.SlideType)
                .HasComment("Slide Type")
                .HasColumnType("character varying")
                .HasColumnName("slide_type");
            entity.Property(e => e.SlideViews)
                .HasComment("# of Website Views")
                .HasColumnName("slide_views");
            entity.Property(e => e.SourceType)
                .HasComment("Source Type")
                .HasColumnType("character varying")
                .HasColumnName("source_type");
            entity.Property(e => e.SurveyId)
                .HasComment("Certification")
                .HasColumnName("survey_id");
            entity.Property(e => e.TotalSlides)
                .HasComment("Total Slides")
                .HasColumnName("total_slides");
            entity.Property(e => e.TotalViews)
                .HasComment("# Total Views")
                .HasColumnName("total_views");
            entity.Property(e => e.Url)
                .HasComment("External URL")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.UserId)
                .HasComment("Uploaded by")
                .HasColumnName("user_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasComment("Website meta description")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasComment("Website meta keywords")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg)
                .HasComment("Website opengraph image")
                .HasColumnType("character varying")
                .HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasComment("Website meta title")
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.InverseCategory)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_category_id_fkey");

            entity.HasOne(d => d.Channel).WithMany(p => p.SlideSlides)
                .HasForeignKey(d => d.ChannelId)
                .HasConstraintName("slide_slide_channel_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideSlideCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.SlideSlides)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Survey).WithMany(p => p.SlideSlides)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_survey_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.SlideSlideUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideSlideWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_write_uid_fkey");

            entity.HasMany(d => d.Tags).WithMany(p => p.Slides)
                .UsingEntity<Dictionary<string, object>>(
                    "RelSlideTag",
                    r => r.HasOne<SlideTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("rel_slide_tag_tag_id_fkey"),
                    l => l.HasOne<SlideSlide>().WithMany()
                        .HasForeignKey("SlideId")
                        .HasConstraintName("rel_slide_tag_slide_id_fkey"),
                    j =>
                    {
                        j.HasKey("SlideId", "TagId").HasName("rel_slide_tag_pkey");
                        j.ToTable("rel_slide_tag", tb => tb.HasComment("RELATION BETWEEN slide_slide AND slide_tag"));
                        j.HasIndex(new[] { "TagId", "SlideId" }, "rel_slide_tag_tag_id_slide_id_idx");
                        j.IndexerProperty<int>("SlideId").HasColumnName("slide_id");
                        j.IndexerProperty<int>("TagId").HasColumnName("tag_id");
                    });
        });

        modelBuilder.Entity<SlideSlidePartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_slide_partner_pkey");

            entity.ToTable("slide_slide_partner", tb => tb.HasComment("Slide / Partner decorated m2m"));

            entity.HasIndex(e => e.ChannelId, "slide_slide_partner_channel_id_index");

            entity.HasIndex(e => e.PartnerId, "slide_slide_partner_partner_id_index");

            entity.HasIndex(e => e.SlideId, "slide_slide_partner_slide_id_index");

            entity.HasIndex(e => new { e.SlideId, e.PartnerId }, "slide_slide_partner_slide_partner_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChannelId)
                .HasComment("Channel")
                .HasColumnName("channel_id");
            entity.Property(e => e.Completed)
                .HasComment("Completed")
                .HasColumnName("completed");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.QuizAttemptsCount)
                .HasComment("Quiz attempts count")
                .HasColumnName("quiz_attempts_count");
            entity.Property(e => e.SlideId)
                .HasComment("Content")
                .HasColumnName("slide_id");
            entity.Property(e => e.SurveyScoringSuccess)
                .HasComment("Certification Succeeded")
                .HasColumnName("survey_scoring_success");
            entity.Property(e => e.Vote)
                .HasComment("Vote")
                .HasColumnName("vote");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.SlideSlidePartners)
                .HasForeignKey(d => d.ChannelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("slide_slide_partner_channel_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideSlidePartnerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_partner_create_uid_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.SlideSlidePartners)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("slide_slide_partner_partner_id_fkey");

            entity.HasOne(d => d.Slide).WithMany(p => p.SlideSlidePartners)
                .HasForeignKey(d => d.SlideId)
                .HasConstraintName("slide_slide_partner_slide_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideSlidePartnerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_partner_write_uid_fkey");
        });

        modelBuilder.Entity<SlideSlideResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_slide_resource_pkey");

            entity.ToTable("slide_slide_resource", tb => tb.HasComment("Additional resource for a particular slide"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FileName)
                .HasComment("File Name")
                .HasColumnType("character varying")
                .HasColumnName("file_name");
            entity.Property(e => e.Link)
                .HasComment("Link")
                .HasColumnType("character varying")
                .HasColumnName("link");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceType)
                .HasComment("Resource Type")
                .HasColumnType("character varying")
                .HasColumnName("resource_type");
            entity.Property(e => e.SlideId)
                .HasComment("Slide")
                .HasColumnName("slide_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideSlideResourceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_resource_create_uid_fkey");

            entity.HasOne(d => d.Slide).WithMany(p => p.SlideSlideResources)
                .HasForeignKey(d => d.SlideId)
                .HasConstraintName("slide_slide_resource_slide_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideSlideResourceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_slide_resource_write_uid_fkey");
        });

        modelBuilder.Entity<SlideTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slide_tag_pkey");

            entity.ToTable("slide_tag", tb => tb.HasComment("Slide Tag"));

            entity.HasIndex(e => e.Name, "slide_tag_slide_tag_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SlideTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SlideTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("slide_tag_write_uid_fkey");
        });

        modelBuilder.Entity<SmsComposer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_composer_pkey");

            entity.ToTable("sms_composer", tb => tb.HasComment("Send SMS Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Body)
                .HasComment("Message")
                .HasColumnName("body");
            entity.Property(e => e.CompositionMode)
                .HasComment("Composition Mode")
                .HasColumnType("character varying")
                .HasColumnName("composition_mode");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailingId)
                .HasComment("Mailing")
                .HasColumnName("mailing_id");
            entity.Property(e => e.MassForceSend)
                .HasComment("Send directly")
                .HasColumnName("mass_force_send");
            entity.Property(e => e.MassKeepLog)
                .HasComment("Keep a note on document")
                .HasColumnName("mass_keep_log");
            entity.Property(e => e.MassSmsAllowUnsubscribe)
                .HasComment("Include opt-out link")
                .HasColumnName("mass_sms_allow_unsubscribe");
            entity.Property(e => e.MassUseBlacklist)
                .HasComment("Use blacklist")
                .HasColumnName("mass_use_blacklist");
            entity.Property(e => e.NumberFieldName)
                .HasComment("Number Field")
                .HasColumnType("character varying")
                .HasColumnName("number_field_name");
            entity.Property(e => e.Numbers)
                .HasComment("Recipients (Numbers)")
                .HasColumnType("character varying")
                .HasColumnName("numbers");
            entity.Property(e => e.RecipientSingleNumberItf)
                .HasComment("Recipient Number")
                .HasColumnType("character varying")
                .HasColumnName("recipient_single_number_itf");
            entity.Property(e => e.ResId)
                .HasComment("Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.ResIds)
                .HasComment("Document IDs")
                .HasColumnType("character varying")
                .HasColumnName("res_ids");
            entity.Property(e => e.ResModel)
                .HasComment("Document Model Name")
                .HasColumnType("character varying")
                .HasColumnName("res_model");
            entity.Property(e => e.TemplateId)
                .HasComment("Use Template")
                .HasColumnName("template_id");
            entity.Property(e => e.UtmCampaignId)
                .HasComment("Campaign")
                .HasColumnName("utm_campaign_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SmsComposerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_create_uid_fkey");

            entity.HasOne(d => d.Mailing).WithMany(p => p.SmsComposers)
                .HasForeignKey(d => d.MailingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_mailing_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.SmsComposers)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_template_id_fkey");

            entity.HasOne(d => d.UtmCampaign).WithMany(p => p.SmsComposers)
                .HasForeignKey(d => d.UtmCampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_utm_campaign_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SmsComposerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_write_uid_fkey");
        });

        modelBuilder.Entity<SmsResend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_resend_pkey");

            entity.ToTable("sms_resend", tb => tb.HasComment("SMS Resend"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MailMessageId)
                .HasComment("Message")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SmsResendCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.SmsResends)
                .HasForeignKey(d => d.MailMessageId)
                .HasConstraintName("sms_resend_mail_message_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SmsResendWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_write_uid_fkey");
        });

        modelBuilder.Entity<SmsResendRecipient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_resend_recipient_pkey");

            entity.ToTable("sms_resend_recipient", tb => tb.HasComment("Resend Notification"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.NotificationId)
                .HasComment("Notification")
                .HasColumnName("notification_id");
            entity.Property(e => e.PartnerName)
                .HasComment("Recipient Name")
                .HasColumnType("character varying")
                .HasColumnName("partner_name");
            entity.Property(e => e.Resend)
                .HasComment("Try Again")
                .HasColumnName("resend");
            entity.Property(e => e.SmsNumber)
                .HasComment("Phone Number")
                .HasColumnType("character varying")
                .HasColumnName("sms_number");
            entity.Property(e => e.SmsResendId)
                .HasComment("Sms Resend")
                .HasColumnName("sms_resend_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SmsResendRecipientCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_recipient_create_uid_fkey");

            entity.HasOne(d => d.Notification).WithMany(p => p.SmsResendRecipients)
                .HasForeignKey(d => d.NotificationId)
                .HasConstraintName("sms_resend_recipient_notification_id_fkey");

            entity.HasOne(d => d.SmsResend).WithMany(p => p.SmsResendRecipients)
                .HasForeignKey(d => d.SmsResendId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sms_resend_recipient_sms_resend_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SmsResendRecipientWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_recipient_write_uid_fkey");
        });

        modelBuilder.Entity<SmsSm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_sms_pkey");

            entity.ToTable("sms_sms", tb => tb.HasComment("Outgoing SMS"));

            entity.HasIndex(e => e.MailMessageId, "sms_sms_mail_message_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Body)
                .HasComment("Body")
                .HasColumnName("body");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FailureType)
                .HasComment("Failure Type")
                .HasColumnType("character varying")
                .HasColumnName("failure_type");
            entity.Property(e => e.MailMessageId)
                .HasComment("Mail Message")
                .HasColumnName("mail_message_id");
            entity.Property(e => e.MailingId)
                .HasComment("Mass Mailing")
                .HasColumnName("mailing_id");
            entity.Property(e => e.Number)
                .HasComment("Number")
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.PartnerId)
                .HasComment("Customer")
                .HasColumnName("partner_id");
            entity.Property(e => e.State)
                .HasComment("SMS Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SmsSmCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.SmsSms)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_mail_message_id_fkey");

            entity.HasOne(d => d.Mailing).WithMany(p => p.SmsSms)
                .HasForeignKey(d => d.MailingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_mailing_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.SmsSms)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_partner_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SmsSmWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_write_uid_fkey");
        });

        modelBuilder.Entity<SmsTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_template_pkey");

            entity.ToTable("sms_template", tb => tb.HasComment("SMS Templates"));

            entity.HasIndex(e => e.Model, "sms_template_model_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Body)
                .HasComment("Body")
                .HasColumnType("jsonb")
                .HasColumnName("body");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.Model)
                .HasComment("Related Document Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.ModelId)
                .HasComment("Applies to")
                .HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.SidebarActionId)
                .HasComment("Sidebar action")
                .HasColumnName("sidebar_action_id");
            entity.Property(e => e.TemplateFs)
                .HasComment("Template Filename")
                .HasColumnType("character varying")
                .HasColumnName("template_fs");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SmsTemplateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.SmsTemplates)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("sms_template_model_id_fkey");

            entity.HasOne(d => d.SidebarAction).WithMany(p => p.SmsTemplates)
                .HasForeignKey(d => d.SidebarActionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_sidebar_action_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SmsTemplateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_write_uid_fkey");
        });

        modelBuilder.Entity<SmsTemplatePreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_template_preview_pkey");

            entity.ToTable("sms_template_preview", tb => tb.HasComment("SMS Template Preview"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Lang)
                .HasComment("Template Preview Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.ResourceRef)
                .HasComment("Record reference")
                .HasColumnType("character varying")
                .HasColumnName("resource_ref");
            entity.Property(e => e.SmsTemplateId)
                .HasComment("Sms Template")
                .HasColumnName("sms_template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SmsTemplatePreviewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_preview_create_uid_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.SmsTemplatePreviews)
                .HasForeignKey(d => d.SmsTemplateId)
                .HasConstraintName("sms_template_preview_sms_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SmsTemplatePreviewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_preview_write_uid_fkey");
        });

        modelBuilder.Entity<SmsTemplateReset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_template_reset_pkey");

            entity.ToTable("sms_template_reset", tb => tb.HasComment("SMS Template Reset"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SmsTemplateResetCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_reset_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SmsTemplateResetWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_reset_write_uid_fkey");

            entity.HasMany(d => d.SmsTemplates).WithMany(p => p.SmsTemplateResets)
                .UsingEntity<Dictionary<string, object>>(
                    "SmsTemplateSmsTemplateResetRel",
                    r => r.HasOne<SmsTemplate>().WithMany()
                        .HasForeignKey("SmsTemplateId")
                        .HasConstraintName("sms_template_sms_template_reset_rel_sms_template_id_fkey"),
                    l => l.HasOne<SmsTemplateReset>().WithMany()
                        .HasForeignKey("SmsTemplateResetId")
                        .HasConstraintName("sms_template_sms_template_reset_rel_sms_template_reset_id_fkey"),
                    j =>
                    {
                        j.HasKey("SmsTemplateResetId", "SmsTemplateId").HasName("sms_template_sms_template_reset_rel_pkey");
                        j.ToTable("sms_template_sms_template_reset_rel", tb => tb.HasComment("RELATION BETWEEN sms_template_reset AND sms_template"));
                        j.HasIndex(new[] { "SmsTemplateId", "SmsTemplateResetId" }, "sms_template_sms_template_res_sms_template_id_sms_template__idx");
                        j.IndexerProperty<int>("SmsTemplateResetId").HasColumnName("sms_template_reset_id");
                        j.IndexerProperty<int>("SmsTemplateId").HasColumnName("sms_template_id");
                    });
        });

        modelBuilder.Entity<SnailmailConfirmInvoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_confirm_invoice_pkey");

            entity.ToTable("snailmail_confirm_invoice", tb => tb.HasComment("Snailmail Confirm Invoice"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InvoiceSendId)
                .HasComment("Invoice Send")
                .HasColumnName("invoice_send_id");
            entity.Property(e => e.ModelName)
                .HasComment("Model Name")
                .HasColumnType("character varying")
                .HasColumnName("model_name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SnailmailConfirmInvoiceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_confirm_invoice_create_uid_fkey");

            entity.HasOne(d => d.InvoiceSend).WithMany(p => p.SnailmailConfirmInvoices)
                .HasForeignKey(d => d.InvoiceSendId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_confirm_invoice_invoice_send_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SnailmailConfirmInvoiceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_confirm_invoice_write_uid_fkey");
        });

        modelBuilder.Entity<SnailmailLetter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_letter_pkey");

            entity.ToTable("snailmail_letter", tb => tb.HasComment("Snailmail Letter"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AttachmentId)
                .HasComment("Attachment")
                .HasColumnName("attachment_id");
            entity.Property(e => e.City)
                .HasComment("City")
                .HasColumnType("character varying")
                .HasColumnName("city");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.Cover)
                .HasComment("Cover Page")
                .HasColumnName("cover");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Duplex)
                .HasComment("Both side")
                .HasColumnName("duplex");
            entity.Property(e => e.ErrorCode)
                .HasComment("Error")
                .HasColumnType("character varying")
                .HasColumnName("error_code");
            entity.Property(e => e.InfoMsg)
                .HasComment("Information")
                .HasColumnType("character varying")
                .HasColumnName("info_msg");
            entity.Property(e => e.MessageId)
                .HasComment("Snailmail Status Message")
                .HasColumnName("message_id");
            entity.Property(e => e.Model)
                .HasComment("Model")
                .HasColumnType("character varying")
                .HasColumnName("model");
            entity.Property(e => e.PartnerId)
                .HasComment("Recipient")
                .HasColumnName("partner_id");
            entity.Property(e => e.ReportTemplate)
                .HasComment("Optional report to print and attach")
                .HasColumnName("report_template");
            entity.Property(e => e.ResId)
                .HasComment("Document ID")
                .HasColumnName("res_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.StateId)
                .HasComment("State")
                .HasColumnName("state_id");
            entity.Property(e => e.Street)
                .HasComment("Street")
                .HasColumnType("character varying")
                .HasColumnName("street");
            entity.Property(e => e.Street2)
                .HasComment("Street2")
                .HasColumnType("character varying")
                .HasColumnName("street2");
            entity.Property(e => e.UserId)
                .HasComment("Sent by")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.Zip)
                .HasComment("Zip")
                .HasColumnType("character varying")
                .HasColumnName("zip");

            entity.HasOne(d => d.Attachment).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.AttachmentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("snailmail_letter_attachment_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("snailmail_letter_company_id_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SnailmailLetterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_message_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("snailmail_letter_partner_id_fkey");

            entity.HasOne(d => d.ReportTemplateNavigation).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.ReportTemplate)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_report_template_fkey");

            entity.HasOne(d => d.StateNavigation).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_state_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.SnailmailLetterUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SnailmailLetterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_write_uid_fkey");
        });

        modelBuilder.Entity<SnailmailLetterFormatError>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_letter_format_error_pkey");

            entity.ToTable("snailmail_letter_format_error", tb => tb.HasComment("Format Error Sending a Snailmail Letter"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MessageId)
                .HasComment("Message")
                .HasColumnName("message_id");
            entity.Property(e => e.SnailmailCover)
                .HasComment("Add a Cover Page")
                .HasColumnName("snailmail_cover");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SnailmailLetterFormatErrorCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_format_error_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.SnailmailLetterFormatErrors)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_format_error_message_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SnailmailLetterFormatErrorWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_format_error_write_uid_fkey");
        });

        modelBuilder.Entity<SnailmailLetterMissingRequiredField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_letter_missing_required_fields_pkey");

            entity.ToTable("snailmail_letter_missing_required_fields", tb => tb.HasComment("Update address of partner"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.City)
                .HasComment("City")
                .HasColumnType("character varying")
                .HasColumnName("city");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LetterId)
                .HasComment("Letter")
                .HasColumnName("letter_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Partner")
                .HasColumnName("partner_id");
            entity.Property(e => e.StateId)
                .HasComment("State")
                .HasColumnName("state_id");
            entity.Property(e => e.Street)
                .HasComment("Street")
                .HasColumnType("character varying")
                .HasColumnName("street");
            entity.Property(e => e.Street2)
                .HasComment("Street2")
                .HasColumnType("character varying")
                .HasColumnName("street2");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");
            entity.Property(e => e.Zip)
                .HasComment("Zip")
                .HasColumnType("character varying")
                .HasColumnName("zip");

            entity.HasOne(d => d.Country).WithMany(p => p.SnailmailLetterMissingRequiredFields)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SnailmailLetterMissingRequiredFieldCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_create_uid_fkey");

            entity.HasOne(d => d.Letter).WithMany(p => p.SnailmailLetterMissingRequiredFields)
                .HasForeignKey(d => d.LetterId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_letter_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.SnailmailLetterMissingRequiredFields)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_partner_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.SnailmailLetterMissingRequiredFields)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_state_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SnailmailLetterMissingRequiredFieldWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_write_uid_fkey");
        });

        modelBuilder.Entity<SpreadsheetDashboard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("spreadsheet_dashboard_pkey");

            entity.ToTable("spreadsheet_dashboard", tb => tb.HasComment("Spreadsheet Dashboard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DashboardGroupId)
                .HasComment("Dashboard Group")
                .HasColumnName("dashboard_group_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SpreadsheetDashboardCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_create_uid_fkey");

            entity.HasOne(d => d.DashboardGroup).WithMany(p => p.SpreadsheetDashboards)
                .HasForeignKey(d => d.DashboardGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("spreadsheet_dashboard_dashboard_group_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SpreadsheetDashboardWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_write_uid_fkey");

            entity.HasMany(d => d.ResGroups).WithMany(p => p.SpreadsheetDashboards)
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsSpreadsheetDashboardRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("ResGroupsId")
                        .HasConstraintName("res_groups_spreadsheet_dashboard_rel_res_groups_id_fkey"),
                    l => l.HasOne<SpreadsheetDashboard>().WithMany()
                        .HasForeignKey("SpreadsheetDashboardId")
                        .HasConstraintName("res_groups_spreadsheet_dashboard__spreadsheet_dashboard_id_fkey"),
                    j =>
                    {
                        j.HasKey("SpreadsheetDashboardId", "ResGroupsId").HasName("res_groups_spreadsheet_dashboard_rel_pkey");
                        j.ToTable("res_groups_spreadsheet_dashboard_rel", tb => tb.HasComment("RELATION BETWEEN spreadsheet_dashboard AND res_groups"));
                        j.HasIndex(new[] { "ResGroupsId", "SpreadsheetDashboardId" }, "res_groups_spreadsheet_dashbo_res_groups_id_spreadsheet_das_idx");
                        j.IndexerProperty<int>("SpreadsheetDashboardId").HasColumnName("spreadsheet_dashboard_id");
                        j.IndexerProperty<int>("ResGroupsId").HasColumnName("res_groups_id");
                    });
        });

        modelBuilder.Entity<SpreadsheetDashboardGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("spreadsheet_dashboard_group_pkey");

            entity.ToTable("spreadsheet_dashboard_group", tb => tb.HasComment("Group of dashboards"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SpreadsheetDashboardGroupCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_group_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SpreadsheetDashboardGroupWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_group_write_uid_fkey");
        });

        modelBuilder.Entity<StockAssignSerial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_assign_serial_pkey");

            entity.ToTable("stock_assign_serial", tb => tb.HasComment("Stock Assign Serial Numbers"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ExpectedQty)
                .HasComment("Expected Quantity")
                .HasColumnName("expected_qty");
            entity.Property(e => e.MoveId)
                .HasComment("Move")
                .HasColumnName("move_id");
            entity.Property(e => e.MultipleLotComponentsNames)
                .HasComment("Multiple Lot Components Names")
                .HasColumnName("multiple_lot_components_names");
            entity.Property(e => e.NextSerialCount)
                .HasComment("Number of SN")
                .HasColumnName("next_serial_count");
            entity.Property(e => e.NextSerialNumber)
                .HasComment("First SN")
                .HasColumnType("character varying")
                .HasColumnName("next_serial_number");
            entity.Property(e => e.ProducedQty)
                .HasComment("Produced Quantity")
                .HasColumnName("produced_qty");
            entity.Property(e => e.ProductionId)
                .HasComment("Production")
                .HasColumnName("production_id");
            entity.Property(e => e.SerialNumbers)
                .HasComment("Produced Serial Numbers")
                .HasColumnName("serial_numbers");
            entity.Property(e => e.ShowApply)
                .HasComment("Show Apply")
                .HasColumnName("show_apply");
            entity.Property(e => e.ShowBackorders)
                .HasComment("Show Backorders")
                .HasColumnName("show_backorders");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockAssignSerialCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_create_uid_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockAssignSerials)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_move_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockAssignSerials)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_production_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockAssignSerialWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_write_uid_fkey");
        });

        modelBuilder.Entity<StockBackorderConfirmation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_backorder_confirmation_pkey");

            entity.ToTable("stock_backorder_confirmation", tb => tb.HasComment("Backorder Confirmation"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ShowTransfers)
                .HasComment("Show Transfers")
                .HasColumnName("show_transfers");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockBackorderConfirmationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockBackorderConfirmationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_write_uid_fkey");

            entity.HasMany(d => d.StockPickings).WithMany(p => p.StockBackorderConfirmations)
                .UsingEntity<Dictionary<string, object>>(
                    "StockPickingBackorderRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("stock_picking_backorder_rel_stock_picking_id_fkey"),
                    l => l.HasOne<StockBackorderConfirmation>().WithMany()
                        .HasForeignKey("StockBackorderConfirmationId")
                        .HasConstraintName("stock_picking_backorder_rel_stock_backorder_confirmation_i_fkey"),
                    j =>
                    {
                        j.HasKey("StockBackorderConfirmationId", "StockPickingId").HasName("stock_picking_backorder_rel_pkey");
                        j.ToTable("stock_picking_backorder_rel", tb => tb.HasComment("RELATION BETWEEN stock_backorder_confirmation AND stock_picking"));
                        j.HasIndex(new[] { "StockPickingId", "StockBackorderConfirmationId" }, "stock_picking_backorder_rel_stock_picking_id_stock_backorde_idx");
                        j.IndexerProperty<int>("StockBackorderConfirmationId").HasColumnName("stock_backorder_confirmation_id");
                        j.IndexerProperty<int>("StockPickingId").HasColumnName("stock_picking_id");
                    });
        });

        modelBuilder.Entity<StockBackorderConfirmationLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_backorder_confirmation_line_pkey");

            entity.ToTable("stock_backorder_confirmation_line", tb => tb.HasComment("Backorder Confirmation Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BackorderConfirmationId)
                .HasComment("Immediate Transfer")
                .HasColumnName("backorder_confirmation_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PickingId)
                .HasComment("Transfer")
                .HasColumnName("picking_id");
            entity.Property(e => e.ToBackorder)
                .HasComment("To Backorder")
                .HasColumnName("to_backorder");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.BackorderConfirmation).WithMany(p => p.StockBackorderConfirmationLines)
                .HasForeignKey(d => d.BackorderConfirmationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_lin_backorder_confirmation_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockBackorderConfirmationLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_line_create_uid_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockBackorderConfirmationLines)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_line_picking_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockBackorderConfirmationLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockChangeProductQty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_change_product_qty_pkey");

            entity.ToTable("stock_change_product_qty", tb => tb.HasComment("Change Product Quantity"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.NewQuantity)
                .HasComment("New Quantity on Hand")
                .HasColumnName("new_quantity");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockChangeProductQtyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_change_product_qty_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockChangeProductQties)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_change_product_qty_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.StockChangeProductQties)
                .HasForeignKey(d => d.ProductTmplId)
                .HasConstraintName("stock_change_product_qty_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockChangeProductQtyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_change_product_qty_write_uid_fkey");
        });

        modelBuilder.Entity<StockImmediateTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_immediate_transfer_pkey");

            entity.ToTable("stock_immediate_transfer", tb => tb.HasComment("Immediate Transfer"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ShowTransfers)
                .HasComment("Show Transfers")
                .HasColumnName("show_transfers");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockImmediateTransferCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockImmediateTransferWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_write_uid_fkey");

            entity.HasMany(d => d.StockPickings).WithMany(p => p.StockImmediateTransfers)
                .UsingEntity<Dictionary<string, object>>(
                    "StockPickingTransferRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("stock_picking_transfer_rel_stock_picking_id_fkey"),
                    l => l.HasOne<StockImmediateTransfer>().WithMany()
                        .HasForeignKey("StockImmediateTransferId")
                        .HasConstraintName("stock_picking_transfer_rel_stock_immediate_transfer_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockImmediateTransferId", "StockPickingId").HasName("stock_picking_transfer_rel_pkey");
                        j.ToTable("stock_picking_transfer_rel", tb => tb.HasComment("RELATION BETWEEN stock_immediate_transfer AND stock_picking"));
                        j.HasIndex(new[] { "StockPickingId", "StockImmediateTransferId" }, "stock_picking_transfer_rel_stock_picking_id_stock_immediate_idx");
                        j.IndexerProperty<int>("StockImmediateTransferId").HasColumnName("stock_immediate_transfer_id");
                        j.IndexerProperty<int>("StockPickingId").HasColumnName("stock_picking_id");
                    });
        });

        modelBuilder.Entity<StockImmediateTransferLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_immediate_transfer_line_pkey");

            entity.ToTable("stock_immediate_transfer_line", tb => tb.HasComment("Immediate Transfer Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ImmediateTransferId)
                .HasComment("Immediate Transfer")
                .HasColumnName("immediate_transfer_id");
            entity.Property(e => e.PickingId)
                .HasComment("Transfer")
                .HasColumnName("picking_id");
            entity.Property(e => e.ToImmediate)
                .HasComment("To Process")
                .HasColumnName("to_immediate");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockImmediateTransferLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_line_create_uid_fkey");

            entity.HasOne(d => d.ImmediateTransfer).WithMany(p => p.StockImmediateTransferLines)
                .HasForeignKey(d => d.ImmediateTransferId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_immediate_transfer_line_immediate_transfer_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockImmediateTransferLines)
                .HasForeignKey(d => d.PickingId)
                .HasConstraintName("stock_immediate_transfer_line_picking_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockImmediateTransferLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockInventoryAdjustmentName>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_inventory_adjustment_name_pkey");

            entity.ToTable("stock_inventory_adjustment_name", tb => tb.HasComment("Inventory Adjustment Reference / Reason"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InventoryAdjustmentName)
                .HasComment("Inventory Adjustment Name")
                .HasColumnType("character varying")
                .HasColumnName("inventory_adjustment_name");
            entity.Property(e => e.ShowInfo)
                .HasComment("Show warning")
                .HasColumnName("show_info");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockInventoryAdjustmentNameCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_adjustment_name_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockInventoryAdjustmentNameWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_adjustment_name_write_uid_fkey");

            entity.HasMany(d => d.StockQuants).WithMany(p => p.StockInventoryAdjustmentNames)
                .UsingEntity<Dictionary<string, object>>(
                    "StockInventoryAdjustmentNameStockQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_inventory_adjustment_name_stock_quant_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryAdjustmentName>().WithMany()
                        .HasForeignKey("StockInventoryAdjustmentNameId")
                        .HasConstraintName("stock_inventory_adjustment_na_stock_inventory_adjustment_n_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryAdjustmentNameId", "StockQuantId").HasName("stock_inventory_adjustment_name_stock_quant_rel_pkey");
                        j.ToTable("stock_inventory_adjustment_name_stock_quant_rel", tb => tb.HasComment("RELATION BETWEEN stock_inventory_adjustment_name AND stock_quant"));
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryAdjustmentNameId" }, "stock_inventory_adjustment_na_stock_quant_id_stock_inventor_idx");
                        j.IndexerProperty<int>("StockInventoryAdjustmentNameId").HasColumnName("stock_inventory_adjustment_name_id");
                        j.IndexerProperty<int>("StockQuantId").HasColumnName("stock_quant_id");
                    });
        });

        modelBuilder.Entity<StockInventoryConflict>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_inventory_conflict_pkey");

            entity.ToTable("stock_inventory_conflict", tb => tb.HasComment("Conflict in Inventory"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockInventoryConflictCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_conflict_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockInventoryConflictWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_conflict_write_uid_fkey");

            entity.HasMany(d => d.StockQuants).WithMany(p => p.StockInventoryConflicts)
                .UsingEntity<Dictionary<string, object>>(
                    "StockConflictQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_conflict_quant_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryConflict>().WithMany()
                        .HasForeignKey("StockInventoryConflictId")
                        .HasConstraintName("stock_conflict_quant_rel_stock_inventory_conflict_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryConflictId", "StockQuantId").HasName("stock_conflict_quant_rel_pkey");
                        j.ToTable("stock_conflict_quant_rel", tb => tb.HasComment("RELATION BETWEEN stock_inventory_conflict AND stock_quant"));
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryConflictId" }, "stock_conflict_quant_rel_stock_quant_id_stock_inventory_con_idx");
                        j.IndexerProperty<int>("StockInventoryConflictId").HasColumnName("stock_inventory_conflict_id");
                        j.IndexerProperty<int>("StockQuantId").HasColumnName("stock_quant_id");
                    });

            entity.HasMany(d => d.StockQuantsNavigation).WithMany(p => p.StockInventoryConflictsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "StockInventoryConflictStockQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_inventory_conflict_stock_quant_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryConflict>().WithMany()
                        .HasForeignKey("StockInventoryConflictId")
                        .HasConstraintName("stock_inventory_conflict_stock_stock_inventory_conflict_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryConflictId", "StockQuantId").HasName("stock_inventory_conflict_stock_quant_rel_pkey");
                        j.ToTable("stock_inventory_conflict_stock_quant_rel", tb => tb.HasComment("RELATION BETWEEN stock_inventory_conflict AND stock_quant"));
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryConflictId" }, "stock_inventory_conflict_stoc_stock_quant_id_stock_inventor_idx");
                        j.IndexerProperty<int>("StockInventoryConflictId").HasColumnName("stock_inventory_conflict_id");
                        j.IndexerProperty<int>("StockQuantId").HasColumnName("stock_quant_id");
                    });
        });

        modelBuilder.Entity<StockInventoryWarning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_inventory_warning_pkey");

            entity.ToTable("stock_inventory_warning", tb => tb.HasComment("Inventory Adjustment Warning"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockInventoryWarningCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_warning_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockInventoryWarningWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_warning_write_uid_fkey");

            entity.HasMany(d => d.StockQuants).WithMany(p => p.StockInventoryWarnings)
                .UsingEntity<Dictionary<string, object>>(
                    "StockInventoryWarningStockQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_inventory_warning_stock_quant_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryWarning>().WithMany()
                        .HasForeignKey("StockInventoryWarningId")
                        .HasConstraintName("stock_inventory_warning_stock_q_stock_inventory_warning_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryWarningId", "StockQuantId").HasName("stock_inventory_warning_stock_quant_rel_pkey");
                        j.ToTable("stock_inventory_warning_stock_quant_rel", tb => tb.HasComment("RELATION BETWEEN stock_inventory_warning AND stock_quant"));
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryWarningId" }, "stock_inventory_warning_stock_stock_quant_id_stock_inventor_idx");
                        j.IndexerProperty<int>("StockInventoryWarningId").HasColumnName("stock_inventory_warning_id");
                        j.IndexerProperty<int>("StockQuantId").HasColumnName("stock_quant_id");
                    });
        });

        modelBuilder.Entity<StockLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_location_pkey");

            entity.ToTable("stock_location", tb => tb.HasComment("Inventory Locations"));

            entity.HasIndex(e => new { e.Barcode, e.CompanyId }, "stock_location_barcode_company_uniq").IsUnique();

            entity.HasIndex(e => e.CompanyId, "stock_location_company_id_index");

            entity.HasIndex(e => e.LocationId, "stock_location_location_id_index");

            entity.HasIndex(e => e.ParentPath, "stock_location_parent_path_index");

            entity.HasIndex(e => e.Usage, "stock_location_usage_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Barcode)
                .HasComment("Barcode")
                .HasColumnType("character varying")
                .HasColumnName("barcode");
            entity.Property(e => e.Comment)
                .HasComment("Additional Information")
                .HasColumnName("comment");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CompleteName)
                .HasComment("Full Location Name")
                .HasColumnType("character varying")
                .HasColumnName("complete_name");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CyclicInventoryFrequency)
                .HasComment("Inventory Frequency (Days)")
                .HasColumnName("cyclic_inventory_frequency");
            entity.Property(e => e.LastInventoryDate)
                .HasComment("Last Effective Inventory")
                .HasColumnName("last_inventory_date");
            entity.Property(e => e.LocationId)
                .HasComment("Parent Location")
                .HasColumnName("location_id");
            entity.Property(e => e.Name)
                .HasComment("Location Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NextInventoryDate)
                .HasComment("Next Expected Inventory")
                .HasColumnName("next_inventory_date");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.Posx)
                .HasComment("Corridor (X)")
                .HasColumnName("posx");
            entity.Property(e => e.Posy)
                .HasComment("Shelves (Y)")
                .HasColumnName("posy");
            entity.Property(e => e.Posz)
                .HasComment("Height (Z)")
                .HasColumnName("posz");
            entity.Property(e => e.RemovalStrategyId)
                .HasComment("Removal Strategy")
                .HasColumnName("removal_strategy_id");
            entity.Property(e => e.ReplenishLocation)
                .HasComment("Replenish Location")
                .HasColumnName("replenish_location");
            entity.Property(e => e.ReturnLocation)
                .HasComment("Is a Return Location?")
                .HasColumnName("return_location");
            entity.Property(e => e.ScrapLocation)
                .HasComment("Is a Scrap Location?")
                .HasColumnName("scrap_location");
            entity.Property(e => e.StorageCategoryId)
                .HasComment("Storage Category")
                .HasColumnName("storage_category_id");
            entity.Property(e => e.Usage)
                .HasComment("Location Type")
                .HasColumnType("character varying")
                .HasColumnName("usage");
            entity.Property(e => e.ValuationInAccountId)
                .HasComment("Stock Valuation Account (Incoming)")
                .HasColumnName("valuation_in_account_id");
            entity.Property(e => e.ValuationOutAccountId)
                .HasComment("Stock Valuation Account (Outgoing)")
                .HasColumnName("valuation_out_account_id");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockLocationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.InverseLocation)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_location_location_id_fkey");

            entity.HasOne(d => d.RemovalStrategy).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.RemovalStrategyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_removal_strategy_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.StorageCategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_storage_category_id_fkey");

            entity.HasOne(d => d.ValuationInAccount).WithMany(p => p.StockLocationValuationInAccounts)
                .HasForeignKey(d => d.ValuationInAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_valuation_in_account_id_fkey");

            entity.HasOne(d => d.ValuationOutAccount).WithMany(p => p.StockLocationValuationOutAccounts)
                .HasForeignKey(d => d.ValuationOutAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_valuation_out_account_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_warehouse_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockLocationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_write_uid_fkey");
        });

        modelBuilder.Entity<StockLot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_lot_pkey");

            entity.ToTable("stock_lot", tb => tb.HasComment("Lot/Serial"));

            entity.HasIndex(e => e.CompanyId, "stock_lot_company_id_index");

            entity.HasIndex(e => e.Name, "stock_lot_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ProductId, "stock_lot_product_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasComment("Lot/Serial Number")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Description")
                .HasColumnName("note");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.Ref)
                .HasComment("Internal Reference")
                .HasColumnType("character varying")
                .HasColumnName("ref");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockLots)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_lot_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockLotCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.StockLots)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockLots)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_lot_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.StockLots)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_product_uom_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockLotWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_write_uid_fkey");
        });

        modelBuilder.Entity<StockMove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_move_pkey");

            entity.ToTable("stock_move", tb => tb.HasComment("Stock Move"));

            entity.HasIndex(e => e.AnalyticAccountLineId, "stock_move_analytic_account_line_id_index").HasFilter("(analytic_account_line_id IS NOT NULL)");

            entity.HasIndex(e => e.CompanyId, "stock_move_company_id_index");

            entity.HasIndex(e => e.CreatedProductionId, "stock_move_created_production_id_index");

            entity.HasIndex(e => e.CreatedPurchaseLineId, "stock_move_created_purchase_line_id_index").HasFilter("(created_purchase_line_id IS NOT NULL)");

            entity.HasIndex(e => e.Date, "stock_move_date_index");

            entity.HasIndex(e => e.GroupId, "stock_move_group_id_index");

            entity.HasIndex(e => e.LocationDestId, "stock_move_location_dest_id_index");

            entity.HasIndex(e => e.LocationId, "stock_move_location_id_index");

            entity.HasIndex(e => e.OrderpointId, "stock_move_orderpoint_id_index");

            entity.HasIndex(e => e.OriginReturnedMoveId, "stock_move_origin_returned_move_id_index");

            entity.HasIndex(e => e.PickingId, "stock_move_picking_id_index");

            entity.HasIndex(e => e.ProductId, "stock_move_product_id_index");

            entity.HasIndex(e => new { e.ProductId, e.LocationId, e.LocationDestId, e.CompanyId, e.State }, "stock_move_product_location_index");

            entity.HasIndex(e => e.ProductionId, "stock_move_production_id_index").HasFilter("(production_id IS NOT NULL)");

            entity.HasIndex(e => e.PurchaseLineId, "stock_move_purchase_line_id_index").HasFilter("(purchase_line_id IS NOT NULL)");

            entity.HasIndex(e => e.RawMaterialProductionId, "stock_move_raw_material_production_id_index").HasFilter("(raw_material_production_id IS NOT NULL)");

            entity.HasIndex(e => e.SaleLineId, "stock_move_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.HasIndex(e => e.State, "stock_move_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Additional)
                .HasComment("Whether the move was added after the picking's confirmation")
                .HasColumnName("additional");
            entity.Property(e => e.AnalyticAccountLineId)
                .HasComment("Analytic Account Line")
                .HasColumnName("analytic_account_line_id");
            entity.Property(e => e.BomLineId)
                .HasComment("BoM Line")
                .HasColumnName("bom_line_id");
            entity.Property(e => e.ByproductId)
                .HasComment("By-products")
                .HasColumnName("byproduct_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.ConsumeUnbuildId)
                .HasComment("Consumed Disassembly Order")
                .HasColumnName("consume_unbuild_id");
            entity.Property(e => e.CostShare)
                .HasComment("Cost Share (%)")
                .HasColumnName("cost_share");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CreatedProductionId)
                .HasComment("Created Production Order")
                .HasColumnName("created_production_id");
            entity.Property(e => e.CreatedPurchaseLineId)
                .HasComment("Created Purchase Order Line")
                .HasColumnName("created_purchase_line_id");
            entity.Property(e => e.Date)
                .HasComment("Date Scheduled")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DateDeadline)
                .HasComment("Deadline")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DelayAlertDate)
                .HasComment("Delay Alert Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("delay_alert_date");
            entity.Property(e => e.DescriptionPicking)
                .HasComment("Description of Picking")
                .HasColumnName("description_picking");
            entity.Property(e => e.GroupId)
                .HasComment("Procurement Group")
                .HasColumnName("group_id");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsInventory)
                .HasComment("Inventory")
                .HasColumnName("is_inventory");
            entity.Property(e => e.LocationDestId)
                .HasComment("Destination Location")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId)
                .HasComment("Source Location")
                .HasColumnName("location_id");
            entity.Property(e => e.ManualConsumption)
                .HasComment("Manual Consumption")
                .HasColumnName("manual_consumption");
            entity.Property(e => e.Name)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NextSerial)
                .HasComment("First SN")
                .HasColumnType("character varying")
                .HasColumnName("next_serial");
            entity.Property(e => e.NextSerialCount)
                .HasComment("Number of SN")
                .HasColumnName("next_serial_count");
            entity.Property(e => e.OperationId)
                .HasComment("Operation To Consume")
                .HasColumnName("operation_id");
            entity.Property(e => e.OrderFinishedLotId)
                .HasComment("Finished Lot/Serial Number")
                .HasColumnName("order_finished_lot_id");
            entity.Property(e => e.OrderpointId)
                .HasComment("Original Reordering Rule")
                .HasColumnName("orderpoint_id");
            entity.Property(e => e.Origin)
                .HasComment("Source Document")
                .HasColumnType("character varying")
                .HasColumnName("origin");
            entity.Property(e => e.OriginReturnedMoveId)
                .HasComment("Origin return move")
                .HasColumnName("origin_returned_move_id");
            entity.Property(e => e.PackageLevelId)
                .HasComment("Package Level")
                .HasColumnName("package_level_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Destination Address ")
                .HasColumnName("partner_id");
            entity.Property(e => e.PickingId)
                .HasComment("Transfer")
                .HasColumnName("picking_id");
            entity.Property(e => e.PickingTypeId)
                .HasComment("Operation Type")
                .HasColumnName("picking_type_id");
            entity.Property(e => e.PriceUnit)
                .HasComment("Unit Price")
                .HasColumnName("price_unit");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.ProcureMethod)
                .HasComment("Supply Method")
                .HasColumnType("character varying")
                .HasColumnName("procure_method");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductPackagingId)
                .HasComment("Packaging")
                .HasColumnName("product_packaging_id");
            entity.Property(e => e.ProductQty)
                .HasComment("Real Quantity")
                .HasColumnName("product_qty");
            entity.Property(e => e.ProductUom)
                .HasComment("UoM")
                .HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty)
                .HasComment("Demand")
                .HasColumnName("product_uom_qty");
            entity.Property(e => e.ProductionId)
                .HasComment("Production Order for finished products")
                .HasColumnName("production_id");
            entity.Property(e => e.PropagateCancel)
                .HasComment("Propagate cancel and split")
                .HasColumnName("propagate_cancel");
            entity.Property(e => e.PurchaseLineId)
                .HasComment("Purchase Order Line")
                .HasColumnName("purchase_line_id");
            entity.Property(e => e.QuantityDone)
                .HasComment("Quantity Done")
                .HasColumnName("quantity_done");
            entity.Property(e => e.RawMaterialProductionId)
                .HasComment("Production Order for components")
                .HasColumnName("raw_material_production_id");
            entity.Property(e => e.Reference)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("reference");
            entity.Property(e => e.RepairId)
                .HasComment("Repair")
                .HasColumnName("repair_id");
            entity.Property(e => e.ReservationDate)
                .HasComment("Date to Reserve")
                .HasColumnName("reservation_date");
            entity.Property(e => e.RestrictPartnerId)
                .HasComment("Owner ")
                .HasColumnName("restrict_partner_id");
            entity.Property(e => e.RuleId)
                .HasComment("Stock Rule")
                .HasColumnName("rule_id");
            entity.Property(e => e.SaleLineId)
                .HasComment("Sale Line")
                .HasColumnName("sale_line_id");
            entity.Property(e => e.Scrapped)
                .HasComment("Scrapped")
                .HasColumnName("scrapped");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.ToRefund)
                .HasComment("Update quantities on SO/PO")
                .HasColumnName("to_refund");
            entity.Property(e => e.UnbuildId)
                .HasComment("Disassembly Order")
                .HasColumnName("unbuild_id");
            entity.Property(e => e.UnitFactor).HasColumnName("unit_factor");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WorkorderId)
                .HasComment("Work Order To Consume")
                .HasColumnName("workorder_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccountLine).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.AnalyticAccountLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_analytic_account_line_id_fkey");

            entity.HasOne(d => d.BomLine).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.BomLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_bom_line_id_fkey");

            entity.HasOne(d => d.Byproduct).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ByproductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_byproduct_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_company_id_fkey");

            entity.HasOne(d => d.ConsumeUnbuild).WithMany(p => p.StockMoveConsumeUnbuilds)
                .HasForeignKey(d => d.ConsumeUnbuildId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_consume_unbuild_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockMoveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_create_uid_fkey");

            entity.HasOne(d => d.CreatedProduction).WithMany(p => p.StockMoveCreatedProductions)
                .HasForeignKey(d => d.CreatedProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_created_production_id_fkey");

            entity.HasOne(d => d.CreatedPurchaseLine).WithMany(p => p.StockMoveCreatedPurchaseLines)
                .HasForeignKey(d => d.CreatedPurchaseLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_created_purchase_line_id_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_group_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockMoveLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockMoveLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_location_id_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_operation_id_fkey");

            entity.HasOne(d => d.OrderFinishedLot).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.OrderFinishedLotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_order_finished_lot_id_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_orderpoint_id_fkey");

            entity.HasOne(d => d.OriginReturnedMove).WithMany(p => p.InverseOriginReturnedMove)
                .HasForeignKey(d => d.OriginReturnedMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_origin_returned_move_id_fkey");

            entity.HasOne(d => d.PackageLevel).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.PackageLevelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_package_level_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.StockMovePartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_partner_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_picking_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_picking_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_product_id_fkey");

            entity.HasOne(d => d.ProductPackaging).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ProductPackagingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_product_packaging_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_product_uom_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockMoveProductions)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_production_id_fkey");

            entity.HasOne(d => d.PurchaseLine).WithMany(p => p.StockMovePurchaseLines)
                .HasForeignKey(d => d.PurchaseLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_purchase_line_id_fkey");

            entity.HasOne(d => d.RawMaterialProduction).WithMany(p => p.StockMoveRawMaterialProductions)
                .HasForeignKey(d => d.RawMaterialProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_raw_material_production_id_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.RepairId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_repair_id_fkey");

            entity.HasOne(d => d.RestrictPartner).WithMany(p => p.StockMoveRestrictPartners)
                .HasForeignKey(d => d.RestrictPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_restrict_partner_id_fkey");

            entity.HasOne(d => d.Rule).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.RuleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_rule_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_sale_line_id_fkey");

            entity.HasOne(d => d.Unbuild).WithMany(p => p.StockMoveUnbuilds)
                .HasForeignKey(d => d.UnbuildId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_unbuild_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_warehouse_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_workorder_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockMoveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_write_uid_fkey");

            entity.HasMany(d => d.MoveDests).WithMany(p => p.MoveOrigs)
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveMoveRel",
                    r => r.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveDestId")
                        .HasConstraintName("stock_move_move_rel_move_dest_id_fkey"),
                    l => l.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveOrigId")
                        .HasConstraintName("stock_move_move_rel_move_orig_id_fkey"),
                    j =>
                    {
                        j.HasKey("MoveOrigId", "MoveDestId").HasName("stock_move_move_rel_pkey");
                        j.ToTable("stock_move_move_rel", tb => tb.HasComment("RELATION BETWEEN stock_move AND stock_move"));
                        j.HasIndex(new[] { "MoveDestId", "MoveOrigId" }, "stock_move_move_rel_move_dest_id_move_orig_id_idx");
                        j.IndexerProperty<int>("MoveOrigId").HasColumnName("move_orig_id");
                        j.IndexerProperty<int>("MoveDestId").HasColumnName("move_dest_id");
                    });

            entity.HasMany(d => d.MoveOrigs).WithMany(p => p.MoveDests)
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveMoveRel",
                    r => r.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveOrigId")
                        .HasConstraintName("stock_move_move_rel_move_orig_id_fkey"),
                    l => l.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveDestId")
                        .HasConstraintName("stock_move_move_rel_move_dest_id_fkey"),
                    j =>
                    {
                        j.HasKey("MoveOrigId", "MoveDestId").HasName("stock_move_move_rel_pkey");
                        j.ToTable("stock_move_move_rel", tb => tb.HasComment("RELATION BETWEEN stock_move AND stock_move"));
                        j.HasIndex(new[] { "MoveDestId", "MoveOrigId" }, "stock_move_move_rel_move_dest_id_move_orig_id_idx");
                        j.IndexerProperty<int>("MoveOrigId").HasColumnName("move_orig_id");
                        j.IndexerProperty<int>("MoveDestId").HasColumnName("move_dest_id");
                    });

            entity.HasMany(d => d.Routes).WithMany(p => p.Moves)
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteMove",
                    r => r.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_move_route_id_fkey"),
                    l => l.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveId")
                        .HasConstraintName("stock_route_move_move_id_fkey"),
                    j =>
                    {
                        j.HasKey("MoveId", "RouteId").HasName("stock_route_move_pkey");
                        j.ToTable("stock_route_move", tb => tb.HasComment("RELATION BETWEEN stock_move AND stock_route"));
                        j.HasIndex(new[] { "RouteId", "MoveId" }, "stock_route_move_route_id_move_id_idx");
                        j.IndexerProperty<int>("MoveId").HasColumnName("move_id");
                        j.IndexerProperty<int>("RouteId").HasColumnName("route_id");
                    });
        });

        modelBuilder.Entity<StockMoveLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_move_line_pkey");

            entity.ToTable("stock_move_line", tb => tb.HasComment("Product Moves (Stock Move Line)"));

            entity.HasIndex(e => e.CompanyId, "stock_move_line_company_id_index");

            entity.HasIndex(e => new { e.Id, e.CompanyId, e.ProductId, e.LotId, e.LocationId, e.OwnerId, e.PackageId }, "stock_move_line_free_reservation_index").HasFilter("(((state IS NULL) OR ((state)::text <> ALL ((ARRAY['cancel'::character varying, 'done'::character varying])::text[]))) AND (reserved_qty > (0)::numeric))");

            entity.HasIndex(e => e.MoveId, "stock_move_line_move_id_index");

            entity.HasIndex(e => e.PickingId, "stock_move_line_picking_id_index");

            entity.HasIndex(e => e.ProductId, "stock_move_line_product_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DescriptionPicking)
                .HasComment("Description picking")
                .HasColumnName("description_picking");
            entity.Property(e => e.LocationDestId)
                .HasComment("To")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId)
                .HasComment("From")
                .HasColumnName("location_id");
            entity.Property(e => e.LotId)
                .HasComment("Lot/Serial Number")
                .HasColumnName("lot_id");
            entity.Property(e => e.LotName)
                .HasComment("Lot/Serial Number Name")
                .HasColumnType("character varying")
                .HasColumnName("lot_name");
            entity.Property(e => e.MoveId)
                .HasComment("Stock Operation")
                .HasColumnName("move_id");
            entity.Property(e => e.OwnerId)
                .HasComment("From Owner")
                .HasColumnName("owner_id");
            entity.Property(e => e.PackageId)
                .HasComment("Source Package")
                .HasColumnName("package_id");
            entity.Property(e => e.PackageLevelId)
                .HasComment("Package Level")
                .HasColumnName("package_level_id");
            entity.Property(e => e.PickingId)
                .HasComment("Transfer")
                .HasColumnName("picking_id");
            entity.Property(e => e.ProductCategoryName)
                .HasComment("Product Category")
                .HasColumnType("character varying")
                .HasColumnName("product_category_name");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.ProductionId)
                .HasComment("Production Order")
                .HasColumnName("production_id");
            entity.Property(e => e.QtyDone)
                .HasComment("Done")
                .HasColumnName("qty_done");
            entity.Property(e => e.Reference)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("reference");
            entity.Property(e => e.ReservedQty)
                .HasComment("Real Reserved Quantity")
                .HasColumnName("reserved_qty");
            entity.Property(e => e.ReservedUomQty)
                .HasComment("Reserved")
                .HasColumnName("reserved_uom_qty");
            entity.Property(e => e.ResultPackageId)
                .HasComment("Destination Package")
                .HasColumnName("result_package_id");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WorkorderId)
                .HasComment("Work Order")
                .HasColumnName("workorder_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockMoveLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockMoveLineLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockMoveLineLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_lot_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_move_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_owner_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockMoveLinePackages)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_package_id_fkey");

            entity.HasOne(d => d.PackageLevel).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.PackageLevelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_package_level_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_picking_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_move_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_product_uom_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_production_id_fkey");

            entity.HasOne(d => d.ResultPackage).WithMany(p => p.StockMoveLineResultPackages)
                .HasForeignKey(d => d.ResultPackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_result_package_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_workorder_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockMoveLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_write_uid_fkey");

            entity.HasMany(d => d.ConsumeLines).WithMany(p => p.ProduceLines)
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveLineConsumeRel",
                    r => r.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ConsumeLineId")
                        .HasConstraintName("stock_move_line_consume_rel_consume_line_id_fkey"),
                    l => l.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ProduceLineId")
                        .HasConstraintName("stock_move_line_consume_rel_produce_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ConsumeLineId", "ProduceLineId").HasName("stock_move_line_consume_rel_pkey");
                        j.ToTable("stock_move_line_consume_rel", tb => tb.HasComment("RELATION BETWEEN stock_move_line AND stock_move_line"));
                        j.HasIndex(new[] { "ProduceLineId", "ConsumeLineId" }, "stock_move_line_consume_rel_produce_line_id_consume_line_id_idx");
                        j.IndexerProperty<int>("ConsumeLineId").HasColumnName("consume_line_id");
                        j.IndexerProperty<int>("ProduceLineId").HasColumnName("produce_line_id");
                    });

            entity.HasMany(d => d.ProduceLines).WithMany(p => p.ConsumeLines)
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveLineConsumeRel",
                    r => r.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ProduceLineId")
                        .HasConstraintName("stock_move_line_consume_rel_produce_line_id_fkey"),
                    l => l.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ConsumeLineId")
                        .HasConstraintName("stock_move_line_consume_rel_consume_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ConsumeLineId", "ProduceLineId").HasName("stock_move_line_consume_rel_pkey");
                        j.ToTable("stock_move_line_consume_rel", tb => tb.HasComment("RELATION BETWEEN stock_move_line AND stock_move_line"));
                        j.HasIndex(new[] { "ProduceLineId", "ConsumeLineId" }, "stock_move_line_consume_rel_produce_line_id_consume_line_id_idx");
                        j.IndexerProperty<int>("ConsumeLineId").HasColumnName("consume_line_id");
                        j.IndexerProperty<int>("ProduceLineId").HasColumnName("produce_line_id");
                    });
        });

        modelBuilder.Entity<StockOrderpointSnooze>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_orderpoint_snooze_pkey");

            entity.ToTable("stock_orderpoint_snooze", tb => tb.HasComment("Snooze Orderpoint"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PredefinedDate)
                .HasComment("Snooze for")
                .HasColumnType("character varying")
                .HasColumnName("predefined_date");
            entity.Property(e => e.SnoozedUntil)
                .HasComment("Snooze Date")
                .HasColumnName("snoozed_until");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockOrderpointSnoozeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_orderpoint_snooze_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockOrderpointSnoozeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_orderpoint_snooze_write_uid_fkey");

            entity.HasMany(d => d.StockWarehouseOrderpoints).WithMany(p => p.StockOrderpointSnoozes)
                .UsingEntity<Dictionary<string, object>>(
                    "StockOrderpointSnoozeStockWarehouseOrderpointRel",
                    r => r.HasOne<StockWarehouseOrderpoint>().WithMany()
                        .HasForeignKey("StockWarehouseOrderpointId")
                        .HasConstraintName("stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_i_fkey"),
                    l => l.HasOne<StockOrderpointSnooze>().WithMany()
                        .HasForeignKey("StockOrderpointSnoozeId")
                        .HasConstraintName("stock_orderpoint_snooze_stock_w_stock_orderpoint_snooze_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockOrderpointSnoozeId", "StockWarehouseOrderpointId").HasName("stock_orderpoint_snooze_stock_warehouse_orderpoint_rel_pkey");
                        j.ToTable("stock_orderpoint_snooze_stock_warehouse_orderpoint_rel", tb => tb.HasComment("RELATION BETWEEN stock_orderpoint_snooze AND stock_warehouse_orderpoint"));
                        j.HasIndex(new[] { "StockWarehouseOrderpointId", "StockOrderpointSnoozeId" }, "stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_id_idx");
                        j.IndexerProperty<int>("StockOrderpointSnoozeId").HasColumnName("stock_orderpoint_snooze_id");
                        j.IndexerProperty<int>("StockWarehouseOrderpointId").HasColumnName("stock_warehouse_orderpoint_id");
                    });
        });

        modelBuilder.Entity<StockPackageDestination>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_package_destination_pkey");

            entity.ToTable("stock_package_destination", tb => tb.HasComment("Stock Package Destination"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationDestId)
                .HasComment("Destination location")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.PickingId)
                .HasComment("Picking")
                .HasColumnName("picking_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockPackageDestinationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_destination_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockPackageDestinations)
                .HasForeignKey(d => d.LocationDestId)
                .HasConstraintName("stock_package_destination_location_dest_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockPackageDestinations)
                .HasForeignKey(d => d.PickingId)
                .HasConstraintName("stock_package_destination_picking_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockPackageDestinationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_destination_write_uid_fkey");
        });

        modelBuilder.Entity<StockPackageLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_package_level_pkey");

            entity.ToTable("stock_package_level", tb => tb.HasComment("Stock Package Level"));

            entity.HasIndex(e => e.CompanyId, "stock_package_level_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationDestId)
                .HasComment("To")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.PackageId)
                .HasComment("Package")
                .HasColumnName("package_id");
            entity.Property(e => e.PickingId)
                .HasComment("Picking")
                .HasColumnName("picking_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockPackageLevels)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_package_level_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockPackageLevelCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockPackageLevels)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_location_dest_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockPackageLevels)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_package_level_package_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockPackageLevels)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_picking_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockPackageLevelWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_write_uid_fkey");
        });

        modelBuilder.Entity<StockPackageType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_package_type_pkey");

            entity.ToTable("stock_package_type", tb => tb.HasComment("Stock package type"));

            entity.HasIndex(e => e.Barcode, "stock_package_type_barcode_uniq").IsUnique();

            entity.HasIndex(e => e.CompanyId, "stock_package_type_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Barcode)
                .HasComment("Barcode")
                .HasColumnType("character varying")
                .HasColumnName("barcode");
            entity.Property(e => e.BaseWeight)
                .HasComment("Weight")
                .HasColumnName("base_weight");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Height)
                .HasComment("Height")
                .HasColumnName("height");
            entity.Property(e => e.MaxWeight)
                .HasComment("Max Weight")
                .HasColumnName("max_weight");
            entity.Property(e => e.Name)
                .HasComment("Package Type")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PackagingLength)
                .HasComment("Length")
                .HasColumnName("packaging_length");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Width)
                .HasComment("Width")
                .HasColumnName("width");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockPackageTypes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_type_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockPackageTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_type_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockPackageTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_type_write_uid_fkey");
        });

        modelBuilder.Entity<StockPicking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_picking_pkey");

            entity.ToTable("stock_picking", tb => tb.HasComment("Transfer"));

            entity.HasIndex(e => e.BackorderId, "stock_picking_backorder_id_index").HasFilter("(backorder_id IS NOT NULL)");

            entity.HasIndex(e => e.CompanyId, "stock_picking_company_id_index");

            entity.HasIndex(e => e.Name, "stock_picking_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => new { e.Name, e.CompanyId }, "stock_picking_name_uniq").IsUnique();

            entity.HasIndex(e => e.Origin, "stock_picking_origin_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PickingTypeId, "stock_picking_picking_type_id_index");

            entity.HasIndex(e => e.PosOrderId, "stock_picking_pos_order_id_index");

            entity.HasIndex(e => e.PosSessionId, "stock_picking_pos_session_id_index");

            entity.HasIndex(e => e.SaleId, "stock_picking_sale_id_index").HasFilter("(sale_id IS NOT NULL)");

            entity.HasIndex(e => e.ScheduledDate, "stock_picking_scheduled_date_index");

            entity.HasIndex(e => e.State, "stock_picking_state_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BackorderId)
                .HasComment("Back Order of")
                .HasColumnName("backorder_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Creation Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DateDeadline)
                .HasComment("Deadline")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DateDone)
                .HasComment("Date of Transfer")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_done");
            entity.Property(e => e.GroupId)
                .HasComment("Procurement Group")
                .HasColumnName("group_id");
            entity.Property(e => e.HasDeadlineIssue)
                .HasComment("Is late")
                .HasColumnName("has_deadline_issue");
            entity.Property(e => e.ImmediateTransfer)
                .HasComment("Immediate Transfer")
                .HasColumnName("immediate_transfer");
            entity.Property(e => e.IsLocked)
                .HasComment("Is Locked")
                .HasColumnName("is_locked");
            entity.Property(e => e.LocationDestId)
                .HasComment("Destination Location")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId)
                .HasComment("Source Location")
                .HasColumnName("location_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveType)
                .HasComment("Shipping Policy")
                .HasColumnType("character varying")
                .HasColumnName("move_type");
            entity.Property(e => e.Name)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasComment("Notes")
                .HasColumnName("note");
            entity.Property(e => e.Origin)
                .HasComment("Source Document")
                .HasColumnType("character varying")
                .HasColumnName("origin");
            entity.Property(e => e.OwnerId)
                .HasComment("Assign Owner")
                .HasColumnName("owner_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Contact")
                .HasColumnName("partner_id");
            entity.Property(e => e.PickingTypeId)
                .HasComment("Operation Type")
                .HasColumnName("picking_type_id");
            entity.Property(e => e.PosOrderId)
                .HasComment("Pos Order")
                .HasColumnName("pos_order_id");
            entity.Property(e => e.PosSessionId)
                .HasComment("Pos Session")
                .HasColumnName("pos_session_id");
            entity.Property(e => e.Printed)
                .HasComment("Printed")
                .HasColumnName("printed");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnType("character varying")
                .HasColumnName("priority");
            entity.Property(e => e.SaleId).HasColumnName("sale_id");
            entity.Property(e => e.ScheduledDate)
                .HasComment("Scheduled Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Backorder).WithMany(p => p.InverseBackorder)
                .HasForeignKey(d => d.BackorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_backorder_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockPickingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_group_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockPickingLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockPickingLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_location_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockPickingOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_owner_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.StockPickingPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_partner_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_picking_type_id_fkey");

            entity.HasOne(d => d.PosOrder).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.PosOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_pos_order_id_fkey");

            entity.HasOne(d => d.PosSession).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.PosSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_pos_session_id_fkey");

            entity.HasOne(d => d.Sale).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.SaleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_sale_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.StockPickingUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_user_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockPickingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_write_uid_fkey");
        });

        modelBuilder.Entity<StockPickingType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_picking_type_pkey");

            entity.ToTable("stock_picking_type", tb => tb.HasComment("Picking Type"));

            entity.HasIndex(e => e.CompanyId, "stock_picking_type_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AutoShowReceptionReport)
                .HasComment("Show Reception Report at Validation")
                .HasColumnName("auto_show_reception_report");
            entity.Property(e => e.Barcode)
                .HasComment("Barcode")
                .HasColumnType("character varying")
                .HasColumnName("barcode");
            entity.Property(e => e.Code)
                .HasComment("Type of Operation")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Color)
                .HasComment("Color")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateBackorder)
                .HasComment("Create Backorder")
                .HasColumnType("character varying")
                .HasColumnName("create_backorder");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DefaultLocationDestId)
                .HasComment("Default Destination Location")
                .HasColumnName("default_location_dest_id");
            entity.Property(e => e.DefaultLocationSrcId)
                .HasComment("Default Source Location")
                .HasColumnName("default_location_src_id");
            entity.Property(e => e.IsRepairable)
                .HasComment("Create Repair Orders from Returns")
                .HasColumnName("is_repairable");
            entity.Property(e => e.Name)
                .HasComment("Operation Type")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PrintLabel)
                .HasComment("Print Label")
                .HasColumnName("print_label");
            entity.Property(e => e.ReservationDaysBefore)
                .HasComment("Days")
                .HasColumnName("reservation_days_before");
            entity.Property(e => e.ReservationDaysBeforePriority)
                .HasComment("Days when starred")
                .HasColumnName("reservation_days_before_priority");
            entity.Property(e => e.ReservationMethod)
                .HasComment("Reservation Method")
                .HasColumnType("character varying")
                .HasColumnName("reservation_method");
            entity.Property(e => e.ReturnPickingTypeId)
                .HasComment("Operation Type for Returns")
                .HasColumnName("return_picking_type_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SequenceCode)
                .HasComment("Sequence Prefix")
                .HasColumnType("character varying")
                .HasColumnName("sequence_code");
            entity.Property(e => e.SequenceId)
                .HasComment("Reference Sequence")
                .HasColumnName("sequence_id");
            entity.Property(e => e.ShowEntirePacks)
                .HasComment("Move Entire Packages")
                .HasColumnName("show_entire_packs");
            entity.Property(e => e.ShowOperations)
                .HasComment("Show Detailed Operations")
                .HasColumnName("show_operations");
            entity.Property(e => e.ShowReserved)
                .HasComment("Pre-fill Detailed Operations")
                .HasColumnName("show_reserved");
            entity.Property(e => e.UseAutoConsumeComponentsLots)
                .HasComment("Consume Reserved Lots/Serial Numbers automatically")
                .HasColumnName("use_auto_consume_components_lots");
            entity.Property(e => e.UseCreateComponentsLots)
                .HasComment("Create New Lots/Serial Numbers for Components")
                .HasColumnName("use_create_components_lots");
            entity.Property(e => e.UseCreateLots)
                .HasComment("Create New Lots/Serial Numbers")
                .HasColumnName("use_create_lots");
            entity.Property(e => e.UseExistingLots)
                .HasComment("Use Existing Lots/Serial Numbers")
                .HasColumnName("use_existing_lots");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockPickingTypes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_type_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockPickingTypeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_create_uid_fkey");

            entity.HasOne(d => d.DefaultLocationDest).WithMany(p => p.StockPickingTypeDefaultLocationDests)
                .HasForeignKey(d => d.DefaultLocationDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_default_location_dest_id_fkey");

            entity.HasOne(d => d.DefaultLocationSrc).WithMany(p => p.StockPickingTypeDefaultLocationSrcs)
                .HasForeignKey(d => d.DefaultLocationSrcId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_default_location_src_id_fkey");

            entity.HasOne(d => d.ReturnPickingType).WithMany(p => p.InverseReturnPickingType)
                .HasForeignKey(d => d.ReturnPickingTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_return_picking_type_id_fkey");

            entity.HasOne(d => d.SequenceNavigation).WithMany(p => p.StockPickingTypes)
                .HasForeignKey(d => d.SequenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_sequence_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockPickingTypes)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_picking_type_warehouse_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockPickingTypeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_write_uid_fkey");
        });

        modelBuilder.Entity<StockPutawayRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_putaway_rule_pkey");

            entity.ToTable("stock_putaway_rule", tb => tb.HasComment("Putaway Rule"));

            entity.HasIndex(e => e.CompanyId, "stock_putaway_rule_company_id_index");

            entity.HasIndex(e => e.LocationInId, "stock_putaway_rule_location_in_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CategoryId)
                .HasComment("Product Category")
                .HasColumnName("category_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationInId)
                .HasComment("When product arrives in")
                .HasColumnName("location_in_id");
            entity.Property(e => e.LocationOutId)
                .HasComment("Store to sublocation")
                .HasColumnName("location_out_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Sequence)
                .HasComment("Priority")
                .HasColumnName("sequence");
            entity.Property(e => e.StorageCategoryId)
                .HasComment("Storage Category")
                .HasColumnName("storage_category_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.StockPutawayRules)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_category_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.StockPutawayRules)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_putaway_rule_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockPutawayRuleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_putaway_rule_create_uid_fkey");

            entity.HasOne(d => d.LocationIn).WithMany(p => p.StockPutawayRuleLocationIns)
                .HasForeignKey(d => d.LocationInId)
                .HasConstraintName("stock_putaway_rule_location_in_id_fkey");

            entity.HasOne(d => d.LocationOut).WithMany(p => p.StockPutawayRuleLocationOuts)
                .HasForeignKey(d => d.LocationOutId)
                .HasConstraintName("stock_putaway_rule_location_out_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockPutawayRules)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_product_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockPutawayRules)
                .HasForeignKey(d => d.StorageCategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_storage_category_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockPutawayRuleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_putaway_rule_write_uid_fkey");

            entity.HasMany(d => d.StockPackageTypes).WithMany(p => p.StockPutawayRules)
                .UsingEntity<Dictionary<string, object>>(
                    "StockPackageTypeStockPutawayRuleRel",
                    r => r.HasOne<StockPackageType>().WithMany()
                        .HasForeignKey("StockPackageTypeId")
                        .HasConstraintName("stock_package_type_stock_putaway_rul_stock_package_type_id_fkey"),
                    l => l.HasOne<StockPutawayRule>().WithMany()
                        .HasForeignKey("StockPutawayRuleId")
                        .HasConstraintName("stock_package_type_stock_putaway_rul_stock_putaway_rule_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockPutawayRuleId", "StockPackageTypeId").HasName("stock_package_type_stock_putaway_rule_rel_pkey");
                        j.ToTable("stock_package_type_stock_putaway_rule_rel", tb => tb.HasComment("RELATION BETWEEN stock_putaway_rule AND stock_package_type"));
                        j.HasIndex(new[] { "StockPackageTypeId", "StockPutawayRuleId" }, "stock_package_type_stock_puta_stock_package_type_id_stock_p_idx");
                        j.IndexerProperty<int>("StockPutawayRuleId").HasColumnName("stock_putaway_rule_id");
                        j.IndexerProperty<int>("StockPackageTypeId").HasColumnName("stock_package_type_id");
                    });
        });

        modelBuilder.Entity<StockQuant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_quant_pkey");

            entity.ToTable("stock_quant", tb => tb.HasComment("Quants"));

            entity.HasIndex(e => e.LocationId, "stock_quant_location_id_index");

            entity.HasIndex(e => e.LotId, "stock_quant_lot_id_index");

            entity.HasIndex(e => e.PackageId, "stock_quant_package_id_index");

            entity.HasIndex(e => e.ProductId, "stock_quant_product_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingDate)
                .HasComment("Accounting Date")
                .HasColumnName("accounting_date");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InDate)
                .HasComment("Incoming Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("in_date");
            entity.Property(e => e.InventoryDate)
                .HasComment("Scheduled Date")
                .HasColumnName("inventory_date");
            entity.Property(e => e.InventoryDiffQuantity)
                .HasComment("Difference")
                .HasColumnName("inventory_diff_quantity");
            entity.Property(e => e.InventoryQuantity)
                .HasComment("Counted Quantity")
                .HasColumnName("inventory_quantity");
            entity.Property(e => e.InventoryQuantitySet)
                .HasComment("Inventory Quantity Set")
                .HasColumnName("inventory_quantity_set");
            entity.Property(e => e.LocationId)
                .HasComment("Location")
                .HasColumnName("location_id");
            entity.Property(e => e.LotId)
                .HasComment("Lot/Serial Number")
                .HasColumnName("lot_id");
            entity.Property(e => e.OwnerId)
                .HasComment("Owner")
                .HasColumnName("owner_id");
            entity.Property(e => e.PackageId)
                .HasComment("Package")
                .HasColumnName("package_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.ReservedQuantity)
                .HasComment("Reserved Quantity")
                .HasColumnName("reserved_quantity");
            entity.Property(e => e.StorageCategoryId)
                .HasComment("Storage Category")
                .HasColumnName("storage_category_id");
            entity.Property(e => e.UserId)
                .HasComment("Assigned To")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockQuantCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_lot_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_owner_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_package_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_product_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.StorageCategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_storage_category_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.StockQuantUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockQuantWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_write_uid_fkey");
        });

        modelBuilder.Entity<StockQuantPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_quant_package_pkey");

            entity.ToTable("stock_quant_package", tb => tb.HasComment("Packages"));

            entity.HasIndex(e => e.CompanyId, "stock_quant_package_company_id_index");

            entity.HasIndex(e => e.LocationId, "stock_quant_package_location_id_index");

            entity.HasIndex(e => e.Name, "stock_quant_package_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PackageTypeId, "stock_quant_package_package_type_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationId)
                .HasComment("Location")
                .HasColumnName("location_id");
            entity.Property(e => e.Name)
                .HasComment("Package Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PackDate)
                .HasComment("Pack Date")
                .HasColumnName("pack_date");
            entity.Property(e => e.PackageTypeId)
                .HasComment("Package Type")
                .HasColumnName("package_type_id");
            entity.Property(e => e.PackageUse)
                .HasComment("Package Use")
                .HasColumnType("character varying")
                .HasColumnName("package_use");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockQuantPackages)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockQuantPackageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockQuantPackages)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_location_id_fkey");

            entity.HasOne(d => d.PackageType).WithMany(p => p.StockQuantPackages)
                .HasForeignKey(d => d.PackageTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_package_type_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockQuantPackageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_write_uid_fkey");
        });

        modelBuilder.Entity<StockQuantityHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_quantity_history_pkey");

            entity.ToTable("stock_quantity_history", tb => tb.HasComment("Stock Quantity History"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InventoryDatetime)
                .HasComment("Inventory at Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("inventory_datetime");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockQuantityHistoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quantity_history_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockQuantityHistoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quantity_history_write_uid_fkey");
        });

        modelBuilder.Entity<StockReplenishmentInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_replenishment_info_pkey");

            entity.ToTable("stock_replenishment_info", tb => tb.HasComment("Stock supplier replenishment information"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.OrderpointId)
                .HasComment("Orderpoint")
                .HasColumnName("orderpoint_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockReplenishmentInfoCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_info_create_uid_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.StockReplenishmentInfos)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_info_orderpoint_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockReplenishmentInfoWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_info_write_uid_fkey");

            entity.HasMany(d => d.ProductSupplierinfos).WithMany(p => p.StockReplenishmentInfos)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductSupplierinfoStockReplenishmentInfoRel",
                    r => r.HasOne<ProductSupplierinfo>().WithMany()
                        .HasForeignKey("ProductSupplierinfoId")
                        .HasConstraintName("product_supplierinfo_stock_repleni_product_supplierinfo_id_fkey"),
                    l => l.HasOne<StockReplenishmentInfo>().WithMany()
                        .HasForeignKey("StockReplenishmentInfoId")
                        .HasConstraintName("product_supplierinfo_stock_rep_stock_replenishment_info_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockReplenishmentInfoId", "ProductSupplierinfoId").HasName("product_supplierinfo_stock_replenishment_info_rel_pkey");
                        j.ToTable("product_supplierinfo_stock_replenishment_info_rel", tb => tb.HasComment("RELATION BETWEEN stock_replenishment_info AND product_supplierinfo"));
                        j.HasIndex(new[] { "ProductSupplierinfoId", "StockReplenishmentInfoId" }, "product_supplierinfo_stock_re_product_supplierinfo_id_stock_idx");
                        j.IndexerProperty<int>("StockReplenishmentInfoId").HasColumnName("stock_replenishment_info_id");
                        j.IndexerProperty<int>("ProductSupplierinfoId").HasColumnName("product_supplierinfo_id");
                    });
        });

        modelBuilder.Entity<StockReplenishmentOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_replenishment_option_pkey");

            entity.ToTable("stock_replenishment_option", tb => tb.HasComment("Stock warehouse replenishment option"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ReplenishmentInfoId)
                .HasComment("Replenishment Info")
                .HasColumnName("replenishment_info_id");
            entity.Property(e => e.RouteId)
                .HasComment("Route")
                .HasColumnName("route_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockReplenishmentOptionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockReplenishmentOptions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_product_id_fkey");

            entity.HasOne(d => d.ReplenishmentInfo).WithMany(p => p.StockReplenishmentOptions)
                .HasForeignKey(d => d.ReplenishmentInfoId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_replenishment_info_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.StockReplenishmentOptions)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_route_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockReplenishmentOptionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_write_uid_fkey");
        });

        modelBuilder.Entity<StockRequestCount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_request_count_pkey");

            entity.ToTable("stock_request_count", tb => tb.HasComment("Stock Request an Inventory Count"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingDate)
                .HasComment("Accounting Date")
                .HasColumnName("accounting_date");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.InventoryDate)
                .HasComment("Inventory Date")
                .HasColumnName("inventory_date");
            entity.Property(e => e.SetCount)
                .HasComment("Count")
                .HasColumnType("character varying")
                .HasColumnName("set_count");
            entity.Property(e => e.UserId)
                .HasComment("User")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockRequestCountCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_request_count_create_uid_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.StockRequestCountUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_request_count_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockRequestCountWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_request_count_write_uid_fkey");

            entity.HasMany(d => d.StockQuants).WithMany(p => p.StockRequestCounts)
                .UsingEntity<Dictionary<string, object>>(
                    "StockQuantStockRequestCountRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_quant_stock_request_count_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockRequestCount>().WithMany()
                        .HasForeignKey("StockRequestCountId")
                        .HasConstraintName("stock_quant_stock_request_count_rel_stock_request_count_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockRequestCountId", "StockQuantId").HasName("stock_quant_stock_request_count_rel_pkey");
                        j.ToTable("stock_quant_stock_request_count_rel", tb => tb.HasComment("RELATION BETWEEN stock_request_count AND stock_quant"));
                        j.HasIndex(new[] { "StockQuantId", "StockRequestCountId" }, "stock_quant_stock_request_cou_stock_quant_id_stock_request__idx");
                        j.IndexerProperty<int>("StockRequestCountId").HasColumnName("stock_request_count_id");
                        j.IndexerProperty<int>("StockQuantId").HasColumnName("stock_quant_id");
                    });
        });

        modelBuilder.Entity<StockReturnPicking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_return_picking_pkey");

            entity.ToTable("stock_return_picking", tb => tb.HasComment("Return Picking"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationId)
                .HasComment("Return Location")
                .HasColumnName("location_id");
            entity.Property(e => e.MoveDestExists)
                .HasComment("Chained Move Exists")
                .HasColumnName("move_dest_exists");
            entity.Property(e => e.OriginalLocationId)
                .HasComment("Original Location")
                .HasColumnName("original_location_id");
            entity.Property(e => e.ParentLocationId)
                .HasComment("Parent Location")
                .HasColumnName("parent_location_id");
            entity.Property(e => e.PickingId)
                .HasComment("Picking")
                .HasColumnName("picking_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockReturnPickingCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockReturnPickingLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_location_id_fkey");

            entity.HasOne(d => d.OriginalLocation).WithMany(p => p.StockReturnPickingOriginalLocations)
                .HasForeignKey(d => d.OriginalLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_original_location_id_fkey");

            entity.HasOne(d => d.ParentLocation).WithMany(p => p.StockReturnPickingParentLocations)
                .HasForeignKey(d => d.ParentLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_parent_location_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockReturnPickings)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_picking_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockReturnPickingWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_write_uid_fkey");
        });

        modelBuilder.Entity<StockReturnPickingLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_return_picking_line_pkey");

            entity.ToTable("stock_return_picking_line", tb => tb.HasComment("Return Picking Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MoveId)
                .HasComment("Move")
                .HasColumnName("move_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.ToRefund)
                .HasComment("Update quantities on SO/PO")
                .HasColumnName("to_refund");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockReturnPickingLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_create_uid_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockReturnPickingLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_move_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockReturnPickingLines)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_return_picking_line_product_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.StockReturnPickingLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockReturnPickingLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockRoute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_route_pkey");

            entity.ToTable("stock_route", tb => tb.HasComment("Inventory Routes"));

            entity.HasIndex(e => e.CompanyId, "stock_route_company_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Route")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PackagingSelectable)
                .HasComment("Applicable on Packaging")
                .HasColumnName("packaging_selectable");
            entity.Property(e => e.ProductCategSelectable)
                .HasComment("Applicable on Product Category")
                .HasColumnName("product_categ_selectable");
            entity.Property(e => e.ProductSelectable)
                .HasComment("Applicable on Product")
                .HasColumnName("product_selectable");
            entity.Property(e => e.SaleSelectable)
                .HasComment("Selectable on Sales Order Line")
                .HasColumnName("sale_selectable");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SuppliedWhId)
                .HasComment("Supplied Warehouse")
                .HasColumnName("supplied_wh_id");
            entity.Property(e => e.SupplierWhId)
                .HasComment("Supplying Warehouse")
                .HasColumnName("supplier_wh_id");
            entity.Property(e => e.WarehouseSelectable)
                .HasComment("Applicable on Warehouse")
                .HasColumnName("warehouse_selectable");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockRoutes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockRouteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_create_uid_fkey");

            entity.HasOne(d => d.SuppliedWh).WithMany(p => p.StockRouteSuppliedWhs)
                .HasForeignKey(d => d.SuppliedWhId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_supplied_wh_id_fkey");

            entity.HasOne(d => d.SupplierWh).WithMany(p => p.StockRouteSupplierWhs)
                .HasForeignKey(d => d.SupplierWhId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_supplier_wh_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockRouteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_write_uid_fkey");

            entity.HasMany(d => d.Categs).WithMany(p => p.Routes)
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteCateg",
                    r => r.HasOne<ProductCategory>().WithMany()
                        .HasForeignKey("CategId")
                        .HasConstraintName("stock_route_categ_categ_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_categ_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "CategId").HasName("stock_route_categ_pkey");
                        j.ToTable("stock_route_categ", tb => tb.HasComment("RELATION BETWEEN stock_route AND product_category"));
                        j.HasIndex(new[] { "CategId", "RouteId" }, "stock_route_categ_categ_id_route_id_idx");
                        j.IndexerProperty<int>("RouteId").HasColumnName("route_id");
                        j.IndexerProperty<int>("CategId").HasColumnName("categ_id");
                    });

            entity.HasMany(d => d.Packagings).WithMany(p => p.Routes)
                .UsingEntity<Dictionary<string, object>>(
                    "StockRoutePackaging",
                    r => r.HasOne<ProductPackaging>().WithMany()
                        .HasForeignKey("PackagingId")
                        .HasConstraintName("stock_route_packaging_packaging_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_packaging_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "PackagingId").HasName("stock_route_packaging_pkey");
                        j.ToTable("stock_route_packaging", tb => tb.HasComment("RELATION BETWEEN stock_route AND product_packaging"));
                        j.HasIndex(new[] { "PackagingId", "RouteId" }, "stock_route_packaging_packaging_id_route_id_idx");
                        j.IndexerProperty<int>("RouteId").HasColumnName("route_id");
                        j.IndexerProperty<int>("PackagingId").HasColumnName("packaging_id");
                    });

            entity.HasMany(d => d.Products).WithMany(p => p.Routes)
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteProduct",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("stock_route_product_product_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_product_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "ProductId").HasName("stock_route_product_pkey");
                        j.ToTable("stock_route_product", tb => tb.HasComment("RELATION BETWEEN stock_route AND product_template"));
                        j.HasIndex(new[] { "ProductId", "RouteId" }, "stock_route_product_product_id_route_id_idx");
                        j.IndexerProperty<int>("RouteId").HasColumnName("route_id");
                        j.IndexerProperty<int>("ProductId").HasColumnName("product_id");
                    });

            entity.HasMany(d => d.Warehouses).WithMany(p => p.Routes)
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteWarehouse",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("stock_route_warehouse_warehouse_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_warehouse_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "WarehouseId").HasName("stock_route_warehouse_pkey");
                        j.ToTable("stock_route_warehouse", tb => tb.HasComment("RELATION BETWEEN stock_route AND stock_warehouse"));
                        j.HasIndex(new[] { "WarehouseId", "RouteId" }, "stock_route_warehouse_warehouse_id_route_id_idx");
                        j.IndexerProperty<int>("RouteId").HasColumnName("route_id");
                        j.IndexerProperty<int>("WarehouseId").HasColumnName("warehouse_id");
                    });
        });

        modelBuilder.Entity<StockRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_rule_pkey");

            entity.ToTable("stock_rule", tb => tb.HasComment("Stock Rule"));

            entity.HasIndex(e => e.Action, "stock_rule_action_index");

            entity.HasIndex(e => e.LocationDestId, "stock_rule_location_dest_id_index");

            entity.HasIndex(e => e.LocationSrcId, "stock_rule_location_src_id_index");

            entity.HasIndex(e => e.RouteId, "stock_rule_route_id_index");

            entity.HasIndex(e => e.WarehouseId, "stock_rule_warehouse_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasComment("Action")
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Auto)
                .HasComment("Automatic Move")
                .HasColumnType("character varying")
                .HasColumnName("auto");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Delay)
                .HasComment("Lead Time")
                .HasColumnName("delay");
            entity.Property(e => e.GroupId)
                .HasComment("Fixed Procurement Group")
                .HasColumnName("group_id");
            entity.Property(e => e.GroupPropagationOption)
                .HasComment("Propagation of Procurement Group")
                .HasColumnType("character varying")
                .HasColumnName("group_propagation_option");
            entity.Property(e => e.LocationDestId)
                .HasComment("Destination Location")
                .HasColumnName("location_dest_id");
            entity.Property(e => e.LocationSrcId)
                .HasComment("Source Location")
                .HasColumnName("location_src_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PartnerAddressId)
                .HasComment("Partner Address")
                .HasColumnName("partner_address_id");
            entity.Property(e => e.PickingTypeId)
                .HasComment("Operation Type")
                .HasColumnName("picking_type_id");
            entity.Property(e => e.ProcureMethod)
                .HasComment("Supply Method")
                .HasColumnType("character varying")
                .HasColumnName("procure_method");
            entity.Property(e => e.PropagateCancel)
                .HasComment("Cancel Next Move")
                .HasColumnName("propagate_cancel");
            entity.Property(e => e.PropagateCarrier)
                .HasComment("Propagation of carrier")
                .HasColumnName("propagate_carrier");
            entity.Property(e => e.PropagateWarehouseId)
                .HasComment("Warehouse to Propagate")
                .HasColumnName("propagate_warehouse_id");
            entity.Property(e => e.RouteId)
                .HasComment("Route")
                .HasColumnName("route_id");
            entity.Property(e => e.RouteSequence)
                .HasComment("Route Sequence")
                .HasColumnName("route_sequence");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockRuleCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_group_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockRuleLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_rule_location_dest_id_fkey");

            entity.HasOne(d => d.LocationSrc).WithMany(p => p.StockRuleLocationSrcs)
                .HasForeignKey(d => d.LocationSrcId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_location_src_id_fkey");

            entity.HasOne(d => d.PartnerAddress).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.PartnerAddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_partner_address_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_rule_picking_type_id_fkey");

            entity.HasOne(d => d.PropagateWarehouse).WithMany(p => p.StockRulePropagateWarehouses)
                .HasForeignKey(d => d.PropagateWarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_propagate_warehouse_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.RouteId)
                .HasConstraintName("stock_rule_route_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockRuleWarehouses)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_warehouse_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockRuleWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_write_uid_fkey");
        });

        modelBuilder.Entity<StockRulesReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_rules_report_pkey");

            entity.ToTable("stock_rules_report", tb => tb.HasComment("Stock Rules report"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductHasVariants)
                .HasComment("Has variants")
                .HasColumnName("product_has_variants");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId)
                .HasComment("Product Template")
                .HasColumnName("product_tmpl_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockRulesReportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rules_report_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockRulesReports)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_rules_report_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.StockRulesReports)
                .HasForeignKey(d => d.ProductTmplId)
                .HasConstraintName("stock_rules_report_product_tmpl_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockRulesReportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rules_report_write_uid_fkey");

            entity.HasMany(d => d.StockRoutes).WithMany(p => p.StockRulesReports)
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteStockRulesReportRel",
                    r => r.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("StockRouteId")
                        .HasConstraintName("stock_route_stock_rules_report_rel_stock_route_id_fkey"),
                    l => l.HasOne<StockRulesReport>().WithMany()
                        .HasForeignKey("StockRulesReportId")
                        .HasConstraintName("stock_route_stock_rules_report_rel_stock_rules_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockRulesReportId", "StockRouteId").HasName("stock_route_stock_rules_report_rel_pkey");
                        j.ToTable("stock_route_stock_rules_report_rel", tb => tb.HasComment("RELATION BETWEEN stock_rules_report AND stock_route"));
                        j.HasIndex(new[] { "StockRouteId", "StockRulesReportId" }, "stock_route_stock_rules_repor_stock_route_id_stock_rules_re_idx");
                        j.IndexerProperty<int>("StockRulesReportId").HasColumnName("stock_rules_report_id");
                        j.IndexerProperty<int>("StockRouteId").HasColumnName("stock_route_id");
                    });

            entity.HasMany(d => d.StockWarehouses).WithMany(p => p.StockRulesReports)
                .UsingEntity<Dictionary<string, object>>(
                    "StockRulesReportStockWarehouseRel",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("StockWarehouseId")
                        .HasConstraintName("stock_rules_report_stock_warehouse_rel_stock_warehouse_id_fkey"),
                    l => l.HasOne<StockRulesReport>().WithMany()
                        .HasForeignKey("StockRulesReportId")
                        .HasConstraintName("stock_rules_report_stock_warehouse_r_stock_rules_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockRulesReportId", "StockWarehouseId").HasName("stock_rules_report_stock_warehouse_rel_pkey");
                        j.ToTable("stock_rules_report_stock_warehouse_rel", tb => tb.HasComment("RELATION BETWEEN stock_rules_report AND stock_warehouse"));
                        j.HasIndex(new[] { "StockWarehouseId", "StockRulesReportId" }, "stock_rules_report_stock_ware_stock_warehouse_id_stock_rule_idx");
                        j.IndexerProperty<int>("StockRulesReportId").HasColumnName("stock_rules_report_id");
                        j.IndexerProperty<int>("StockWarehouseId").HasColumnName("stock_warehouse_id");
                    });
        });

        modelBuilder.Entity<StockSchedulerCompute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_scheduler_compute_pkey");

            entity.ToTable("stock_scheduler_compute", tb => tb.HasComment("Run Scheduler Manually"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockSchedulerComputeCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scheduler_compute_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockSchedulerComputeWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scheduler_compute_write_uid_fkey");
        });

        modelBuilder.Entity<StockScrap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_scrap_pkey");

            entity.ToTable("stock_scrap", tb => tb.HasComment("Scrap"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DateDone)
                .HasComment("Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_done");
            entity.Property(e => e.LocationId)
                .HasComment("Source Location")
                .HasColumnName("location_id");
            entity.Property(e => e.LotId)
                .HasComment("Lot/Serial")
                .HasColumnName("lot_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId)
                .HasComment("Scrap Move")
                .HasColumnName("move_id");
            entity.Property(e => e.Name)
                .HasComment("Reference")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Origin)
                .HasComment("Source Document")
                .HasColumnType("character varying")
                .HasColumnName("origin");
            entity.Property(e => e.OwnerId)
                .HasComment("Owner")
                .HasColumnName("owner_id");
            entity.Property(e => e.PackageId)
                .HasComment("Package")
                .HasColumnName("package_id");
            entity.Property(e => e.PickingId)
                .HasComment("Picking")
                .HasColumnName("picking_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomId)
                .HasComment("Unit of Measure")
                .HasColumnName("product_uom_id");
            entity.Property(e => e.ProductionId)
                .HasComment("Manufacturing Order")
                .HasColumnName("production_id");
            entity.Property(e => e.ScrapLocationId)
                .HasComment("Scrap Location")
                .HasColumnName("scrap_location_id");
            entity.Property(e => e.ScrapQty)
                .HasComment("Quantity")
                .HasColumnName("scrap_qty");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.WorkorderId)
                .HasComment("Work Order")
                .HasColumnName("workorder_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockScrapCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockScrapLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_lot_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_move_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_owner_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_package_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_picking_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_product_uom_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_production_id_fkey");

            entity.HasOne(d => d.ScrapLocation).WithMany(p => p.StockScrapScrapLocations)
                .HasForeignKey(d => d.ScrapLocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_scrap_location_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_workorder_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockScrapWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_write_uid_fkey");
        });

        modelBuilder.Entity<StockStorageCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_storage_category_pkey");

            entity.ToTable("stock_storage_category", tb => tb.HasComment("Storage Category"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllowNewProduct)
                .HasComment("Allow New Product")
                .HasColumnType("character varying")
                .HasColumnName("allow_new_product");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MaxWeight)
                .HasComment("Max Weight")
                .HasColumnName("max_weight");
            entity.Property(e => e.Name)
                .HasComment("Storage Category")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.StockStorageCategories)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockStorageCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockStorageCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_write_uid_fkey");
        });

        modelBuilder.Entity<StockStorageCategoryCapacity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_storage_category_capacity_pkey");

            entity.ToTable("stock_storage_category_capacity", tb => tb.HasComment("Storage Category Capacity"));

            entity.HasIndex(e => e.StorageCategoryId, "stock_storage_category_capacity_storage_category_id_index");

            entity.HasIndex(e => new { e.PackageTypeId, e.StorageCategoryId }, "stock_storage_category_capacity_unique_package_type").IsUnique();

            entity.HasIndex(e => new { e.ProductId, e.StorageCategoryId }, "stock_storage_category_capacity_unique_product").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.PackageTypeId)
                .HasComment("Package Type")
                .HasColumnName("package_type_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.StorageCategoryId)
                .HasComment("Storage Category")
                .HasColumnName("storage_category_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockStorageCategoryCapacityCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_capacity_create_uid_fkey");

            entity.HasOne(d => d.PackageType).WithMany(p => p.StockStorageCategoryCapacities)
                .HasForeignKey(d => d.PackageTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_storage_category_capacity_package_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockStorageCategoryCapacities)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_storage_category_capacity_product_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockStorageCategoryCapacities)
                .HasForeignKey(d => d.StorageCategoryId)
                .HasConstraintName("stock_storage_category_capacity_storage_category_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockStorageCategoryCapacityWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_capacity_write_uid_fkey");
        });

        modelBuilder.Entity<StockTraceabilityReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_traceability_report_pkey");

            entity.ToTable("stock_traceability_report", tb => tb.HasComment("Traceability Report"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockTraceabilityReportCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_traceability_report_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockTraceabilityReportWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_traceability_report_write_uid_fkey");
        });

        modelBuilder.Entity<StockTrackConfirmation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_track_confirmation_pkey");

            entity.ToTable("stock_track_confirmation", tb => tb.HasComment("Stock Track Confirmation"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockTrackConfirmationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_confirmation_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockTrackConfirmationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_confirmation_write_uid_fkey");

            entity.HasMany(d => d.ProductProducts).WithMany(p => p.StockTrackConfirmations)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductProductStockTrackConfirmationRel",
                    r => r.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_product_stock_track_confirmatio_product_product_id_fkey"),
                    l => l.HasOne<StockTrackConfirmation>().WithMany()
                        .HasForeignKey("StockTrackConfirmationId")
                        .HasConstraintName("product_product_stock_track_co_stock_track_confirmation_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockTrackConfirmationId", "ProductProductId").HasName("product_product_stock_track_confirmation_rel_pkey");
                        j.ToTable("product_product_stock_track_confirmation_rel", tb => tb.HasComment("RELATION BETWEEN stock_track_confirmation AND product_product"));
                        j.HasIndex(new[] { "ProductProductId", "StockTrackConfirmationId" }, "product_product_stock_track_c_product_product_id_stock_trac_idx");
                        j.IndexerProperty<int>("StockTrackConfirmationId").HasColumnName("stock_track_confirmation_id");
                        j.IndexerProperty<int>("ProductProductId").HasColumnName("product_product_id");
                    });

            entity.HasMany(d => d.StockQuants).WithMany(p => p.StockTrackConfirmations)
                .UsingEntity<Dictionary<string, object>>(
                    "StockQuantStockTrackConfirmationRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_quant_stock_track_confirmation_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockTrackConfirmation>().WithMany()
                        .HasForeignKey("StockTrackConfirmationId")
                        .HasConstraintName("stock_quant_stock_track_confir_stock_track_confirmation_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockTrackConfirmationId", "StockQuantId").HasName("stock_quant_stock_track_confirmation_rel_pkey");
                        j.ToTable("stock_quant_stock_track_confirmation_rel", tb => tb.HasComment("RELATION BETWEEN stock_track_confirmation AND stock_quant"));
                        j.HasIndex(new[] { "StockQuantId", "StockTrackConfirmationId" }, "stock_quant_stock_track_confi_stock_quant_id_stock_track_co_idx");
                        j.IndexerProperty<int>("StockTrackConfirmationId").HasColumnName("stock_track_confirmation_id");
                        j.IndexerProperty<int>("StockQuantId").HasColumnName("stock_quant_id");
                    });
        });

        modelBuilder.Entity<StockTrackLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_track_line_pkey");

            entity.ToTable("stock_track_line", tb => tb.HasComment("Stock Track Line"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.WizardId)
                .HasComment("Wizard")
                .HasColumnName("wizard_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockTrackLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockTrackLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_product_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.StockTrackLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_wizard_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockTrackLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockValuationLayer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_valuation_layer_pkey");

            entity.ToTable("stock_valuation_layer", tb => tb.HasComment("Stock Valuation Layer"));

            entity.HasIndex(e => e.AccountMoveId, "stock_valuation_layer_account_move_id_index").HasFilter("(account_move_id IS NOT NULL)");

            entity.HasIndex(e => e.AccountMoveLineId, "stock_valuation_layer_account_move_line_id_index").HasFilter("(account_move_line_id IS NOT NULL)");

            entity.HasIndex(e => new { e.ProductId, e.RemainingQty, e.StockMoveId, e.CompanyId, e.CreateDate }, "stock_valuation_layer_index");

            entity.HasIndex(e => e.StockMoveId, "stock_valuation_layer_stock_move_id_index");

            entity.HasIndex(e => e.StockValuationLayerId, "stock_valuation_layer_stock_valuation_layer_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountMoveId)
                .HasComment("Journal Entry")
                .HasColumnName("account_move_id");
            entity.Property(e => e.AccountMoveLineId)
                .HasComment("Invoice Line")
                .HasColumnName("account_move_line_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("character varying")
                .HasColumnName("description");
            entity.Property(e => e.PriceDiffValue)
                .HasComment("Invoice value correction with invoice currency")
                .HasColumnName("price_diff_value");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.RemainingQty)
                .HasComment("Remaining Qty")
                .HasColumnName("remaining_qty");
            entity.Property(e => e.RemainingValue)
                .HasComment("Remaining Value")
                .HasColumnName("remaining_value");
            entity.Property(e => e.StockMoveId)
                .HasComment("Stock Move")
                .HasColumnName("stock_move_id");
            entity.Property(e => e.StockValuationLayerId)
                .HasComment("Linked To")
                .HasColumnName("stock_valuation_layer_id");
            entity.Property(e => e.UnitCost)
                .HasComment("Unit Value")
                .HasColumnName("unit_cost");
            entity.Property(e => e.Value)
                .HasComment("Total Value")
                .HasColumnName("value");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMove).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.AccountMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_account_move_id_fkey");

            entity.HasOne(d => d.AccountMoveLine).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.AccountMoveLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_account_move_line_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_valuation_layer_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockValuationLayerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_valuation_layer_product_id_fkey");

            entity.HasOne(d => d.StockMove).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.StockMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_stock_move_id_fkey");

            entity.HasOne(d => d.StockValuationLayerNavigation).WithMany(p => p.InverseStockValuationLayerNavigation)
                .HasForeignKey(d => d.StockValuationLayerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_stock_valuation_layer_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockValuationLayerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_write_uid_fkey");
        });

        modelBuilder.Entity<StockValuationLayerRevaluation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_valuation_layer_revaluation_pkey");

            entity.ToTable("stock_valuation_layer_revaluation", tb => tb.HasComment("Wizard model to reavaluate a stock inventory for a product"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasComment("Counterpart Account")
                .HasColumnName("account_id");
            entity.Property(e => e.AccountJournalId)
                .HasComment("Journal")
                .HasColumnName("account_journal_id");
            entity.Property(e => e.AddedValue)
                .HasComment("Added value")
                .HasColumnName("added_value");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Accounting Date")
                .HasColumnName("date");
            entity.Property(e => e.ProductId)
                .HasComment("Related product")
                .HasColumnName("product_id");
            entity.Property(e => e.Reason)
                .HasComment("Reason")
                .HasColumnType("character varying")
                .HasColumnName("reason");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.StockValuationLayerRevaluations)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_account_id_fkey");

            entity.HasOne(d => d.AccountJournal).WithMany(p => p.StockValuationLayerRevaluations)
                .HasForeignKey(d => d.AccountJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_account_journal_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.StockValuationLayerRevaluations)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("stock_valuation_layer_revaluation_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockValuationLayerRevaluationCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockValuationLayerRevaluations)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_valuation_layer_revaluation_product_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockValuationLayerRevaluationWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarehouse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warehouse_pkey");

            entity.ToTable("stock_warehouse", tb => tb.HasComment("Warehouse"));

            entity.HasIndex(e => new { e.Code, e.CompanyId }, "stock_warehouse_warehouse_code_uniq").IsUnique();

            entity.HasIndex(e => new { e.Name, e.CompanyId }, "stock_warehouse_warehouse_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.BuyPullId)
                .HasComment("Buy rule")
                .HasColumnName("buy_pull_id");
            entity.Property(e => e.BuyToResupply)
                .HasComment("Buy to Resupply")
                .HasColumnName("buy_to_resupply");
            entity.Property(e => e.Code)
                .HasMaxLength(5)
                .HasComment("Short Name")
                .HasColumnName("code");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CrossdockRouteId)
                .HasComment("Crossdock Route")
                .HasColumnName("crossdock_route_id");
            entity.Property(e => e.DeliveryRouteId)
                .HasComment("Delivery Route")
                .HasColumnName("delivery_route_id");
            entity.Property(e => e.DeliverySteps)
                .HasComment("Outgoing Shipments")
                .HasColumnType("character varying")
                .HasColumnName("delivery_steps");
            entity.Property(e => e.InTypeId)
                .HasComment("In Type")
                .HasColumnName("in_type_id");
            entity.Property(e => e.IntTypeId)
                .HasComment("Internal Type")
                .HasColumnName("int_type_id");
            entity.Property(e => e.LotStockId)
                .HasComment("Location Stock")
                .HasColumnName("lot_stock_id");
            entity.Property(e => e.ManuTypeId)
                .HasComment("Manufacturing Operation Type")
                .HasColumnName("manu_type_id");
            entity.Property(e => e.ManufactureMtoPullId)
                .HasComment("Manufacture MTO Rule")
                .HasColumnName("manufacture_mto_pull_id");
            entity.Property(e => e.ManufacturePullId)
                .HasComment("Manufacture Rule")
                .HasColumnName("manufacture_pull_id");
            entity.Property(e => e.ManufactureSteps)
                .HasComment("Manufacture")
                .HasColumnType("character varying")
                .HasColumnName("manufacture_steps");
            entity.Property(e => e.ManufactureToResupply)
                .HasComment("Manufacture to Resupply")
                .HasColumnName("manufacture_to_resupply");
            entity.Property(e => e.MtoPullId)
                .HasComment("MTO rule")
                .HasColumnName("mto_pull_id");
            entity.Property(e => e.Name)
                .HasComment("Warehouse")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OutTypeId)
                .HasComment("Out Type")
                .HasColumnName("out_type_id");
            entity.Property(e => e.PackTypeId)
                .HasComment("Pack Type")
                .HasColumnName("pack_type_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Address")
                .HasColumnName("partner_id");
            entity.Property(e => e.PbmLocId)
                .HasComment("Picking before Manufacturing Location")
                .HasColumnName("pbm_loc_id");
            entity.Property(e => e.PbmMtoPullId)
                .HasComment("Picking Before Manufacturing MTO Rule")
                .HasColumnName("pbm_mto_pull_id");
            entity.Property(e => e.PbmRouteId)
                .HasComment("Picking Before Manufacturing Route")
                .HasColumnName("pbm_route_id");
            entity.Property(e => e.PbmTypeId)
                .HasComment("Picking Before Manufacturing Operation Type")
                .HasColumnName("pbm_type_id");
            entity.Property(e => e.PickTypeId)
                .HasComment("Pick Type")
                .HasColumnName("pick_type_id");
            entity.Property(e => e.PosTypeId)
                .HasComment("Point of Sale Operation Type")
                .HasColumnName("pos_type_id");
            entity.Property(e => e.ReceptionRouteId)
                .HasComment("Receipt Route")
                .HasColumnName("reception_route_id");
            entity.Property(e => e.ReceptionSteps)
                .HasComment("Incoming Shipments")
                .HasColumnType("character varying")
                .HasColumnName("reception_steps");
            entity.Property(e => e.ReturnTypeId)
                .HasComment("Return Type")
                .HasColumnName("return_type_id");
            entity.Property(e => e.SamLocId)
                .HasComment("Stock after Manufacturing Location")
                .HasColumnName("sam_loc_id");
            entity.Property(e => e.SamRuleId)
                .HasComment("Stock After Manufacturing Rule")
                .HasColumnName("sam_rule_id");
            entity.Property(e => e.SamTypeId)
                .HasComment("Stock After Manufacturing Operation Type")
                .HasColumnName("sam_type_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ViewLocationId)
                .HasComment("View Location")
                .HasColumnName("view_location_id");
            entity.Property(e => e.WhInputStockLocId)
                .HasComment("Input Location")
                .HasColumnName("wh_input_stock_loc_id");
            entity.Property(e => e.WhOutputStockLocId)
                .HasComment("Output Location")
                .HasColumnName("wh_output_stock_loc_id");
            entity.Property(e => e.WhPackStockLocId)
                .HasComment("Packing Location")
                .HasColumnName("wh_pack_stock_loc_id");
            entity.Property(e => e.WhQcStockLocId)
                .HasComment("Quality Control Location")
                .HasColumnName("wh_qc_stock_loc_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.BuyPull).WithMany(p => p.StockWarehouseBuyPulls)
                .HasForeignKey(d => d.BuyPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_buy_pull_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.StockWarehouses)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockWarehouseCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_create_uid_fkey");

            entity.HasOne(d => d.CrossdockRoute).WithMany(p => p.StockWarehouseCrossdockRoutes)
                .HasForeignKey(d => d.CrossdockRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_crossdock_route_id_fkey");

            entity.HasOne(d => d.DeliveryRoute).WithMany(p => p.StockWarehouseDeliveryRoutes)
                .HasForeignKey(d => d.DeliveryRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_delivery_route_id_fkey");

            entity.HasOne(d => d.InType).WithMany(p => p.StockWarehouseInTypes)
                .HasForeignKey(d => d.InTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_in_type_id_fkey");

            entity.HasOne(d => d.IntType).WithMany(p => p.StockWarehouseIntTypes)
                .HasForeignKey(d => d.IntTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_int_type_id_fkey");

            entity.HasOne(d => d.LotStock).WithMany(p => p.StockWarehouseLotStocks)
                .HasForeignKey(d => d.LotStockId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_lot_stock_id_fkey");

            entity.HasOne(d => d.ManuType).WithMany(p => p.StockWarehouseManuTypes)
                .HasForeignKey(d => d.ManuTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_manu_type_id_fkey");

            entity.HasOne(d => d.ManufactureMtoPull).WithMany(p => p.StockWarehouseManufactureMtoPulls)
                .HasForeignKey(d => d.ManufactureMtoPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_manufacture_mto_pull_id_fkey");

            entity.HasOne(d => d.ManufacturePull).WithMany(p => p.StockWarehouseManufacturePulls)
                .HasForeignKey(d => d.ManufacturePullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_manufacture_pull_id_fkey");

            entity.HasOne(d => d.MtoPull).WithMany(p => p.StockWarehouseMtoPulls)
                .HasForeignKey(d => d.MtoPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_mto_pull_id_fkey");

            entity.HasOne(d => d.OutType).WithMany(p => p.StockWarehouseOutTypes)
                .HasForeignKey(d => d.OutTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_out_type_id_fkey");

            entity.HasOne(d => d.PackType).WithMany(p => p.StockWarehousePackTypes)
                .HasForeignKey(d => d.PackTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pack_type_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.StockWarehouses)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_partner_id_fkey");

            entity.HasOne(d => d.PbmLoc).WithMany(p => p.StockWarehousePbmLocs)
                .HasForeignKey(d => d.PbmLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pbm_loc_id_fkey");

            entity.HasOne(d => d.PbmMtoPull).WithMany(p => p.StockWarehousePbmMtoPulls)
                .HasForeignKey(d => d.PbmMtoPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pbm_mto_pull_id_fkey");

            entity.HasOne(d => d.PbmRoute).WithMany(p => p.StockWarehousePbmRoutes)
                .HasForeignKey(d => d.PbmRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_pbm_route_id_fkey");

            entity.HasOne(d => d.PbmType).WithMany(p => p.StockWarehousePbmTypes)
                .HasForeignKey(d => d.PbmTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pbm_type_id_fkey");

            entity.HasOne(d => d.PickType).WithMany(p => p.StockWarehousePickTypes)
                .HasForeignKey(d => d.PickTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pick_type_id_fkey");

            entity.HasOne(d => d.PosType).WithMany(p => p.StockWarehousePosTypes)
                .HasForeignKey(d => d.PosTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pos_type_id_fkey");

            entity.HasOne(d => d.ReceptionRoute).WithMany(p => p.StockWarehouseReceptionRoutes)
                .HasForeignKey(d => d.ReceptionRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_reception_route_id_fkey");

            entity.HasOne(d => d.ReturnType).WithMany(p => p.StockWarehouseReturnTypes)
                .HasForeignKey(d => d.ReturnTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_return_type_id_fkey");

            entity.HasOne(d => d.SamLoc).WithMany(p => p.StockWarehouseSamLocs)
                .HasForeignKey(d => d.SamLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_sam_loc_id_fkey");

            entity.HasOne(d => d.SamRule).WithMany(p => p.StockWarehouseSamRules)
                .HasForeignKey(d => d.SamRuleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_sam_rule_id_fkey");

            entity.HasOne(d => d.SamType).WithMany(p => p.StockWarehouseSamTypes)
                .HasForeignKey(d => d.SamTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_sam_type_id_fkey");

            entity.HasOne(d => d.ViewLocation).WithMany(p => p.StockWarehouseViewLocations)
                .HasForeignKey(d => d.ViewLocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_view_location_id_fkey");

            entity.HasOne(d => d.WhInputStockLoc).WithMany(p => p.StockWarehouseWhInputStockLocs)
                .HasForeignKey(d => d.WhInputStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_input_stock_loc_id_fkey");

            entity.HasOne(d => d.WhOutputStockLoc).WithMany(p => p.StockWarehouseWhOutputStockLocs)
                .HasForeignKey(d => d.WhOutputStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_output_stock_loc_id_fkey");

            entity.HasOne(d => d.WhPackStockLoc).WithMany(p => p.StockWarehouseWhPackStockLocs)
                .HasForeignKey(d => d.WhPackStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_pack_stock_loc_id_fkey");

            entity.HasOne(d => d.WhQcStockLoc).WithMany(p => p.StockWarehouseWhQcStockLocs)
                .HasForeignKey(d => d.WhQcStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_qc_stock_loc_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockWarehouseWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_write_uid_fkey");

            entity.HasMany(d => d.SuppliedWhs).WithMany(p => p.SupplierWhs)
                .UsingEntity<Dictionary<string, object>>(
                    "StockWhResupplyTable",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SuppliedWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplied_wh_id_fkey"),
                    l => l.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SupplierWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplier_wh_id_fkey"),
                    j =>
                    {
                        j.HasKey("SuppliedWhId", "SupplierWhId").HasName("stock_wh_resupply_table_pkey");
                        j.ToTable("stock_wh_resupply_table", tb => tb.HasComment("RELATION BETWEEN stock_warehouse AND stock_warehouse"));
                        j.HasIndex(new[] { "SupplierWhId", "SuppliedWhId" }, "stock_wh_resupply_table_supplier_wh_id_supplied_wh_id_idx");
                        j.IndexerProperty<int>("SuppliedWhId").HasColumnName("supplied_wh_id");
                        j.IndexerProperty<int>("SupplierWhId").HasColumnName("supplier_wh_id");
                    });

            entity.HasMany(d => d.SupplierWhs).WithMany(p => p.SuppliedWhs)
                .UsingEntity<Dictionary<string, object>>(
                    "StockWhResupplyTable",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SupplierWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplier_wh_id_fkey"),
                    l => l.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SuppliedWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplied_wh_id_fkey"),
                    j =>
                    {
                        j.HasKey("SuppliedWhId", "SupplierWhId").HasName("stock_wh_resupply_table_pkey");
                        j.ToTable("stock_wh_resupply_table", tb => tb.HasComment("RELATION BETWEEN stock_warehouse AND stock_warehouse"));
                        j.HasIndex(new[] { "SupplierWhId", "SuppliedWhId" }, "stock_wh_resupply_table_supplier_wh_id_supplied_wh_id_idx");
                        j.IndexerProperty<int>("SuppliedWhId").HasColumnName("supplied_wh_id");
                        j.IndexerProperty<int>("SupplierWhId").HasColumnName("supplier_wh_id");
                    });
        });

        modelBuilder.Entity<StockWarehouseOrderpoint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warehouse_orderpoint_pkey");

            entity.ToTable("stock_warehouse_orderpoint", tb => tb.HasComment("Minimum Inventory Rule"));

            entity.HasIndex(e => e.CompanyId, "stock_warehouse_orderpoint_company_id_index");

            entity.HasIndex(e => e.LocationId, "stock_warehouse_orderpoint_location_id_index");

            entity.HasIndex(e => new { e.ProductId, e.LocationId, e.CompanyId }, "stock_warehouse_orderpoint_product_location_check").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.BomId)
                .HasComment("Bill of Materials")
                .HasColumnName("bom_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.GroupId)
                .HasComment("Procurement Group")
                .HasColumnName("group_id");
            entity.Property(e => e.LocationId)
                .HasComment("Location")
                .HasColumnName("location_id");
            entity.Property(e => e.ManufacturingVisibilityDays)
                .HasComment("Manufacturing Visibility Days")
                .HasColumnName("manufacturing_visibility_days");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ProductCategoryId)
                .HasComment("Product Category")
                .HasColumnName("product_category_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductMaxQty)
                .HasComment("Max Quantity")
                .HasColumnName("product_max_qty");
            entity.Property(e => e.ProductMinQty)
                .HasComment("Min Quantity")
                .HasColumnName("product_min_qty");
            entity.Property(e => e.PurchaseVisibilityDays)
                .HasComment("Purchase Visibility Days")
                .HasColumnName("purchase_visibility_days");
            entity.Property(e => e.QtyMultiple)
                .HasComment("Multiple Quantity")
                .HasColumnName("qty_multiple");
            entity.Property(e => e.QtyToOrder)
                .HasComment("To Order")
                .HasColumnName("qty_to_order");
            entity.Property(e => e.RouteId)
                .HasComment("Preferred Route")
                .HasColumnName("route_id");
            entity.Property(e => e.SnoozedUntil)
                .HasComment("Snoozed")
                .HasColumnName("snoozed_until");
            entity.Property(e => e.SupplierId)
                .HasComment("Product Supplier")
                .HasColumnName("supplier_id");
            entity.Property(e => e.Trigger)
                .HasComment("Trigger")
                .HasColumnType("character varying")
                .HasColumnName("trigger");
            entity.Property(e => e.VendorId)
                .HasComment("Vendor")
                .HasColumnName("vendor_id");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_bom_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_orderpoint_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockWarehouseOrderpointCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_group_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("stock_warehouse_orderpoint_location_id_fkey");

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_product_category_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_warehouse_orderpoint_product_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_route_id_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_supplier_id_fkey");

            entity.HasOne(d => d.Vendor).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_vendor_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.WarehouseId)
                .HasConstraintName("stock_warehouse_orderpoint_warehouse_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockWarehouseOrderpointWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarnInsufficientQtyRepair>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warn_insufficient_qty_repair_pkey");

            entity.ToTable("stock_warn_insufficient_qty_repair", tb => tb.HasComment("Warn Insufficient Repair Quantity"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationId)
                .HasComment("Location")
                .HasColumnName("location_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomName)
                .HasComment("Unit of Measure")
                .HasColumnType("character varying")
                .HasColumnName("product_uom_name");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.RepairId)
                .HasComment("Repair")
                .HasColumnName("repair_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockWarnInsufficientQtyRepairCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_repair_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarnInsufficientQtyRepairs)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("stock_warn_insufficient_qty_repair_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarnInsufficientQtyRepairs)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_warn_insufficient_qty_repair_product_id_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.StockWarnInsufficientQtyRepairs)
                .HasForeignKey(d => d.RepairId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_repair_repair_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockWarnInsufficientQtyRepairWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_repair_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarnInsufficientQtyScrap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warn_insufficient_qty_scrap_pkey");

            entity.ToTable("stock_warn_insufficient_qty_scrap", tb => tb.HasComment("Warn Insufficient Scrap Quantity"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationId)
                .HasComment("Location")
                .HasColumnName("location_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomName)
                .HasComment("Unit of Measure")
                .HasColumnType("character varying")
                .HasColumnName("product_uom_name");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.ScrapId)
                .HasComment("Scrap")
                .HasColumnName("scrap_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockWarnInsufficientQtyScrapCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarnInsufficientQtyScraps)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarnInsufficientQtyScraps)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_product_id_fkey");

            entity.HasOne(d => d.Scrap).WithMany(p => p.StockWarnInsufficientQtyScraps)
                .HasForeignKey(d => d.ScrapId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_scrap_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockWarnInsufficientQtyScrapWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarnInsufficientQtyUnbuild>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warn_insufficient_qty_unbuild_pkey");

            entity.ToTable("stock_warn_insufficient_qty_unbuild", tb => tb.HasComment("Warn Insufficient Unbuild Quantity"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LocationId)
                .HasComment("Location")
                .HasColumnName("location_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductUomName)
                .HasComment("Unit of Measure")
                .HasColumnType("character varying")
                .HasColumnName("product_uom_name");
            entity.Property(e => e.Quantity)
                .HasComment("Quantity")
                .HasColumnName("quantity");
            entity.Property(e => e.UnbuildId)
                .HasComment("Unbuild")
                .HasColumnName("unbuild_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.StockWarnInsufficientQtyUnbuildCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarnInsufficientQtyUnbuilds)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarnInsufficientQtyUnbuilds)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_product_id_fkey");

            entity.HasOne(d => d.Unbuild).WithMany(p => p.StockWarnInsufficientQtyUnbuilds)
                .HasForeignKey(d => d.UnbuildId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_unbuild_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.StockWarnInsufficientQtyUnbuildWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_write_uid_fkey");
        });

        modelBuilder.Entity<SurveyInvite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("survey_invite_pkey");

            entity.ToTable("survey_invite", tb => tb.HasComment("Survey Invitation Wizard"));

            entity.HasIndex(e => e.AuthorId, "survey_invite_author_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthorId)
                .HasComment("Author")
                .HasColumnName("author_id");
            entity.Property(e => e.Body)
                .HasComment("Contents")
                .HasColumnName("body");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Deadline)
                .HasComment("Answer deadline")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deadline");
            entity.Property(e => e.EmailFrom)
                .HasComment("From")
                .HasColumnType("character varying")
                .HasColumnName("email_from");
            entity.Property(e => e.Emails)
                .HasComment("Additional emails")
                .HasColumnName("emails");
            entity.Property(e => e.ExistingMode)
                .HasComment("Handle existing")
                .HasColumnType("character varying")
                .HasColumnName("existing_mode");
            entity.Property(e => e.Lang)
                .HasComment("Language")
                .HasColumnType("character varying")
                .HasColumnName("lang");
            entity.Property(e => e.MailServerId)
                .HasComment("Outgoing mail server")
                .HasColumnName("mail_server_id");
            entity.Property(e => e.Subject)
                .HasComment("Subject")
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.SurveyId)
                .HasComment("Survey")
                .HasColumnName("survey_id");
            entity.Property(e => e.TemplateId)
                .HasComment("Mail Template")
                .HasColumnName("template_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Author).WithMany(p => p.SurveyInvites)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_invite_author_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SurveyInviteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_invite_create_uid_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.SurveyInvites)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_invite_mail_server_id_fkey");

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyInvites)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("survey_invite_survey_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.SurveyInvites)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_invite_template_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SurveyInviteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_invite_write_uid_fkey");

            entity.HasMany(d => d.Attachments).WithMany(p => p.WizardsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "SurveyMailComposeMessageIrAttachmentsRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("survey_mail_compose_message_ir_attachments_r_attachment_id_fkey"),
                    l => l.HasOne<SurveyInvite>().WithMany()
                        .HasForeignKey("WizardId")
                        .HasConstraintName("survey_mail_compose_message_ir_attachments_rel_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizardId", "AttachmentId").HasName("survey_mail_compose_message_ir_attachments_rel_pkey");
                        j.ToTable("survey_mail_compose_message_ir_attachments_rel", tb => tb.HasComment("RELATION BETWEEN survey_invite AND ir_attachment"));
                        j.HasIndex(new[] { "AttachmentId", "WizardId" }, "survey_mail_compose_message_ir_atta_attachment_id_wizard_id_idx");
                        j.IndexerProperty<int>("WizardId").HasColumnName("wizard_id");
                        j.IndexerProperty<int>("AttachmentId").HasColumnName("attachment_id");
                    });

            entity.HasMany(d => d.Partners).WithMany(p => p.Invites)
                .UsingEntity<Dictionary<string, object>>(
                    "SurveyInvitePartnerId",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("survey_invite_partner_ids_partner_id_fkey"),
                    l => l.HasOne<SurveyInvite>().WithMany()
                        .HasForeignKey("InviteId")
                        .HasConstraintName("survey_invite_partner_ids_invite_id_fkey"),
                    j =>
                    {
                        j.HasKey("InviteId", "PartnerId").HasName("survey_invite_partner_ids_pkey");
                        j.ToTable("survey_invite_partner_ids", tb => tb.HasComment("RELATION BETWEEN survey_invite AND res_partner"));
                        j.HasIndex(new[] { "PartnerId", "InviteId" }, "survey_invite_partner_ids_partner_id_invite_id_idx");
                        j.IndexerProperty<int>("InviteId").HasColumnName("invite_id");
                        j.IndexerProperty<int>("PartnerId").HasColumnName("partner_id");
                    });
        });

        modelBuilder.Entity<SurveyQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("survey_question_pkey");

            entity.ToTable("survey_question", tb => tb.HasComment("Survey Question"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnswerDate)
                .HasComment("Correct date answer")
                .HasColumnName("answer_date");
            entity.Property(e => e.AnswerDatetime)
                .HasComment("Correct datetime answer")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("answer_datetime");
            entity.Property(e => e.AnswerNumericalBox)
                .HasComment("Correct numerical answer")
                .HasColumnName("answer_numerical_box");
            entity.Property(e => e.AnswerScore)
                .HasComment("Score")
                .HasColumnName("answer_score");
            entity.Property(e => e.CommentCountAsAnswer)
                .HasComment("Comment is an answer")
                .HasColumnName("comment_count_as_answer");
            entity.Property(e => e.CommentsAllowed)
                .HasComment("Show Comments Field")
                .HasColumnName("comments_allowed");
            entity.Property(e => e.CommentsMessage)
                .HasComment("Comment Message")
                .HasColumnType("jsonb")
                .HasColumnName("comments_message");
            entity.Property(e => e.ConstrErrorMsg)
                .HasComment("Error message")
                .HasColumnType("jsonb")
                .HasColumnName("constr_error_msg");
            entity.Property(e => e.ConstrMandatory)
                .HasComment("Mandatory Answer")
                .HasColumnName("constr_mandatory");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.IsConditional)
                .HasComment("Conditional Display")
                .HasColumnName("is_conditional");
            entity.Property(e => e.IsPage)
                .HasComment("Is a page?")
                .HasColumnName("is_page");
            entity.Property(e => e.IsScoredQuestion)
                .HasComment("Scored")
                .HasColumnName("is_scored_question");
            entity.Property(e => e.IsTimeLimited)
                .HasComment("The question is limited in time")
                .HasColumnName("is_time_limited");
            entity.Property(e => e.MatrixSubtype)
                .HasComment("Matrix Type")
                .HasColumnType("character varying")
                .HasColumnName("matrix_subtype");
            entity.Property(e => e.PageId)
                .HasComment("Page")
                .HasColumnName("page_id");
            entity.Property(e => e.QuestionPlaceholder)
                .HasComment("Placeholder")
                .HasColumnType("jsonb")
                .HasColumnName("question_placeholder");
            entity.Property(e => e.QuestionType)
                .HasComment("Question Type")
                .HasColumnType("character varying")
                .HasColumnName("question_type");
            entity.Property(e => e.RandomQuestionsCount)
                .HasComment("# Questions Randomly Picked")
                .HasColumnName("random_questions_count");
            entity.Property(e => e.SaveAsEmail)
                .HasComment("Save as user email")
                .HasColumnName("save_as_email");
            entity.Property(e => e.SaveAsNickname)
                .HasComment("Save as user nickname")
                .HasColumnName("save_as_nickname");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.SurveyId)
                .HasComment("Survey")
                .HasColumnName("survey_id");
            entity.Property(e => e.TimeLimit)
                .HasComment("Time limit (seconds)")
                .HasColumnName("time_limit");
            entity.Property(e => e.Title)
                .HasComment("Title")
                .HasColumnType("jsonb")
                .HasColumnName("title");
            entity.Property(e => e.TriggeringAnswerId)
                .HasComment("Triggering Answer")
                .HasColumnName("triggering_answer_id");
            entity.Property(e => e.TriggeringQuestionId)
                .HasComment("Triggering Question")
                .HasColumnName("triggering_question_id");
            entity.Property(e => e.ValidationEmail)
                .HasComment("Input must be an email")
                .HasColumnName("validation_email");
            entity.Property(e => e.ValidationErrorMsg)
                .HasComment("Validation Error message")
                .HasColumnType("jsonb")
                .HasColumnName("validation_error_msg");
            entity.Property(e => e.ValidationLengthMax)
                .HasComment("Maximum Text Length")
                .HasColumnName("validation_length_max");
            entity.Property(e => e.ValidationLengthMin)
                .HasComment("Minimum Text Length")
                .HasColumnName("validation_length_min");
            entity.Property(e => e.ValidationMaxDate)
                .HasComment("Maximum Date")
                .HasColumnName("validation_max_date");
            entity.Property(e => e.ValidationMaxDatetime)
                .HasComment("Maximum Datetime")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("validation_max_datetime");
            entity.Property(e => e.ValidationMaxFloatValue)
                .HasComment("Maximum value")
                .HasColumnName("validation_max_float_value");
            entity.Property(e => e.ValidationMinDate)
                .HasComment("Minimum Date")
                .HasColumnName("validation_min_date");
            entity.Property(e => e.ValidationMinDatetime)
                .HasComment("Minimum Datetime")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("validation_min_datetime");
            entity.Property(e => e.ValidationMinFloatValue)
                .HasComment("Minimum value")
                .HasColumnName("validation_min_float_value");
            entity.Property(e => e.ValidationRequired)
                .HasComment("Validate entry")
                .HasColumnName("validation_required");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SurveyQuestionCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_question_create_uid_fkey");

            entity.HasOne(d => d.Page).WithMany(p => p.InversePage)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_question_page_id_fkey");

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("survey_question_survey_id_fkey");

            entity.HasOne(d => d.TriggeringAnswer).WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.TriggeringAnswerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_question_triggering_answer_id_fkey");

            entity.HasOne(d => d.TriggeringQuestion).WithMany(p => p.InverseTriggeringQuestion)
                .HasForeignKey(d => d.TriggeringQuestionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_question_triggering_question_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SurveyQuestionWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_question_write_uid_fkey");
        });

        modelBuilder.Entity<SurveyQuestionAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("survey_question_answer_pkey");

            entity.ToTable("survey_question_answer", tb => tb.HasComment("Survey Label"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnswerScore)
                .HasComment("Score")
                .HasColumnName("answer_score");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsCorrect)
                .HasComment("Correct")
                .HasColumnName("is_correct");
            entity.Property(e => e.MatrixQuestionId)
                .HasComment("Question (as matrix row)")
                .HasColumnName("matrix_question_id");
            entity.Property(e => e.QuestionId)
                .HasComment("Question")
                .HasColumnName("question_id");
            entity.Property(e => e.Sequence)
                .HasComment("Label Sequence order")
                .HasColumnName("sequence");
            entity.Property(e => e.Value)
                .HasComment("Suggested value")
                .HasColumnType("jsonb")
                .HasColumnName("value");
            entity.Property(e => e.ValueImageFilename)
                .HasComment("Image Filename")
                .HasColumnType("character varying")
                .HasColumnName("value_image_filename");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SurveyQuestionAnswerCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_question_answer_create_uid_fkey");

            entity.HasOne(d => d.MatrixQuestion).WithMany(p => p.SurveyQuestionAnswerMatrixQuestions)
                .HasForeignKey(d => d.MatrixQuestionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("survey_question_answer_matrix_question_id_fkey");

            entity.HasOne(d => d.Question).WithMany(p => p.SurveyQuestionAnswerQuestions)
                .HasForeignKey(d => d.QuestionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("survey_question_answer_question_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SurveyQuestionAnswerWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_question_answer_write_uid_fkey");
        });

        modelBuilder.Entity<SurveySurvey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("survey_survey_pkey");

            entity.ToTable("survey_survey", tb => tb.HasComment("Survey"));

            entity.HasIndex(e => e.AccessToken, "survey_survey_access_token_unique").IsUnique();

            entity.HasIndex(e => e.CertificationBadgeId, "survey_survey_badge_uniq").IsUnique();

            entity.HasIndex(e => e.SessionCode, "survey_survey_session_code_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessMode)
                .HasComment("Access Mode")
                .HasColumnType("character varying")
                .HasColumnName("access_mode");
            entity.Property(e => e.AccessToken)
                .HasComment("Access Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.AttemptsLimit)
                .HasComment("Number of attempts")
                .HasColumnName("attempts_limit");
            entity.Property(e => e.Certification)
                .HasComment("Is a Certification")
                .HasColumnName("certification");
            entity.Property(e => e.CertificationBadgeId)
                .HasComment("Certification Badge")
                .HasColumnName("certification_badge_id");
            entity.Property(e => e.CertificationGiveBadge)
                .HasComment("Give Badge")
                .HasColumnName("certification_give_badge");
            entity.Property(e => e.CertificationMailTemplateId)
                .HasComment("Certified Email Template")
                .HasColumnName("certification_mail_template_id");
            entity.Property(e => e.CertificationReportLayout)
                .HasComment("Certification template")
                .HasColumnType("character varying")
                .HasColumnName("certification_report_layout");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.DescriptionDone)
                .HasComment("End Message")
                .HasColumnType("jsonb")
                .HasColumnName("description_done");
            entity.Property(e => e.IsAttemptsLimited)
                .HasComment("Limited number of attempts")
                .HasColumnName("is_attempts_limited");
            entity.Property(e => e.IsTimeLimited)
                .HasComment("The survey is limited in time")
                .HasColumnName("is_time_limited");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.ProgressionMode)
                .HasComment("Display Progress as")
                .HasColumnType("character varying")
                .HasColumnName("progression_mode");
            entity.Property(e => e.QuestionsLayout)
                .HasComment("Pagination")
                .HasColumnType("character varying")
                .HasColumnName("questions_layout");
            entity.Property(e => e.QuestionsSelection)
                .HasComment("Question Selection")
                .HasColumnType("character varying")
                .HasColumnName("questions_selection");
            entity.Property(e => e.ScoringSuccessMin)
                .HasComment("Required Score (%)")
                .HasColumnName("scoring_success_min");
            entity.Property(e => e.ScoringType)
                .HasComment("Scoring")
                .HasColumnType("character varying")
                .HasColumnName("scoring_type");
            entity.Property(e => e.SessionCode)
                .HasComment("Session Code")
                .HasColumnType("character varying")
                .HasColumnName("session_code");
            entity.Property(e => e.SessionQuestionId)
                .HasComment("Current Question")
                .HasColumnName("session_question_id");
            entity.Property(e => e.SessionQuestionStartTime)
                .HasComment("Current Question Start Time")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("session_question_start_time");
            entity.Property(e => e.SessionSpeedRating)
                .HasComment("Reward quick answers")
                .HasColumnName("session_speed_rating");
            entity.Property(e => e.SessionStartTime)
                .HasComment("Current Session Start Time")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("session_start_time");
            entity.Property(e => e.SessionState)
                .HasComment("Session State")
                .HasColumnType("character varying")
                .HasColumnName("session_state");
            entity.Property(e => e.TimeLimit)
                .HasComment("Time limit (minutes)")
                .HasColumnName("time_limit");
            entity.Property(e => e.Title)
                .HasComment("Survey Title")
                .HasColumnType("jsonb")
                .HasColumnName("title");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.UsersCanGoBack)
                .HasComment("Users can go back")
                .HasColumnName("users_can_go_back");
            entity.Property(e => e.UsersLoginRequired)
                .HasComment("Require Login")
                .HasColumnName("users_login_required");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CertificationBadge).WithOne(p => p.SurveySurvey)
                .HasForeignKey<SurveySurvey>(d => d.CertificationBadgeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_survey_certification_badge_id_fkey");

            entity.HasOne(d => d.CertificationMailTemplate).WithMany(p => p.SurveySurveys)
                .HasForeignKey(d => d.CertificationMailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_survey_certification_mail_template_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SurveySurveyCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_survey_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.SurveySurveys)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_survey_message_main_attachment_id_fkey");

            entity.HasOne(d => d.SessionQuestion).WithMany(p => p.SurveySurveys)
                .HasForeignKey(d => d.SessionQuestionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_survey_session_question_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.SurveySurveyUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_survey_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SurveySurveyWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_survey_write_uid_fkey");
        });

        modelBuilder.Entity<SurveyUserInput>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("survey_user_input_pkey");

            entity.ToTable("survey_user_input", tb => tb.HasComment("Survey User Input"));

            entity.HasIndex(e => e.SlidePartnerId, "survey_user_input_slide_partner_id_index").HasFilter("(slide_partner_id IS NOT NULL)");

            entity.HasIndex(e => e.AccessToken, "survey_user_input_unique_token").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Identification token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Deadline)
                .HasComment("Deadline")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deadline");
            entity.Property(e => e.Email)
                .HasComment("Email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EndDatetime)
                .HasComment("End date and time")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_datetime");
            entity.Property(e => e.InviteToken)
                .HasComment("Invite token")
                .HasColumnType("character varying")
                .HasColumnName("invite_token");
            entity.Property(e => e.IsSessionAnswer)
                .HasComment("Is in a Session")
                .HasColumnName("is_session_answer");
            entity.Property(e => e.LastDisplayedPageId)
                .HasComment("Last displayed question/page")
                .HasColumnName("last_displayed_page_id");
            entity.Property(e => e.MessageMainAttachmentId)
                .HasComment("Main Attachment")
                .HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Nickname)
                .HasComment("Nickname")
                .HasColumnType("character varying")
                .HasColumnName("nickname");
            entity.Property(e => e.PartnerId)
                .HasComment("Contact")
                .HasColumnName("partner_id");
            entity.Property(e => e.ScoringPercentage)
                .HasComment("Score (%)")
                .HasColumnName("scoring_percentage");
            entity.Property(e => e.ScoringSuccess)
                .HasComment("Quizz Passed")
                .HasColumnName("scoring_success");
            entity.Property(e => e.ScoringTotal)
                .HasComment("Total Score")
                .HasColumnName("scoring_total");
            entity.Property(e => e.SlideId)
                .HasComment("Related course slide")
                .HasColumnName("slide_id");
            entity.Property(e => e.SlidePartnerId)
                .HasComment("Subscriber information")
                .HasColumnName("slide_partner_id");
            entity.Property(e => e.StartDatetime)
                .HasComment("Start date and time")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_datetime");
            entity.Property(e => e.State)
                .HasComment("Status")
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.SurveyId)
                .HasComment("Survey")
                .HasColumnName("survey_id");
            entity.Property(e => e.TestEntry)
                .HasComment("Test Entry")
                .HasColumnName("test_entry");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SurveyUserInputCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_create_uid_fkey");

            entity.HasOne(d => d.LastDisplayedPage).WithMany(p => p.SurveyUserInputsNavigation)
                .HasForeignKey(d => d.LastDisplayedPageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_last_displayed_page_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.SurveyUserInputs)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.SurveyUserInputs)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_partner_id_fkey");

            entity.HasOne(d => d.Slide).WithMany(p => p.SurveyUserInputs)
                .HasForeignKey(d => d.SlideId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_slide_id_fkey");

            entity.HasOne(d => d.SlidePartner).WithMany(p => p.SurveyUserInputs)
                .HasForeignKey(d => d.SlidePartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_slide_partner_id_fkey");

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyUserInputs)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("survey_user_input_survey_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SurveyUserInputWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_write_uid_fkey");

            entity.HasMany(d => d.SurveyQuestions).WithMany(p => p.SurveyUserInputs)
                .UsingEntity<Dictionary<string, object>>(
                    "SurveyQuestionSurveyUserInputRel",
                    r => r.HasOne<SurveyQuestion>().WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("survey_question_survey_user_input_rel_survey_question_id_fkey"),
                    l => l.HasOne<SurveyUserInput>().WithMany()
                        .HasForeignKey("SurveyUserInputId")
                        .HasConstraintName("survey_question_survey_user_input_rel_survey_user_input_id_fkey"),
                    j =>
                    {
                        j.HasKey("SurveyUserInputId", "SurveyQuestionId").HasName("survey_question_survey_user_input_rel_pkey");
                        j.ToTable("survey_question_survey_user_input_rel", tb => tb.HasComment("RELATION BETWEEN survey_user_input AND survey_question"));
                        j.HasIndex(new[] { "SurveyQuestionId", "SurveyUserInputId" }, "survey_question_survey_user_i_survey_question_id_survey_use_idx");
                        j.IndexerProperty<int>("SurveyUserInputId").HasColumnName("survey_user_input_id");
                        j.IndexerProperty<int>("SurveyQuestionId").HasColumnName("survey_question_id");
                    });
        });

        modelBuilder.Entity<SurveyUserInputLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("survey_user_input_line_pkey");

            entity.ToTable("survey_user_input_line", tb => tb.HasComment("Survey User Input Line"));

            entity.HasIndex(e => e.UserInputId, "survey_user_input_line_user_input_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnswerIsCorrect)
                .HasComment("Correct")
                .HasColumnName("answer_is_correct");
            entity.Property(e => e.AnswerScore)
                .HasComment("Score")
                .HasColumnName("answer_score");
            entity.Property(e => e.AnswerType)
                .HasComment("Answer Type")
                .HasColumnType("character varying")
                .HasColumnName("answer_type");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MatrixRowId)
                .HasComment("Row answer")
                .HasColumnName("matrix_row_id");
            entity.Property(e => e.QuestionId)
                .HasComment("Question")
                .HasColumnName("question_id");
            entity.Property(e => e.QuestionSequence)
                .HasComment("Sequence")
                .HasColumnName("question_sequence");
            entity.Property(e => e.Skipped)
                .HasComment("Skipped")
                .HasColumnName("skipped");
            entity.Property(e => e.SuggestedAnswerId)
                .HasComment("Suggested answer")
                .HasColumnName("suggested_answer_id");
            entity.Property(e => e.SurveyId)
                .HasComment("Survey")
                .HasColumnName("survey_id");
            entity.Property(e => e.UserInputId)
                .HasComment("User Input")
                .HasColumnName("user_input_id");
            entity.Property(e => e.ValueCharBox)
                .HasComment("Text answer")
                .HasColumnType("character varying")
                .HasColumnName("value_char_box");
            entity.Property(e => e.ValueDate)
                .HasComment("Date answer")
                .HasColumnName("value_date");
            entity.Property(e => e.ValueDatetime)
                .HasComment("Datetime answer")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("value_datetime");
            entity.Property(e => e.ValueNumericalBox)
                .HasComment("Numerical answer")
                .HasColumnName("value_numerical_box");
            entity.Property(e => e.ValueTextBox)
                .HasComment("Free Text answer")
                .HasColumnName("value_text_box");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.SurveyUserInputLineCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_line_create_uid_fkey");

            entity.HasOne(d => d.MatrixRow).WithMany(p => p.SurveyUserInputLineMatrixRows)
                .HasForeignKey(d => d.MatrixRowId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_line_matrix_row_id_fkey");

            entity.HasOne(d => d.Question).WithMany(p => p.SurveyUserInputLines)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("survey_user_input_line_question_id_fkey");

            entity.HasOne(d => d.SuggestedAnswer).WithMany(p => p.SurveyUserInputLineSuggestedAnswers)
                .HasForeignKey(d => d.SuggestedAnswerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_line_suggested_answer_id_fkey");

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyUserInputLines)
                .HasForeignKey(d => d.SurveyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_line_survey_id_fkey");

            entity.HasOne(d => d.UserInput).WithMany(p => p.SurveyUserInputLines)
                .HasForeignKey(d => d.UserInputId)
                .HasConstraintName("survey_user_input_line_user_input_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.SurveyUserInputLineWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("survey_user_input_line_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeIrAsset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_ir_asset_pkey");

            entity.ToTable("theme_ir_asset", tb => tb.HasComment("Theme Asset"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Bundle)
                .HasComment("Bundle")
                .HasColumnType("character varying")
                .HasColumnName("bundle");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Directive)
                .HasComment("Directive")
                .HasColumnType("character varying")
                .HasColumnName("directive");
            entity.Property(e => e.Key)
                .HasComment("Key")
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Path)
                .HasComment("Path")
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Target)
                .HasComment("Target")
                .HasColumnType("character varying")
                .HasColumnName("target");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ThemeIrAssetCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_asset_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ThemeIrAssetWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_asset_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeIrAttachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_ir_attachment_pkey");

            entity.ToTable("theme_ir_attachment", tb => tb.HasComment("Theme Attachments"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Key)
                .HasComment("Key")
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Url)
                .HasComment("Url")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ThemeIrAttachmentCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_attachment_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ThemeIrAttachmentWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_attachment_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeIrUiView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_ir_ui_view_pkey");

            entity.ToTable("theme_ir_ui_view", tb => tb.HasComment("Theme UI View"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.Arch)
                .HasComment("Arch")
                .HasColumnType("jsonb")
                .HasColumnName("arch");
            entity.Property(e => e.ArchFs)
                .HasComment("Arch Fs")
                .HasColumnType("character varying")
                .HasColumnName("arch_fs");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CustomizeShow)
                .HasComment("Customize Show")
                .HasColumnName("customize_show");
            entity.Property(e => e.InheritId)
                .HasComment("Inherit")
                .HasColumnType("character varying")
                .HasColumnName("inherit_id");
            entity.Property(e => e.Key)
                .HasComment("Key")
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.Mode)
                .HasComment("Mode")
                .HasColumnType("character varying")
                .HasColumnName("mode");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Priority)
                .HasComment("Priority")
                .HasColumnName("priority");
            entity.Property(e => e.Type)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ThemeIrUiViewCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_ui_view_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ThemeIrUiViewWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_ui_view_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeWebsiteMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_website_menu_pkey");

            entity.ToTable("theme_website_menu", tb => tb.HasComment("Website Theme Menu"));

            entity.HasIndex(e => e.ParentId, "theme_website_menu_parent_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MegaMenuClasses)
                .HasComment("Mega Menu Classes")
                .HasColumnType("character varying")
                .HasColumnName("mega_menu_classes");
            entity.Property(e => e.MegaMenuContent)
                .HasComment("Mega Menu Content")
                .HasColumnName("mega_menu_content");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NewWindow)
                .HasComment("New Window")
                .HasColumnName("new_window");
            entity.Property(e => e.PageId)
                .HasComment("Page")
                .HasColumnName("page_id");
            entity.Property(e => e.ParentId)
                .HasComment("Parent")
                .HasColumnName("parent_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.Url)
                .HasComment("Url")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.UseMainMenuAsParent)
                .HasComment("Use Main Menu As Parent")
                .HasColumnName("use_main_menu_as_parent");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ThemeWebsiteMenuCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_menu_create_uid_fkey");

            entity.HasOne(d => d.Page).WithMany(p => p.ThemeWebsiteMenus)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("theme_website_menu_page_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("theme_website_menu_parent_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ThemeWebsiteMenuWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_menu_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeWebsitePage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_website_page_pkey");

            entity.ToTable("theme_website_page", tb => tb.HasComment("Website Theme Page"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FooterVisible)
                .HasComment("Footer Visible")
                .HasColumnName("footer_visible");
            entity.Property(e => e.HeaderColor)
                .HasComment("Header Color")
                .HasColumnType("character varying")
                .HasColumnName("header_color");
            entity.Property(e => e.HeaderOverlay)
                .HasComment("Header Overlay")
                .HasColumnName("header_overlay");
            entity.Property(e => e.HeaderVisible)
                .HasComment("Header Visible")
                .HasColumnName("header_visible");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Url)
                .HasComment("Url")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.ViewId)
                .HasComment("View")
                .HasColumnName("view_id");
            entity.Property(e => e.WebsiteIndexed)
                .HasComment("Page Indexed")
                .HasColumnName("website_indexed");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ThemeWebsitePageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_page_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.ThemeWebsitePages)
                .HasForeignKey(d => d.ViewId)
                .HasConstraintName("theme_website_page_view_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ThemeWebsitePageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_page_write_uid_fkey");
        });

        modelBuilder.Entity<UomCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("uom_category_pkey");

            entity.ToTable("uom_category", tb => tb.HasComment("Product UoM Categories"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsPosGroupable)
                .HasComment("Group Products in POS")
                .HasColumnName("is_pos_groupable");
            entity.Property(e => e.Name)
                .HasComment("Unit of Measure Category")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.UomCategoryCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_category_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.UomCategoryWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_category_write_uid_fkey");
        });

        modelBuilder.Entity<UomUom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("uom_uom_pkey");

            entity.ToTable("uom_uom", tb => tb.HasComment("Product Unit of Measure"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CategoryId)
                .HasComment("Category")
                .HasColumnName("category_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Factor)
                .HasComment("Ratio")
                .HasColumnName("factor");
            entity.Property(e => e.Name)
                .HasComment("Unit of Measure")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Rounding)
                .HasComment("Rounding Precision")
                .HasColumnName("rounding");
            entity.Property(e => e.UomType)
                .HasComment("Type")
                .HasColumnType("character varying")
                .HasColumnName("uom_type");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.UomUoms)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("uom_uom_category_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.UomUomCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_uom_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.UomUomWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_uom_write_uid_fkey");
        });

        modelBuilder.Entity<UtmCampaign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_campaign_pkey");

            entity.ToTable("utm_campaign", tb => tb.HasComment("UTM Campaign"));

            entity.HasIndex(e => e.Name, "utm_campaign_unique_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AbTestingCompleted)
                .HasComment("A/B Testing Campaign Finished")
                .HasColumnName("ab_testing_completed");
            entity.Property(e => e.AbTestingScheduleDatetime)
                .HasComment("Send Final On")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ab_testing_schedule_datetime");
            entity.Property(e => e.AbTestingSmsWinnerSelection)
                .HasComment("SMS Winner Selection")
                .HasColumnType("character varying")
                .HasColumnName("ab_testing_sms_winner_selection");
            entity.Property(e => e.AbTestingTotalPc)
                .HasComment("Total A/B test percentage")
                .HasColumnName("ab_testing_total_pc");
            entity.Property(e => e.AbTestingWinnerSelection)
                .HasComment("Winner Selection")
                .HasColumnType("character varying")
                .HasColumnName("ab_testing_winner_selection");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.IsAutoCampaign)
                .HasComment("Automatically Generated Campaign")
                .HasColumnName("is_auto_campaign");
            entity.Property(e => e.Name)
                .HasComment("Campaign Identifier")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.StageId)
                .HasComment("Stage")
                .HasColumnName("stage_id");
            entity.Property(e => e.Title)
                .HasComment("Campaign Name")
                .HasColumnType("jsonb")
                .HasColumnName("title");
            entity.Property(e => e.UserId)
                .HasComment("Responsible")
                .HasColumnName("user_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithMany(p => p.UtmCampaigns)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_campaign_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.UtmCampaignCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_campaign_create_uid_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.UtmCampaigns)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("utm_campaign_stage_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.UtmCampaignUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("utm_campaign_user_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.UtmCampaignWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_campaign_write_uid_fkey");

            entity.HasMany(d => d.Campaigns).WithMany(p => p.Tags)
                .UsingEntity<Dictionary<string, object>>(
                    "UtmTagRel",
                    r => r.HasOne<UtmTag>().WithMany()
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("utm_tag_rel_campaign_id_fkey"),
                    l => l.HasOne<UtmCampaign>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("utm_tag_rel_tag_id_fkey"),
                    j =>
                    {
                        j.HasKey("TagId", "CampaignId").HasName("utm_tag_rel_pkey");
                        j.ToTable("utm_tag_rel", tb => tb.HasComment("RELATION BETWEEN utm_campaign AND utm_tag"));
                        j.HasIndex(new[] { "CampaignId", "TagId" }, "utm_tag_rel_campaign_id_tag_id_idx");
                        j.IndexerProperty<int>("TagId").HasColumnName("tag_id");
                        j.IndexerProperty<int>("CampaignId").HasColumnName("campaign_id");
                    });
        });

        modelBuilder.Entity<UtmMedium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_medium_pkey");

            entity.ToTable("utm_medium", tb => tb.HasComment("UTM Medium"));

            entity.HasIndex(e => e.Name, "utm_medium_unique_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Medium Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.UtmMediumCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_medium_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.UtmMediumWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_medium_write_uid_fkey");
        });

        modelBuilder.Entity<UtmSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_source_pkey");

            entity.ToTable("utm_source", tb => tb.HasComment("UTM Source"));

            entity.HasIndex(e => e.Name, "utm_source_unique_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Source Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.UtmSourceCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_source_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.UtmSourceWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_source_write_uid_fkey");
        });

        modelBuilder.Entity<UtmStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_stage_pkey");

            entity.ToTable("utm_stage", tb => tb.HasComment("Campaign Stage"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.UtmStageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_stage_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.UtmStageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_stage_write_uid_fkey");
        });

        modelBuilder.Entity<UtmTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_tag_pkey");

            entity.ToTable("utm_tag", tb => tb.HasComment("UTM Tag"));

            entity.HasIndex(e => e.Name, "utm_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color)
                .HasComment("Color Index")
                .HasColumnName("color");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.UtmTagCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_tag_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.UtmTagWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_tag_write_uid_fkey");
        });

        modelBuilder.Entity<ValidateAccountMove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("validate_account_move_pkey");

            entity.ToTable("validate_account_move", tb => tb.HasComment("Validate Account Move"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.ForcePost)
                .HasComment("Force")
                .HasColumnName("force_post");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.ValidateAccountMoveCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("validate_account_move_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.ValidateAccountMoveWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("validate_account_move_write_uid_fkey");
        });

        modelBuilder.Entity<VendorDelayReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vendor_delay_report");

            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.PurchaseLineId).HasColumnName("purchase_line_id");
            entity.Property(e => e.QtyOnTime).HasColumnName("qty_on_time");
            entity.Property(e => e.QtyTotal).HasColumnName("qty_total");
        });

        modelBuilder.Entity<WebEditorConverterTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("web_editor_converter_test_pkey");

            entity.ToTable("web_editor_converter_test", tb => tb.HasComment("Web Editor Converter Test"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Binary)
                .HasComment("Binary")
                .HasColumnName("binary");
            entity.Property(e => e.Char)
                .HasComment("Char")
                .HasColumnType("character varying")
                .HasColumnName("char");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasComment("Date")
                .HasColumnName("date");
            entity.Property(e => e.Datetime)
                .HasComment("Datetime")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datetime");
            entity.Property(e => e.Float)
                .HasComment("Float")
                .HasColumnName("float");
            entity.Property(e => e.Html)
                .HasComment("Html")
                .HasColumnName("html");
            entity.Property(e => e.Integer)
                .HasComment("Integer")
                .HasColumnName("integer");
            entity.Property(e => e.Many2one)
                .HasComment("Many2One")
                .HasColumnName("many2one");
            entity.Property(e => e.Numeric)
                .HasComment("Numeric")
                .HasColumnName("numeric");
            entity.Property(e => e.SelectionStr)
                .HasComment("Lorsqu'un pancake prend l'avion à destination de Toronto et qu'il fait une escale technique à St Claude, on dit:")
                .HasColumnType("character varying")
                .HasColumnName("selection_str");
            entity.Property(e => e.Text)
                .HasComment("Text")
                .HasColumnName("text");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebEditorConverterTestCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_create_uid_fkey");

            entity.HasOne(d => d.Many2oneNavigation).WithMany(p => p.WebEditorConverterTests)
                .HasForeignKey(d => d.Many2one)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_many2one_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebEditorConverterTestWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_write_uid_fkey");
        });

        modelBuilder.Entity<WebEditorConverterTestSub>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("web_editor_converter_test_sub_pkey");

            entity.ToTable("web_editor_converter_test_sub", tb => tb.HasComment("Web Editor Converter Subtest"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebEditorConverterTestSubCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_sub_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebEditorConverterTestSubWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_sub_write_uid_fkey");
        });

        modelBuilder.Entity<WebTourTour>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("web_tour_tour_pkey");

            entity.ToTable("web_tour_tour", tb => tb.HasComment("Tours"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasComment("Tour name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserId)
                .HasComment("Consumed by")
                .HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.WebTourTours)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_tour_tour_user_id_fkey");
        });

        modelBuilder.Entity<Website>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_pkey");

            entity.ToTable("website", tb => tb.HasComment("Website"));

            entity.HasIndex(e => e.Domain, "website_domain_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountOnCheckout)
                .HasComment("Customer Accounts")
                .HasColumnType("character varying")
                .HasColumnName("account_on_checkout");
            entity.Property(e => e.AddToCartAction)
                .HasComment("Add To Cart Action")
                .HasColumnType("character varying")
                .HasColumnName("add_to_cart_action");
            entity.Property(e => e.AuthSignupUninvited)
                .HasComment("Customer Account")
                .HasColumnType("character varying")
                .HasColumnName("auth_signup_uninvited");
            entity.Property(e => e.AutoRedirectLang)
                .HasComment("Autoredirect Language")
                .HasColumnName("auto_redirect_lang");
            entity.Property(e => e.CartAbandonedDelay)
                .HasComment("Abandoned Delay")
                .HasColumnName("cart_abandoned_delay");
            entity.Property(e => e.CartRecoveryMailTemplateId)
                .HasComment("Cart Recovery Email")
                .HasColumnName("cart_recovery_mail_template_id");
            entity.Property(e => e.CdnActivated)
                .HasComment("Content Delivery Network (CDN)")
                .HasColumnName("cdn_activated");
            entity.Property(e => e.CdnFilters)
                .HasComment("CDN Filters")
                .HasColumnName("cdn_filters");
            entity.Property(e => e.CdnUrl)
                .HasComment("CDN Base URL")
                .HasColumnType("character varying")
                .HasColumnName("cdn_url");
            entity.Property(e => e.ChannelId)
                .HasComment("Website Live Chat Channel")
                .HasColumnName("channel_id");
            entity.Property(e => e.CompanyId)
                .HasComment("Company")
                .HasColumnName("company_id");
            entity.Property(e => e.ConfiguratorDone)
                .HasComment("Configurator Done")
                .HasColumnName("configurator_done");
            entity.Property(e => e.ContactUsButtonUrl)
                .HasComment("Contact Us Button URL")
                .HasColumnType("jsonb")
                .HasColumnName("contact_us_button_url");
            entity.Property(e => e.CookiesBar)
                .HasComment("Cookies Bar")
                .HasColumnName("cookies_bar");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.CrmDefaultTeamId)
                .HasComment("Default Sales Teams")
                .HasColumnName("crm_default_team_id");
            entity.Property(e => e.CrmDefaultUserId)
                .HasComment("Default Salesperson")
                .HasColumnName("crm_default_user_id");
            entity.Property(e => e.CustomCodeFooter)
                .HasComment("Custom end of <body> code")
                .HasColumnName("custom_code_footer");
            entity.Property(e => e.CustomCodeHead)
                .HasComment("Custom <head> code")
                .HasColumnName("custom_code_head");
            entity.Property(e => e.DefaultLangId)
                .HasComment("Default Language")
                .HasColumnName("default_lang_id");
            entity.Property(e => e.Domain)
                .HasComment("Website Domain")
                .HasColumnType("character varying")
                .HasColumnName("domain");
            entity.Property(e => e.EnabledPortalReorderButton)
                .HasComment("Re-order From Portal")
                .HasColumnName("enabled_portal_reorder_button");
            entity.Property(e => e.GoogleAnalyticsKey)
                .HasComment("Google Analytics Key")
                .HasColumnType("character varying")
                .HasColumnName("google_analytics_key");
            entity.Property(e => e.GoogleMapsApiKey)
                .HasComment("Google Maps API Key")
                .HasColumnType("character varying")
                .HasColumnName("google_maps_api_key");
            entity.Property(e => e.GoogleSearchConsole)
                .HasComment("Google Search Console")
                .HasColumnType("character varying")
                .HasColumnName("google_search_console");
            entity.Property(e => e.HasSocialDefaultImage)
                .HasComment("Has Social Default Image")
                .HasColumnName("has_social_default_image");
            entity.Property(e => e.HomepageUrl)
                .HasComment("Homepage Url")
                .HasColumnType("character varying")
                .HasColumnName("homepage_url");
            entity.Property(e => e.KarmaProfileMin)
                .HasComment("Minimal karma to see other user's profile")
                .HasColumnName("karma_profile_min");
            entity.Property(e => e.Name)
                .HasComment("Website Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PlausibleSharedKey)
                .HasComment("Plausible Shared Key")
                .HasColumnType("character varying")
                .HasColumnName("plausible_shared_key");
            entity.Property(e => e.PlausibleSite)
                .HasComment("Plausible Site")
                .HasColumnType("character varying")
                .HasColumnName("plausible_site");
            entity.Property(e => e.PreventZeroPriceSale)
                .HasComment("Hide 'Add To Cart' when price = 0")
                .HasColumnName("prevent_zero_price_sale");
            entity.Property(e => e.PreventZeroPriceSaleText)
                .HasComment("Text to show instead of price")
                .HasColumnType("jsonb")
                .HasColumnName("prevent_zero_price_sale_text");
            entity.Property(e => e.ProductPageGridColumns)
                .HasComment("Product Page Grid Columns")
                .HasColumnName("product_page_grid_columns");
            entity.Property(e => e.ProductPageImageLayout)
                .HasComment("Product Page Image Layout")
                .HasColumnType("character varying")
                .HasColumnName("product_page_image_layout");
            entity.Property(e => e.ProductPageImageSpacing)
                .HasComment("Product Page Image Spacing")
                .HasColumnType("character varying")
                .HasColumnName("product_page_image_spacing");
            entity.Property(e => e.ProductPageImageWidth)
                .HasComment("Product Page Image Width")
                .HasColumnType("character varying")
                .HasColumnName("product_page_image_width");
            entity.Property(e => e.RobotsTxt)
                .HasComment("Robots.txt")
                .HasColumnName("robots_txt");
            entity.Property(e => e.SalespersonId)
                .HasComment("Salesperson")
                .HasColumnName("salesperson_id");
            entity.Property(e => e.SalesteamId)
                .HasComment("Sales Team")
                .HasColumnName("salesteam_id");
            entity.Property(e => e.SendAbandonedCartEmail)
                .HasComment("Send email to customers who abandoned their cart.")
                .HasColumnName("send_abandoned_cart_email");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ShopDefaultSort)
                .HasComment("Shop Default Sort")
                .HasColumnType("character varying")
                .HasColumnName("shop_default_sort");
            entity.Property(e => e.ShopPpg)
                .HasComment("Number of products in the grid on the shop")
                .HasColumnName("shop_ppg");
            entity.Property(e => e.ShopPpr)
                .HasComment("Number of grid columns on the shop")
                .HasColumnName("shop_ppr");
            entity.Property(e => e.SocialFacebook)
                .HasComment("Facebook Account")
                .HasColumnType("character varying")
                .HasColumnName("social_facebook");
            entity.Property(e => e.SocialGithub)
                .HasComment("GitHub Account")
                .HasColumnType("character varying")
                .HasColumnName("social_github");
            entity.Property(e => e.SocialInstagram)
                .HasComment("Instagram Account")
                .HasColumnType("character varying")
                .HasColumnName("social_instagram");
            entity.Property(e => e.SocialLinkedin)
                .HasComment("LinkedIn Account")
                .HasColumnType("character varying")
                .HasColumnName("social_linkedin");
            entity.Property(e => e.SocialTwitter)
                .HasComment("Twitter Account")
                .HasColumnType("character varying")
                .HasColumnName("social_twitter");
            entity.Property(e => e.SocialYoutube)
                .HasComment("Youtube Account")
                .HasColumnType("character varying")
                .HasColumnName("social_youtube");
            entity.Property(e => e.SpecificUserAccount)
                .HasComment("Specific User Account")
                .HasColumnName("specific_user_account");
            entity.Property(e => e.ThemeId)
                .HasComment("Theme")
                .HasColumnName("theme_id");
            entity.Property(e => e.UserId)
                .HasComment("Public User")
                .HasColumnName("user_id");
            entity.Property(e => e.WarehouseId)
                .HasComment("Warehouse")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.WebsiteSlideGoogleAppKey)
                .HasComment("Google Doc Key")
                .HasColumnType("character varying")
                .HasColumnName("website_slide_google_app_key");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CartRecoveryMailTemplate).WithMany(p => p.Websites)
                .HasForeignKey(d => d.CartRecoveryMailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_cart_recovery_mail_template_id_fkey");

            entity.HasOne(d => d.Channel).WithMany(p => p.Websites)
                .HasForeignKey(d => d.ChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_channel_id_fkey");

            entity.HasOne(d => d.Company).WithMany(p => p.Websites)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("website_company_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_create_uid_fkey");

            entity.HasOne(d => d.CrmDefaultTeam).WithMany(p => p.WebsiteCrmDefaultTeams)
                .HasForeignKey(d => d.CrmDefaultTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_crm_default_team_id_fkey");

            entity.HasOne(d => d.CrmDefaultUser).WithMany(p => p.WebsiteCrmDefaultUsers)
                .HasForeignKey(d => d.CrmDefaultUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_crm_default_user_id_fkey");

            entity.HasOne(d => d.DefaultLang).WithMany(p => p.Websites)
                .HasForeignKey(d => d.DefaultLangId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("website_default_lang_id_fkey");

            entity.HasOne(d => d.Salesperson).WithMany(p => p.WebsiteSalespeople)
                .HasForeignKey(d => d.SalespersonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_salesperson_id_fkey");

            entity.HasOne(d => d.Salesteam).WithMany(p => p.WebsiteSalesteams)
                .HasForeignKey(d => d.SalesteamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_salesteam_id_fkey");

            entity.HasOne(d => d.Theme).WithMany(p => p.Websites)
                .HasForeignKey(d => d.ThemeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_theme_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.WebsiteUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("website_user_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.Websites)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_warehouse_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_write_uid_fkey");

            entity.HasMany(d => d.Langs).WithMany(p => p.WebsitesNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "WebsiteLangRel",
                    r => r.HasOne<ResLang>().WithMany()
                        .HasForeignKey("LangId")
                        .HasConstraintName("website_lang_rel_lang_id_fkey"),
                    l => l.HasOne<Website>().WithMany()
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("website_lang_rel_website_id_fkey"),
                    j =>
                    {
                        j.HasKey("WebsiteId", "LangId").HasName("website_lang_rel_pkey");
                        j.ToTable("website_lang_rel", tb => tb.HasComment("RELATION BETWEEN website AND res_lang"));
                        j.HasIndex(new[] { "LangId", "WebsiteId" }, "website_lang_rel_lang_id_website_id_idx");
                        j.IndexerProperty<int>("WebsiteId").HasColumnName("website_id");
                        j.IndexerProperty<int>("LangId").HasColumnName("lang_id");
                    });
        });

        modelBuilder.Entity<WebsiteBaseUnit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_base_unit_pkey");

            entity.ToTable("website_base_unit", tb => tb.HasComment("Unit of Measure for price per unit on eCommerce products."));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteBaseUnitCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_base_unit_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteBaseUnitWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_base_unit_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteConfiguratorFeature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_configurator_feature_pkey");

            entity.ToTable("website_configurator_feature", tb => tb.HasComment("Website Configurator Feature"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasComment("Description")
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.FeatureUrl)
                .HasComment("Feature Url")
                .HasColumnType("character varying")
                .HasColumnName("feature_url");
            entity.Property(e => e.IapPageCode)
                .HasComment("Iap Page Code")
                .HasColumnType("character varying")
                .HasColumnName("iap_page_code");
            entity.Property(e => e.Icon)
                .HasComment("Icon")
                .HasColumnType("character varying")
                .HasColumnName("icon");
            entity.Property(e => e.MenuCompany)
                .HasComment("Menu Company")
                .HasColumnName("menu_company");
            entity.Property(e => e.MenuSequence)
                .HasComment("Menu Sequence")
                .HasColumnName("menu_sequence");
            entity.Property(e => e.ModuleId)
                .HasComment("Module")
                .HasColumnName("module_id");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PageViewId)
                .HasComment("Page View")
                .HasColumnName("page_view_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteConfigPreselection)
                .HasComment("Website Config Preselection")
                .HasColumnType("character varying")
                .HasColumnName("website_config_preselection");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteConfiguratorFeatureCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_configurator_feature_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.WebsiteConfiguratorFeatures)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_configurator_feature_module_id_fkey");

            entity.HasOne(d => d.PageView).WithMany(p => p.WebsiteConfiguratorFeatures)
                .HasForeignKey(d => d.PageViewId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_configurator_feature_page_view_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteConfiguratorFeatureWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_configurator_feature_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteEventMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_event_menu_pkey");

            entity.ToTable("website_event_menu", tb => tb.HasComment("Website Event Menu"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.EventId)
                .HasComment("Event")
                .HasColumnName("event_id");
            entity.Property(e => e.MenuId)
                .HasComment("Menu")
                .HasColumnName("menu_id");
            entity.Property(e => e.MenuType)
                .HasComment("Menu Type")
                .HasColumnType("character varying")
                .HasColumnName("menu_type");
            entity.Property(e => e.ViewId)
                .HasComment("View")
                .HasColumnName("view_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteEventMenuCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_event_menu_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.WebsiteEventMenus)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_event_menu_event_id_fkey");

            entity.HasOne(d => d.Menu).WithMany(p => p.WebsiteEventMenus)
                .HasForeignKey(d => d.MenuId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_event_menu_menu_id_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.WebsiteEventMenus)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_event_menu_view_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteEventMenuWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_event_menu_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_menu_pkey");

            entity.ToTable("website_menu", tb => tb.HasComment("Website Menu"));

            entity.HasIndex(e => e.ParentId, "website_menu_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "website_menu_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MegaMenuClasses)
                .HasComment("Mega Menu Classes")
                .HasColumnType("character varying")
                .HasColumnName("mega_menu_classes");
            entity.Property(e => e.MegaMenuContent)
                .HasComment("Mega Menu Content")
                .HasColumnType("jsonb")
                .HasColumnName("mega_menu_content");
            entity.Property(e => e.Name)
                .HasComment("Menu")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NewWindow)
                .HasComment("New Window")
                .HasColumnName("new_window");
            entity.Property(e => e.PageId)
                .HasComment("Related Page")
                .HasColumnName("page_id");
            entity.Property(e => e.ParentId)
                .HasComment("Parent Menu")
                .HasColumnName("parent_id");
            entity.Property(e => e.ParentPath)
                .HasComment("Parent Path")
                .HasColumnType("character varying")
                .HasColumnName("parent_path");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.ThemeTemplateId)
                .HasComment("Theme Template")
                .HasColumnName("theme_template_id");
            entity.Property(e => e.Url)
                .HasComment("Url")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteMenuCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_menu_create_uid_fkey");

            entity.HasOne(d => d.Page).WithMany(p => p.WebsiteMenus)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_menu_page_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_menu_parent_id_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.WebsiteMenus)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_menu_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteMenus)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_menu_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteMenuWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_menu_write_uid_fkey");
        });

        modelBuilder.Entity<WebsitePage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_page_pkey");

            entity.ToTable("website_page", tb => tb.HasComment("Page"));

            entity.HasIndex(e => e.IsPublished, "website_page_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "website_page_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.DatePublish)
                .HasComment("Publishing Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_publish");
            entity.Property(e => e.FooterVisible)
                .HasComment("Footer Visible")
                .HasColumnName("footer_visible");
            entity.Property(e => e.HeaderColor)
                .HasComment("Header Color")
                .HasColumnType("character varying")
                .HasColumnName("header_color");
            entity.Property(e => e.HeaderOverlay)
                .HasComment("Header Overlay")
                .HasColumnName("header_overlay");
            entity.Property(e => e.HeaderVisible)
                .HasComment("Header Visible")
                .HasColumnName("header_visible");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.ThemeTemplateId)
                .HasComment("Theme Template")
                .HasColumnName("theme_template_id");
            entity.Property(e => e.Url)
                .HasComment("Page URL")
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.ViewId)
                .HasComment("View")
                .HasColumnName("view_id");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WebsiteIndexed)
                .HasComment("Is Indexed")
                .HasColumnName("website_indexed");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsitePageCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_page_create_uid_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.WebsitePages)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_page_theme_template_id_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.WebsitePages)
                .HasForeignKey(d => d.ViewId)
                .HasConstraintName("website_page_view_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsitePages)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_page_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsitePageWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_page_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteRewrite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_rewrite_pkey");

            entity.ToTable("website_rewrite", tb => tb.HasComment("Website rewrite"));

            entity.HasIndex(e => e.UrlFrom, "website_rewrite_url_from_index");

            entity.HasIndex(e => e.WebsiteId, "website_rewrite_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasComment("Active")
                .HasColumnName("active");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RedirectType)
                .HasComment("Action")
                .HasColumnType("character varying")
                .HasColumnName("redirect_type");
            entity.Property(e => e.RouteId)
                .HasComment("Route")
                .HasColumnName("route_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.UrlFrom)
                .HasComment("URL from")
                .HasColumnType("character varying")
                .HasColumnName("url_from");
            entity.Property(e => e.UrlTo)
                .HasComment("URL to")
                .HasColumnType("character varying")
                .HasColumnName("url_to");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteRewriteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_rewrite_create_uid_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.WebsiteRewrites)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_rewrite_route_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteRewrites)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_rewrite_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteRewriteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_rewrite_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteRobot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_robots_pkey");

            entity.ToTable("website_robots", tb => tb.HasComment("Robots.txt Editor"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content)
                .HasComment("Content")
                .HasColumnName("content");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteRobotCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_robots_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteRobotWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_robots_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteRoute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_route_pkey");

            entity.ToTable("website_route", tb => tb.HasComment("All Website Route"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.Path)
                .HasComment("Route")
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteRouteCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_route_create_uid_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteRouteWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_route_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteSaleExtraField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_sale_extra_field_pkey");

            entity.ToTable("website_sale_extra_field", tb => tb.HasComment("E-Commerce Extra Info Shown on product page"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FieldId)
                .HasComment("Field")
                .HasColumnName("field_id");
            entity.Property(e => e.Sequence)
                .HasComment("Sequence")
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteSaleExtraFieldCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_sale_extra_field_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.WebsiteSaleExtraFields)
                .HasForeignKey(d => d.FieldId)
                .HasConstraintName("website_sale_extra_field_field_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteSaleExtraFields)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_sale_extra_field_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteSaleExtraFieldWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_sale_extra_field_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteSnippetFilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_snippet_filter_pkey");

            entity.ToTable("website_snippet_filter", tb => tb.HasComment("Website Snippet Filter"));

            entity.HasIndex(e => e.IsPublished, "website_snippet_filter_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "website_snippet_filter_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionServerId)
                .HasComment("Server Action")
                .HasColumnName("action_server_id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.FieldNames)
                .HasComment("Field Names")
                .HasColumnType("character varying")
                .HasColumnName("field_names");
            entity.Property(e => e.FilterId)
                .HasComment("Filter")
                .HasColumnName("filter_id");
            entity.Property(e => e.IsPublished)
                .HasComment("Is Published")
                .HasColumnName("is_published");
            entity.Property(e => e.Limit)
                .HasComment("Limit")
                .HasColumnName("limit");
            entity.Property(e => e.Name)
                .HasComment("Name")
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ProductCrossSelling)
                .HasComment("About cross selling products")
                .HasColumnName("product_cross_selling");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.ActionServer).WithMany(p => p.WebsiteSnippetFilters)
                .HasForeignKey(d => d.ActionServerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_snippet_filter_action_server_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteSnippetFilterCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_snippet_filter_create_uid_fkey");

            entity.HasOne(d => d.Filter).WithMany(p => p.WebsiteSnippetFilters)
                .HasForeignKey(d => d.FilterId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_snippet_filter_filter_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteSnippetFilters)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_snippet_filter_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteSnippetFilterWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_snippet_filter_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteTrack>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_track_pkey");

            entity.ToTable("website_track", tb => tb.HasComment("Visited Pages"));

            entity.HasIndex(e => e.PageId, "website_track_page_id_index");

            entity.HasIndex(e => e.ProductId, "website_track_product_id_index").HasFilter("(product_id IS NOT NULL)");

            entity.HasIndex(e => e.Url, "website_track_url_index");

            entity.HasIndex(e => e.VisitorId, "website_track_visitor_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PageId)
                .HasComment("Page")
                .HasColumnName("page_id");
            entity.Property(e => e.ProductId)
                .HasComment("Product")
                .HasColumnName("product_id");
            entity.Property(e => e.Url)
                .HasComment("Url")
                .HasColumnName("url");
            entity.Property(e => e.VisitDatetime)
                .HasComment("Visit Date")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("visit_datetime");
            entity.Property(e => e.VisitorId)
                .HasComment("Visitor")
                .HasColumnName("visitor_id");

            entity.HasOne(d => d.Page).WithMany(p => p.WebsiteTracks)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_track_page_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.WebsiteTracks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_track_product_id_fkey");

            entity.HasOne(d => d.Visitor).WithMany(p => p.WebsiteTracks)
                .HasForeignKey(d => d.VisitorId)
                .HasConstraintName("website_track_visitor_id_fkey");
        });

        modelBuilder.Entity<WebsiteVisitor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_visitor_pkey");

            entity.ToTable("website_visitor", tb => tb.HasComment("Website Visitor"));

            entity.HasIndex(e => e.AccessToken, "website_visitor_access_token_unique").IsUnique();

            entity.HasIndex(e => e.LivechatOperatorId, "website_visitor_livechat_operator_id_index").HasFilter("(livechat_operator_id IS NOT NULL)");

            entity.HasIndex(e => e.PartnerId, "website_visitor_partner_id_index").HasFilter("(partner_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasComment("Access Token")
                .HasColumnType("character varying")
                .HasColumnName("access_token");
            entity.Property(e => e.CountryId)
                .HasComment("Country")
                .HasColumnName("country_id");
            entity.Property(e => e.CreateDate)
                .HasComment("First Connection")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.LangId)
                .HasComment("Language")
                .HasColumnName("lang_id");
            entity.Property(e => e.LastConnectionDatetime)
                .HasComment("Last Connection")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_connection_datetime");
            entity.Property(e => e.LivechatOperatorId).HasColumnName("livechat_operator_id");
            entity.Property(e => e.PartnerId)
                .HasComment("Contact")
                .HasColumnName("partner_id");
            entity.Property(e => e.Timezone)
                .HasComment("Timezone")
                .HasColumnType("character varying")
                .HasColumnName("timezone");
            entity.Property(e => e.VisitCount)
                .HasComment("# Visits")
                .HasColumnName("visit_count");
            entity.Property(e => e.WebsiteId)
                .HasComment("Website")
                .HasColumnName("website_id");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.Country).WithMany(p => p.WebsiteVisitors)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_country_id_fkey");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WebsiteVisitorCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_create_uid_fkey");

            entity.HasOne(d => d.Lang).WithMany(p => p.WebsiteVisitors)
                .HasForeignKey(d => d.LangId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_lang_id_fkey");

            entity.HasOne(d => d.LivechatOperator).WithMany(p => p.WebsiteVisitorLivechatOperators)
                .HasForeignKey(d => d.LivechatOperatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_livechat_operator_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.WebsiteVisitorPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_partner_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteVisitors)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_website_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WebsiteVisitorWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_write_uid_fkey");
        });

        modelBuilder.Entity<WizardIrModelMenuCreate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("wizard_ir_model_menu_create_pkey");

            entity.ToTable("wizard_ir_model_menu_create", tb => tb.HasComment("Create Menu Wizard"));

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasComment("Created on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateUid)
                .HasComment("Created by")
                .HasColumnName("create_uid");
            entity.Property(e => e.MenuId)
                .HasComment("Parent Menu")
                .HasColumnName("menu_id");
            entity.Property(e => e.Name)
                .HasComment("Menu Name")
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WriteDate)
                .HasComment("Last Updated on")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteUid)
                .HasComment("Last Updated by")
                .HasColumnName("write_uid");

            entity.HasOne(d => d.CreateU).WithMany(p => p.WizardIrModelMenuCreateCreateUs)
                .HasForeignKey(d => d.CreateUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("wizard_ir_model_menu_create_create_uid_fkey");

            entity.HasOne(d => d.Menu).WithMany(p => p.WizardIrModelMenuCreates)
                .HasForeignKey(d => d.MenuId)
                .HasConstraintName("wizard_ir_model_menu_create_menu_id_fkey");

            entity.HasOne(d => d.WriteU).WithMany(p => p.WizardIrModelMenuCreateWriteUs)
                .HasForeignKey(d => d.WriteUid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("wizard_ir_model_menu_create_write_uid_fkey");
        });
        modelBuilder.HasSequence("base_cache_signaling");
        modelBuilder.HasSequence("base_registry_signaling");
        modelBuilder.HasSequence("ir_sequence_001");
        modelBuilder.HasSequence("ir_sequence_002");
        modelBuilder.HasSequence("ir_sequence_003");
        modelBuilder.HasSequence("ir_sequence_004");
        modelBuilder.HasSequence("ir_sequence_005");
        modelBuilder.HasSequence("ir_sequence_006");
        modelBuilder.HasSequence("ir_sequence_007");
        modelBuilder.HasSequence("ir_sequence_008");
        modelBuilder.HasSequence("ir_sequence_009");
        modelBuilder.HasSequence("ir_sequence_010");
        modelBuilder.HasSequence("ir_sequence_011");
        modelBuilder.HasSequence("ir_sequence_012");
        modelBuilder.HasSequence("ir_sequence_013");
        modelBuilder.HasSequence("ir_sequence_014");
        modelBuilder.HasSequence("ir_sequence_015");
        modelBuilder.HasSequence("ir_sequence_016");
        modelBuilder.HasSequence("ir_sequence_017");
        modelBuilder.HasSequence("ir_sequence_018");
        modelBuilder.HasSequence("ir_sequence_019");
        modelBuilder.HasSequence("ir_sequence_020");
        modelBuilder.HasSequence("ir_sequence_021");
        modelBuilder.HasSequence("ir_sequence_022");
        modelBuilder.HasSequence("ir_sequence_023");
        modelBuilder.HasSequence("ir_sequence_024");
        modelBuilder.HasSequence("ir_sequence_025");
        modelBuilder.HasSequence("ir_sequence_026");

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
